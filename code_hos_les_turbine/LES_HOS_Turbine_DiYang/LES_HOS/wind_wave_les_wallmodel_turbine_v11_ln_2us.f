      PROGRAM WIND_LES

C     VERSION 11
C     SYNCHRONIZE TIME AFTER REREADN
C     THIS PREVENT IDLE CPU FREEZING CAUSED BY NO REREADING FROM FORT.14000

C     VERSION 10
C     ADD LAGRANGIAN-AVERAGED SCALE-DEPENDENT DYNAMIC MODEL
C     ADD PLANAR-AVERAGED SCALE-DEPENDENT DYNAMIC MODEL
C     IN FUN_U,FUN_V,FUN_W,_LES8, USE UJd(UI)/dXJ ISTEAD OF d(UIUJ)/dXJ
C     ADD SUBROUTINE WALL_MODEL_V3

C     VERSION 9
C     REPLACE NDP BY WNDP (WEIGHTED BY WTGAMMA0)
C     ADD SUBROUTINES DISCLOCA_V3 AND VELDISC_V2
C     CORRECT TEMPORAL AVERAGING FOR UD IN SUBROUTINES VELDISC***

C     VERSION 8
C     CORRECT TRIGSXS BUG IN LAST 2D TRANSPOSE OF SUBROUTINE PADDING

C     VERSION 7
C     CORRECT T13_1 BUG IN FUN_U_LES8
C     CORRECT WBS BUG IN MAIN SUBROUGINES (CHANGE WB TO WBS)

C     IN THIS VERSION, ADD POWER EXTRACTION TO OUTPUT
C     IN THIS VERSION, GIVE PRESCRIBED VALUE TO CS WHEN CS<0
C     IN THIS VERSION, ADD WIND TURBINE MODEL

C     VERSION 1
C     WIND LES+HOS_JONSWAP

      IMPLICIT NONE
      INCLUDE "mpif.h"
      INTEGER NXMAX,NYMAX,NZMAX,NZMAX2,NWORK,NTRIGS,NCPU
      INTEGER NX,NY,NZ,NXMOD,NYMOD,NPROC
      INTEGER NXMAXS,NYMAXS,NXS,NYS,NXMODS,NYMODS,NWORKS,NTRIGSS
      INTEGER DUMI,MYID,IERR
      REAL DUMR

      CALL MPI_INIT(IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NPROC,IERR)
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)

      OPEN(11)
      READ(11,*) NCPU
      READ(11,*) DUMI
      READ(11,*) DUMI
      READ(11,*) DUMR,DUMR
      READ(11,*) DUMR,DUMR
      READ(11,*) NX,NY,NZ
      READ(11,*) NXS,NYS
      CLOSE(11)
      IF(NCPU.NE.NPROC) THEN
         IF(MYID.EQ.0) THEN
            PRINT *,'CPU NUMBER ASKED:',NCPU
            PRINT *,'CPU NUMBER PROVIDED',NPROC
            PRINT *,'ERROR'
         ENDIF
         STOP
      ENDIF

      READ(11,*) DUMI

      NXMOD=NX-1
      NYMOD=NY-1
      IF(MOD(NXMOD+2,NCPU).EQ.0) THEN
         NXMAX=NXMOD+2
      ELSE
         NXMAX=NXMOD+2+NCPU-MOD(NXMOD+2,NCPU)
      ENDIF
      IF(MOD(NYMOD+2,NCPU).EQ.0) THEN
         NYMAX=NYMOD+2
      ELSE
         NYMAX=NYMOD+2+NCPU-MOD(NYMOD+2,NCPU)
      ENDIF
C      NZMAX=130
      NZMAX=NZ+1
      NZMAX2=NZMAX+1

      NWORK=2*NXMAX*NZMAX
      NTRIGS=4*MAX(NXMAX,NYMAX)

      NXMODS=NXS-1
      NYMODS=NYS-1
      IF(MOD(NXMODS+2,NCPU).EQ.0) THEN
         NXMAXS=NXMODS+2
      ELSE
         NXMAXS=NXMODS+2+NCPU-MOD(NXMODS+2,NCPU)
      ENDIF
      IF(MOD(NYMODS+2,NCPU).EQ.0) THEN
         NYMAXS=NYMODS+2
      ELSE
         NYMAXS=NYMODS+2+NCPU-MOD(NYMODS+2,NCPU)
      ENDIF

      NWORKS=2*NXMAXS*NZMAX
      NTRIGSS=4*MAX(NXMAXS,NYMAXS)

      IF(MYID.EQ.0) THEN
         PRINT *,'NCPU:',NCPU
         PRINT *,'NXMAX:',NXMAX
         PRINT *,'NYMAX:',NYMAX
         PRINT *,'NXMAXS:',NXMAXS
         PRINT *,'NYMAXS:',NYMAXS
      ENDIF

      CALL STRESS_DRIVEN_SURF_WAVY_BOT(NXMAX,NYMAX,NXMAXS,NYMAXS,NZMAX,
     &     NZMAX2,NWORK,NTRIGS,NWORKS,NTRIGSS,NCPU)

      CALL MPI_FINALIZE(IERR)

      STOP
      END

C=====PROGRAM WIND_LES END HERE









C======================================================================
      SUBROUTINE STRESS_DRIVEN_SURF_WAVY_BOT(NXMAX,NYMAX,NXMAXS,NYMAXS,
     &     NZMAX,NZMAX2,NWORK,NTRIGS,NWORKS,NTRIGSS,NCPU)

C     THIS IS THE FLAT STRESS-DRIVEN SURFACE COUETTE FLOW VERSION

C-----1.SURFACE IS FLAT AND DRIVEN BY GIVEN U* VALUE
C-----2.THREE DIFFERENT BOTTOM CONDITIONS CONTROLED BY IWAVY
C-----3.DEALIAS ONLY AFTER SUBROUTINE VELOCITY
C-----4.BODY FORCE SHOULD BE 0 FOR COUETTE FLOW

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER NXMAX,NYMAX,NZMAX,NZMAX2,NWORK,NTRIGS,NCPU
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS,NWORKS,NTRIGSS
      INTEGER I,J,K,IT
      INTEGER NXMOD,NYMOD,NZ
      INTEGER ICON,ICON2,ISTART,NTIME,NOUTC,NOUTD,NWAVE,IWAVY
      INTEGER MODX,MODY,MODZ,ITMAX,IOUTD,IOUTC
      REAL XL,YL,ZL,PEX,PEY,DT,RE,FR2,FR,WE
      REAL CLBETA,CLGAMA,ARM,HA,HK,HOMEG,TCOEF,TIMEWAVY,HKA
      REAL CRAT,VPHASE,ERLIM,AKA,TIME
      REAL BFORCE,RESBOT,ZLSBOT,USBOT,RESTOP,ZLSTOP,USTOP
      REAL DX,DY,HM,CS,DUM,HDUM,UDUM,WDUM,TWOPI,TS

      REAL FR23,BFORCE3,HA3,HK3,HOMEG3,CRAT3,TCOEF3,TIMEWAVY3,RE3
      INTEGER IWAVY3
      
      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

C      PARAMETER (NXMAX=66,NYMAX=132,NZMAX=130,NZMAX2=NZMAX+1)
C      PARAMETER (NWORK=2*NXMAX*NZMAX)
C      PARAMETER (NTRIGS=4*MAX(NXMAX,NYMAX))
C      PARAMETER (NCPU=22)

      INTEGER MYID,NUMPROCS,IERR,STATUS(MPI_STATUS_SIZE)

      REAL U(NXMAX,NYMAX/NCPU,NZMAX),UT(NXMAX,NYMAX/NCPU,NZMAX)
      REAL V(NXMAX,NYMAX/NCPU,NZMAX),VT(NXMAX,NYMAX/NCPU,NZMAX)
      REAL W(NXMAX,NYMAX/NCPU,NZMAX),WT(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UB(NXMAX,NYMAX/NCPU),US(NXMAX)
      REAL VB(NXMAX,NYMAX/NCPU)
      REAL WB(NXMAX,NYMAX/NCPU),WS(NXMAX)
      REAL PP(NXMAX,NYMAX/NCPU,NZMAX)
      REAL HU(NXMAX,NYMAX/NCPU,NZMAX),OMX(NXMAX,NYMAX/NCPU,NZMAX)
      REAL HV(NXMAX,NYMAX/NCPU,NZMAX),OMY(NXMAX,NYMAX/NCPU,NZMAX)
      REAL HW(NXMAX,NYMAX/NCPU,NZMAX),OMZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UZFS1(NXMAX,NYMAX/NCPU),UZB(NXMAX,NYMAX/NCPU)
      REAL VZFS1(NXMAX,NYMAX/NCPU),VZB(NXMAX,NYMAX/NCPU)
      REAL WZFS1(NXMAX,NYMAX/NCPU)
      
      REAL HH(NXMAX,NYMAX/NCPU),HT(NXMAX,NYMAX/NCPU)
      REAL HS(NXMAX),HTMP(NXMAX)
      REAL ETA(NXMAX,NYMAX/NCPU),ETA0(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EXX(NXMAX,NYMAX/NCPU)
      REAL EY(NXMAX,NYMAX/NCPU),EYY(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HXX(NXMAX,NYMAX/NCPU)
      REAL HY(NXMAX,NYMAX/NCPU),HYY(NXMAX,NYMAX/NCPU)
      REAL EXY(NXMAX,NYMAX/NCPU),HXY(NXMAX,NYMAX/NCPU)
      REAL EHX(NXMAX,NYMAX/NCPU),EHX2(NXMAX,NYMAX/NCPU)
      REAL EHY(NXMAX,NYMAX/NCPU),EHY2(NXMAX,NYMAX/NCPU)
      REAL REH(NXMAX,NYMAX/NCPU),REH2(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU),HER2(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HBAR
      
      REAL NF(NXMAX,NYMAX/NCPU)
      REAL TF1(NXMAX,NYMAX/NCPU),TF2(NXMAX,NYMAX/NCPU)
      
      REAL ETA1D(NXMAX)

      REAL ZZ1(NZMAX),ZZ2(NZMAX),ZZ(NZMAX),DZ(NZMAX),ZW(NZMAX)
      
      REAL WORK(NWORK)
      REAL TRIGSX(NTRIGS),TRIGSY(NTRIGS),TRIGSZ(NTRIGS)
      REAL WORKS(NWORKS)
      REAL TRIGSXS(NTRIGSS),TRIGSYS(NTRIGSS)
      INTEGER IFAX(19)

CC--LES
CC      REAL DELTA
      INTEGER ICSC,ISCALAR

      INTEGER IVANDRIEST,IWAVEBOT,MFILT
      REAL CS0,APLUS,ZCS0
CC--LES END

      DATA ICON,ICON2/14,16/

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER NPW

      PARAMETER (NPW=3)

      INTEGER IPA
C     IPA=0: NO AIR SURFACE PRESSURE INPUT TO HOS SIMULATION
C     IPA=1: HAVE AIR SURFACE PRESSURE INPUT TO HOS

      INTEGER NTH
C     NTH: NUMBER OF HOS TIME STEP PER TURBULENT SIMULATION TIME STEP

      REAL TIMEP,TCP,RDGL,TIMEW

      REAL ETAB(NXMAXS,NYMAXS/NCPU),ETAB0(NXMAXS,NYMAXS/NCPU)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,NYMAXS/NCPU),VPS0(NXMAXS,NYMAXS/NCPU)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW),ZP(NXMAXS,NYMAXS/NCPU,NPW)
      REAL R(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)

      REAL Z0(NXMAX,NYMAX/NCPU)
      
C-----END HERE

C-------------------
C     FOR LES
C-------------------

      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CSS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

C-----END HERE

C-----------------------------------
C     FOR LASD DYNAMIC MODEL
C-----------------------------------

      REAL JMM0(NXMAX,NYMAX,NZMAX),JLM0(NXMAX,NYMAX,NZMAX)
      REAL JNN0(NXMAX,NYMAX,NZMAX),JQN0(NXMAX,NYMAX,NZMAX)
      REAL CS_LASD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL TAU13_NU(NXMAX,NYMAX/NCPU,NZMAX)
      REAL TAU13_SGS(NXMAX,NYMAX/NCPU,NZMAX)

      INTEGER ITLASD,ILASD
      REAL TLASD,TLASD0

C-----END HERE

C------------------------------------
C     VARIABLES FOR WIND TURBINE
C------------------------------------
      
      INTEGER ITURBINE
      REAL TIMETURB

      INTEGER NXWT,NYWT,NDP
      PARAMETER (NXWT=3,NYWT=3)

      REAL RDISC,HDISC
      PARAMETER (RDISC=0.05,HDISC=0.1)
      
      INTEGER ICUT(NXWT),JCUT(NYWT),KCUT

      INTEGER NDISC(NXMAX,NYMAX,NZMAX),IDISC(NXMAX,NYMAX,NZMAX)
      REAL WTGAMMA0(NXMAX,NYMAX,NZMAX),UD(NXWT*NYWT)
      REAL WNDP

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      READ(11,*) ISTART
      READ(11,*) ITURBINE
      
CC--LES
      OPEN(UNIT=1,FILE="LES.IN")
      READ(1,*) MFILT
      READ(1,*) ICSC
      READ(1,*) ILASD,TLASD,TLASD0
      READ(1,*) IVANDRIEST,CS0,APLUS
      READ(1,*) IWAVEBOT,ZCS0
      CLOSE(1)
CC--LES END

      IF(ISTART.NE.0) THEN
         print*, "Inputing:"
         CALL INPUT(NXMOD,NYMOD,NZ,XL,YL,ZL,DX,DY,HBAR,PEX,PEY,DT,NTIME,
     1        TIME,NOUTD,NOUTC,BFORCE,RESBOT,ZLSBOT,USBOT,RESTOP,ZLSTOP,
     1        USTOP,RE,FR2,WE,CLBETA,CLGAMA,ARM,HA,HK,HOMEG,TCOEF,
     1        TIMEWAVY,HKA,NWAVE,CRAT,VPHASE,IWAVY,MODX,MODY,MODZ,
     1        ISTART,ITMAX,ERLIM,AKA,ERVFILT,NFILT,IFILT,IPA,NTH,TIMEP,
     1        TCP,TIMEW,RDGL,NXMODS,NYMODS,TIMETURB,NCPU)
         CALL TPWRITE(NYMOD,NYMAX,NXWT,NYWT,JCUT,NCPU)
         
         print*, "Inputing complete !"
CC         print*, ""
         print*, "Rereading:"

C+++
         CALL REREADN(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,
     1        PEY,TIME,RE3,FR23,WE,IOUTD,IOUTC,ICON,U,V,W,PP,UZFS1,
     1        VZFS1,WZFS1,DX,DY,DZ,ZZ,ZW,CLBETA,CLGAMA,BFORCE3,HU,HV,HW,
     1        ETA,ETA0,HH,HT,HA3,HK3,HOMEG3,CRAT3,TCOEF3,TIMEWAVY3,
     1        IWAVY3,HBAR,NCPU)
         CALL MPI_BCAST(TIME,1,MPI_DOUBLE_PRECISION,0,MPI_COMM_WORLD,
     1        IERR)
c+++
c     re-initialize ioutd and ioutc
         if(ioutd.gt.noutd) ioutd=0
         if(ioutc.gt.noutc) ioutc=0
c+++
C     ADD 3 FOR PARAMETERS WHICH MAY BE CHANGED WHEN CONTINUE RUNNING
         print*, "Rereading complete !"
C+++

C----------------------------------------------
C     INITIALIZE WIND TURBINE CALCULATION
C----------------------------------------------

         IF(ITURBINE.EQ.1) THEN

CC         CALL DISCLOCA_V2(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
CC     1        IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,NDP,
CC     1        RDISC,HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)

            print*, "Disc location initialized!"
            
            IF(TIME.LE.TIMETURB) THEN
               CALL VELDISC_INITIAL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,
     1              NCPU,UD,U,NDISC,IDISC,NXWT,NYWT,NDP,DT)
            ELSE
               CALL REREADUD(18,NXWT,NYWT,UD)
            ENDIF

         ENDIF

C-----END HERE

         print*, "Grid generation:"
         CALL CLUSTER_NL_1(NZ,NZMAX,ZL,CLBETA,CLGAMA,ZZ1,ZZ2,ZZ,ZW,DZ)
         print*, "Grid generation complete !"
         GOTO 90
      ENDIF

      CALL INPUT(NXMOD,NYMOD,NZ,XL,YL,ZL,DX,DY,HBAR,PEX,PEY,DT,NTIME,
     1     TIME,NOUTD,NOUTC,BFORCE,RESBOT,ZLSBOT,USBOT,RESTOP,ZLSTOP,
     1     USTOP,RE,FR2,WE,CLBETA,CLGAMA,ARM,HA,HK,HOMEG,TCOEF,TIMEWAVY,
     1     HKA,NWAVE,CRAT,VPHASE,IWAVY,MODX,MODY,MODZ,ISTART,ITMAX,
     1     ERLIM,AKA,ERVFILT,NFILT,IFILT,IPA,NTH,TIMEP,TCP,TIMEW,RDGL,
     1     NXMODS,NYMODS,TIMETURB,NCPU)
      CALL TPWRITE(NYMOD,NYMAX,NXWT,NYWT,JCUT,NCPU)
      
      CALL CLUSTER_NL_1(NZ,NZMAX,ZL,CLBETA,CLGAMA,ZZ1,ZZ2,ZZ,ZW,DZ)

C-----------------------------------------------------------------------     
C     FLAT BOTTOM AT THE BEGINNING

      IF(IWAVY.EQ.5.OR.IWAVY.EQ.6) THEN
      
         TWOPI=2.*ACOS(-1.)
         
         READ(12,*) DUM,TS,CS
         
         HOMEG=(TWOPI/TS)*HK*VPHASE/CS
         
         DO I=1,NXMOD+1
            READ(102,*) DUM,HDUM,UDUM,WDUM
            HTMP(I)=HDUM/HK
            US(I)=UDUM*VPHASE/CS
            WS(I)=WDUM*VPHASE/CS
         ENDDO
         
         CALL FFTX_PARA(HTMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NCPU,NCPU,-1)
         HM=HTMP(1)
         CALL FFTX_PARA(HTMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NCPU,NCPU,1)
         
         DO I=1,NXMOD
            HS(I)=-(HTMP(I)-HM)
         ENDDO

      ENDIF

      CALL BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,HK,
     1     HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)

C-----------------------------------------------------------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ETA(I,J)=0.+HH(I,J)
         ENDDO
      ENDDO

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,
     1     EHX,EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
  
      CALL INITIAL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ZL,PEX,PEY,ZZ,
     1     DZ,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,U,V,W,RESBOT,ZLSBOT,USBOT,
     1     RESTOP,ZLSTOP,USTOP,ARM,MODX,MODY,MODZ,HER,EXR,EYR,HXR,HYR,
     1     HBAR,NCPU)

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            TF1(I,J)=0.
            TF2(I,J)=0.
            NF(I,J)=0.
            UZFS1(I,J)=0.
            VZFS1(I,J)=0.
            DO K=1,NZ
               PP(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

CC      DO K=1,NZMAX
CC         DO J=1,NYMAX/NCPU
CC            DO I=1,NXMAX
CC               NUT(I,J,K)=0.0
CC               NUTW(I,J,K)=0.0
CC               S11(I,J,K)=0.0
CC               S12(I,J,K)=0.0
CC               S13(I,J,K)=0.0
CC               S22(I,J,K)=0.0
CC               S23(I,J,K)=0.0
CC               S33(I,J,K)=0.0
CC               S11W(I,J,K)=0.0
CC               S12W(I,J,K)=0.0
CC               S13W(I,J,K)=0.0
CC               S22W(I,J,K)=0.0
CC               S23W(I,J,K)=0.0
CC               S33W(I,J,K)=0.0
CC            ENDDO
CC         ENDDO
CC      ENDDO

CC      CALL GETNUT(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,HER,HXR,
CC     1     EXR,HYR,EYR,U,V,W,DELTA,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,
CC     1     S11,S12,S13,S22,S23,S33,CSS,CSP,CSD,NUT,NUTA,IVANDRIEST,CS0,
CC     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0)
      
CC      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,
CC     1     UZFS1,VZFS1,W,HBAR,NUTA,USTOP,NCPU)
      
      CALL BC_LNR(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS1,VZFS1,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C----------------------------------------------
C     INITIALIZE WIND TURBINE CALCULATION
C----------------------------------------------

      IF(ITURBINE.EQ.1) THEN
         
         CALL DISCLOCA_V3(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
     1        IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,WNDP,
     1        RDISC,HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)
         
         CALL VELDISC_INITIAL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1        UD,U,NDISC,IDISC,NXWT,NYWT,NDP,DT)

      ENDIF

C-----EMD HERE

C------------------------------------------------------------------------
      
      IOUTC=NOUTC-1
      IOUTD=NOUTD-1

      CALL OUTPUT(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,PEY,
     1     DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,IOUTD,
     1     NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,HYR,HER,
     1     HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,CS_LASD,TAU13_NU,TAU13_SGS)

      GOTO 750
      
 90   CONTINUE

C-----------------------------------------------------------------------     
C     CALL BOTTOM HERE TO CALCULATE HT

      IF(IWAVY.EQ.5.OR.IWAVY.EQ.6) THEN
      
         TWOPI=2.*ACOS(-1.)
         
         READ(12,*) DUM,TS,CS
         
         HOMEG=(TWOPI/TS)*HK*VPHASE/CS
         
         DO I=1,NXMOD+1
            READ(102,*) DUM,HDUM,UDUM,WDUM
            HTMP(I)=HDUM/HK
            US(I)=UDUM*VPHASE/CS
            WS(I)=WDUM*VPHASE/CS
         ENDDO
         
         CALL FFTX_PARA(HTMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NCPU,NCPU,-1)
         HM=HTMP(1)
         CALL FFTX_PARA(HTMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NCPU,NCPU,1)
         
         DO I=1,NXMOD
            HS(I)=-(HTMP(I)-HM)
         ENDDO

      ENDIF

      CALL BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,HK,
     1     HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)

C-----END HERE

C-----------------------------------------------
C     INITIAL STEP FOR HOS WAVE SIMULATION
C-----------------------------------------------

      IF(IWAVY.EQ.7) THEN

         PRINT*, 'HOS INITIALIZATION STARTED!'

         CALL WAVENUM(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,PEX,PEY,WVN,NCPU)
         
         CALL REREADN_HOS(NXMODS,NYMODS,NXMAXS,NYMAXS,ETAB,VPS,PAS0,
     1        ICON,ICON2,NCPU)

         PRINT*, 'READIN HOS COMPLETE!'
         
         CALL DERIVH(NXMODS,NYMODS,NXMAXS,NYMAXS,WORKS,IFAX,TRIGSXS,
     1        TRIGSYS,PEX,PEY,ETAB,VPS,EBX,EBY,VPSX,VPSY,NCPU)
         
         CALL ZETA(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,WORKS,IFAX,TRIGSXS,
     1        TRIGSYS,PEX,PEY,ETAB,ZP,WVN,NCPU)
         
         CALL BOUNDVP(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,WORKS,IFAX,
     1        TRIGSXS,TRIGSYS,PEX,PEY,VPS,R,ZP,WVN,NCPU)
         
         CALL WSURF(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,WORKS,IFAX,TRIGSXS,
     1        TRIGSYS,PEX,PEY,WBS,R,ZP,WVN,NCPU)
         
         CALL UVSURF(NXMODS,NYMODS,NXMAXS,NYMAXS,WORKS,IFAX,TRIGSXS,
     1        TRIGSYS,PEX,PEY,UBS,VBS,WBS,EBX,EBY,VPSX,VPSY,NCPU)
         
         CALL BOTTOM_HOS_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,
     1        NXMAXS,NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,
     1        TRIGSX,TRIGSY,WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,
     1        WB,UBS,VBS,WBS,ETAB,HX,HY,HXX,HYY,HXY,NCPU)

         PRINT*, 'HOS INITIALIZED!'

      ENDIF
         
C-----END HERE

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,
     1     EHX,EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)

C      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,UZB,VZB,Z0,DZ,ETA,
C     1     HBAR,RE,DELTA,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,NZ,NZMAX,NUT,
C     1     NCPU)

C      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS1,VZFS1,
C     1     UZB,VZB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,
C     1     HYR,HER,NCPU)

      KFILT=0

CC      IF(MYID.EQ.0) THEN
CC         DO I=1,NXWT
CC            DO J=1,NYWT
CC               WRITE(8000000+I*1000+J,800) I,J 
CC            ENDDO
CC         ENDDO
CC      ENDIF
 800  FORMAT('ZONE T="R=',I2,', C=',I2,'"')

      IF(ILASD.EQ.1.AND.(TIME-TLASD0).GT.DT) THEN
         DO K=1,NZ+1
            DO J=1,NYMOD
               DO I=1,NXMOD
                  READ(12000,*) JMM0(I,J,K),JLM0(I,J,K),JNN0(I,J,K),
     1                 JQN0(I,J,K)
               ENDDO
            ENDDO
         ENDDO
      ENDIF
      ITLASD=0

      IF(IWAVY.EQ.7) GOTO 777
C      IF(IWAVY.EQ.1) GOTO 777

      IF(IWAVY.EQ.8) GOTO 888

      DO IT=1,NTIME
         
         TIME=TIME+DT

         CALL WIND_LES_WAVE_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1        NXMODS,NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,
     1        TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,
     1        EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,
     1        REH2,HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS1,VZFS1,HU,HV,HW,
     1        PP,DT,TIME,ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,
     1        IWAVY,BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,
     1        ERVFILT,NFILT,IFILT,KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,
     1        APLUS,IWAVEBOT,ZCS0,WVN,ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,
     1        FVPS,WBS,PAS0,NPW,IPA,NTH,TIMEP,TCP,FR2,RDGL,NUT,DX,DY,
     1        MFILT,CSP,CSPW,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC,WNDP,
     1        TIMETURB,RDISC,HDISC,ICUT,JCUT,KCUT,ITURBINE)

         CALL OUTPUT(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,PEY,
     1        DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,IOUTD,
     1        NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,HYR,
     1        HER,HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,CS_LASD,TAU13_NU,
     1        TAU13_SGS)

         IF(ITURBINE.EQ.1) THEN
            CALL OUTPUT_UD(28,TIME,NXWT,NYWT,UD)
         ENDIF

      ENDDO

      GOTO 750

 777  CONTINUE

      DO IT=1,NTIME
         
         TIME=TIME+DT

         ITLASD=ITLASD+1

         CALL WIND_LES_HOS_LN_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1        NXMODS,NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,
     1        TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,
     1        EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,
     1        REH2,HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS1,VZFS1,HU,HV,HW,
     1        PP,DT,TIME,ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,
     1        IWAVY,BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,
     1        ERVFILT,NFILT,IFILT,KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,
     1        APLUS,IWAVEBOT,ZCS0,WVN,ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,
     1        FVPS,WBS,PAS0,NPW,IPA,NTH,TIMEP,TCP,FR2,RDGL,NUT,DX,DY,
     1        MFILT,CSP,CSPW,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC,WNDP,
     1        TIMETURB,RDISC,HDISC,ICUT,JCUT,KCUT,ILASD,CS_LASD,JMM0,
     1        JLM0,JNN0,JQN0,TAU13_NU,TAU13_SGS,Z0,ITLASD,TLASD,TLASD0,
     1        ITURBINE)

         CALL OUTPUT(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,PEY,
     1        DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,IOUTD,
     1        NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,HYR,
     1        HER,HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,CS_LASD,TAU13_NU,
     1        TAU13_SGS)

         IF(ITURBINE.EQ.1) THEN
            CALL OUTPUT_UD(28,TIME,NXWT,NYWT,UD)
         ENDIF

CC         CALL OUTPUT_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,
CC     1        PEX,PEY,DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,
CC     1        IOUTD,NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,
CC     1        HYR,HER,HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,ICUT,JCUT,KCUT,
CC     1        NXWT,NYWT)

CC         CALL WP_EXTRACT(NXWT,NYWT,UD,PEX,PEY,TIME,RDISC,HDISC,USBOT,
CC     1        HH,NXMAX,NYMAX,NXMOD,NYMOD,NCPU)

      ENDDO

      CALL SAVE_HOS(NXMODS,NYMODS,NXMAXS,NYMAXS,ETAB,VPS,PAS0,ICON2,
     1     NCPU)

      GOTO 750

 888  CONTINUE

      CALL REREADN_HOS(NXMODS,NYMODS,NXMAXS,NYMAXS,ETAB,VPS,PAS0,
     1     ICON,ICON2,NCPU)

      CALL BOTTOM_LAND_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,
     1     WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,ETAB,HX,HY,
     1     HXX,HYY,HXY,NCPU)
      
      DO IT=1,NTIME
         
         TIME=TIME+DT

         ITLASD=ITLASD+1
         
         CALL WIND_LES_LAND_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1        NXMODS,NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,
     1        TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,
     1        EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,
     1        REH2,HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS1,VZFS1,HU,HV,HW,
     1        PP,DT,TIME,ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,
     1        IWAVY,BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,
     1        ERVFILT,NFILT,IFILT,KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,
     1        APLUS,IWAVEBOT,ZCS0,WVN,ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,
     1        FVPS,WBS,PAS0,NPW,IPA,NTH,TIMEP,TCP,FR2,RDGL,NUT,DX,DY,
     1        MFILT,CSP,CSPW,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC,WNDP,
     1        TIMETURB,RDISC,HDISC,ICUT,JCUT,KCUT,ILASD,CS_LASD,JMM0,
     1        JLM0,JNN0,JQN0,TAU13_NU,TAU13_SGS,Z0,ITLASD,TLASD,TLASD0,
     1        ITURBINE)

         CALL OUTPUT(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,PEY,
     1        DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,IOUTD,
     1        NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,HYR,
     1        HER,HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,CS_LASD,TAU13_NU,
     1        TAU13_SGS)

         IF(ITURBINE.EQ.1) THEN
            CALL OUTPUT_UD(28,TIME,NXWT,NYWT,UD)
         ENDIF

CC         CALL OUTPUT_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,
CC     1        PEX,PEY,DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,
CC     1        IOUTD,NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,
CC     1        HYR,HER,HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,ICUT,JCUT,KCUT,
CC     1        NXWT,NYWT)

CC         CALL WP_EXTRACT(NXWT,NYWT,UD,PEX,PEY,TIME,RDISC,HDISC,USBOT,
CC     1        HH,NXMAX,NYMAX,NXMOD,NYMOD,NCPU)

      ENDDO

      CALL SAVE_HOS(NXMODS,NYMODS,NXMAXS,NYMAXS,ETAB,VPS,PAS0,ICON2,
     1     NCPU)

 750  CONTINUE

      IF(ILASD.EQ.1.AND.MYID.EQ.0) THEN
         DO K=1,NZ+1
            DO J=1,NYMOD
               DO I=1,NXMOD
                  WRITE(13000,*) JMM0(I,J,K),JLM0(I,J,K),JNN0(I,J,K),
     1                 JQN0(I,J,K)
               ENDDO
            ENDDO
         ENDDO
      ENDIF

      CALL SAVE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,PEY,
     1     TIME,RE,FR2,WE,IOUTD,IOUTC,ICON,U,V,W,PP,UZFS1,VZFS1,WZFS1,
     1     DX,DY,DZ,ZZ,ZW,CLBETA,CLGAMA,BFORCE,HU,HV,HW,ETA,ETA0,HH,HT,
     1     HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU)

      IF(ITURBINE.EQ.1) THEN
         CALL SAVEUD(18,NXWT,NYWT,UD)
      ENDIF

      END

C=====MAIN PROGRAM END HERE







CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     SUBROUTINES START FROM HERE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C=======================================================================  
      SUBROUTINE INITIAL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ZL,PEX,PEY,ZZ,
     1     DZ,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,U,V,W,RESBOT,ZLSBOT,USBOT,
     1     RESTOP,ZLSTOP,USTOP,ARM,MODX,MODY,MODZ,HER,EXR,EYR,HXR,HYR,
     1     HBAR,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER MODX,MODY,MODZ

      REAL ZL,PEX,PEY,HBAR
      REAL RESBOT,ZLSBOT,USBOT,RESTOP,ZLSTOP,USTOP,ARM,AMG,AMPRAN
      REAL Z,ZLBOT,ZS,SU,U1,U2,UTOP

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL U(NXMAX,NYMAX/NCPU,*),PU(NXMAX,NYMAX/NCPU,NZMAX)
      REAL V(NXMAX,NYMAX/NCPU,*),PV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL W(NXMAX,NYMAX/NCPU,*),PW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL ZZ(*),DZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU),TRIGSX(*),TRIGSY(*),TRIGSZ(*),WORK(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL RANDOM(NXMOD,NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,IFAX,
     1     PU,PV,PW,NCPU)

      CALL CUTOFF_PARA(MODX,MODY,MODZ,NXMOD,NYMOD,NZ-1,NXMAX,NYMAX,
     1     NZMAX,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,PU(1,1,1),NCPU)
      CALL CUTOFF_PARA(MODX,MODY,MODZ,NXMOD,NYMOD,NZ-1,NXMAX,NYMAX,
     1     NZMAX,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,PV(1,1,1),NCPU)
      CALL CUTOFF_PARA(MODX,MODY,MODZ,NXMOD,NYMOD,NZ-1,NXMAX,NYMAX,
     1     NZMAX,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,PW(1,1,1),NCPU)

      DO K=1,NZ
         AMG=AMPRAN(ZZ(K)-ZL)
         IF(K.EQ.1) AMG=0.
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               PU(I,J,K)=AMG*PU(I,J,K)
               PV(I,J,K)=AMG*PV(I,J,K)
               PW(I,J,K)=AMG*PW(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      CALL SOLEON(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,V,W,PU,PV,PW,HER,EXR,EYR,HXR,HYR,NCPU)

      CALL RSCALE(ARM,NXMOD,NYMOD,NZ,NXMAX,NYMAX,U,V,W,NCPU)
      
      ZLBOT=HBAR*RESBOT/(RESBOT+RESTOP)
      IF(RESTOP.LE.1.E-6) THEN
CC         UTOP=USBOT*(2.5*ALOG(HBAR*RESBOT)+5.0)
CC         UTOP=USBOT*(2.5*ALOG(HBAR*RESBOT/(2.0*10.0**(-7))))
         UTOP=USBOT*(2.5*ALOG(HBAR/(2.0*10.0**(-7))))
      ELSE
         UTOP=USBOT*((2.5*ALOG(HBAR*RESBOT**2/(RESBOT+RESTOP))+5.0)
     1        +(2.5*ALOG(HBAR*RESTOP**2/(RESBOT+RESTOP))+5.0)*RESTOP
     1        /RESBOT)
      ENDIF
      DO K=2,NZ
         Z=ZZ(K)*HBAR
         IF(Z.LE.ZLBOT) THEN
            ZS=Z/ZLSBOT
            SU=0.
            U1=USBOT*ZS
CC            U2=USBOT*(2.5*ALOG(ZS)+5.0)
CC            U2=USBOT*(2.5*ALOG(ZS/(2.0*10.0**(-7))))
            U2=USBOT*(2.5*ALOG(Z/(2.0*10.0**(-7))))
            IF(U1.LT.U2) SU=U1
            IF(U1.GE.U2) SU=U2
            IF(U2.LT.0.) SU=U1
         ENDIF
         IF(Z.GT.ZLBOT) THEN
            ZS=(HBAR-Z)/ZLSTOP
            IF(ABS(ZS).LT.1.E-6) THEN
               SU=UTOP
            ELSE
               U1=USTOP*ZS
CC               U2=USTOP*(2.5*ALOG(ZS)+5.0)
CC               U2=USTOP*(2.5*ALOG(ZS/(2.0*10.0**(-7))))
               U2=USTOP*(2.5*ALOG(Z/(2.0*10.0**(-7))))
               IF(U1.LT.U2) SU=UTOP-U1
               IF(U1.GE.U2) SU=UTOP-U2
               IF(U2.LT.0.) SU=UTOP-U1
            ENDIF
         ENDIF
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               U(I,J,K)=U(I,J,K)+SU
C               u(i,j,k)=su
C               v(i,j,k)=0.
C               w(i,j,k)=0.
            ENDDO
         ENDDO
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE INITIAL END HERE







C====================================================================
      SUBROUTINE RANDOM(NXMOD,NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,PU,PV,PW,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER IDUM

      INCLUDE "mpif.h"

      REAL PU(NXMAX,NYMAX/NCPU,*),PV(NXMAX,NYMAX/NCPU,*)
      REAL PW(NXMAX,NYMAX/NCPU,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      INTEGER MYID,IERR,NUMPROCS
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      IDUM=87953+1000*MYID

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               PW(I,J,K)=(RAN(IDUM)-0.5)
               PV(I,J,K)=(RAN(IDUM)-0.5)
               PU(I,J,K)=(RAN(IDUM)-0.5)
            ENDDO
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,PU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,PV,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,PW,NCPU)
      
      RETURN
      END

C=====SUBROUTINE RANDOM END HERE
      



C========================================================================
      FUNCTION AMPRAN(Z)
C
C Amplitude of random velocity field as function of depth (z)
C
      DATA THICK/0.1/
      
      AMPRAN=1.-EXP(-(Z/THICK)**2)-EXP(-((Z+1.0)/THICK)**2)-0.005
      IF(AMPRAN.LT.0.) AMPRAN=0.
      
      RETURN
      END

C=====FUNCTION AMPRAN END HERE





C========================================================================
      FUNCTION AMPRAN2(Z)
C
C++
cc      DATA UC/0.0012/
      DATA UC/0.0/
C++
      DATA SGM/0.88137/
      DATA CON/0.01/
C     
      AMPRAN2=TANH(Z)**4/COSH(Z)**3
      RETURN
      END

C=====FUNCTION AMPRAN2 END HERE




C=========================================================================
      SUBROUTINE RSCALE(ARM,NXMOD,NYMOD,NZ,NXMAX,NYMAX,U,V,W,NCPU)
C
C     Rescale the initialrandom velocity field such that the 
C     maximum RMS velocity is ARM
C
      IMPLICIT NONE
      
      INTEGER I,J,K,JJ1,JJ2,NYEND,NCREQ
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU

      REAL RMS,RMSMAX,RMSMAX_ALL,ARM,SCAL

      INCLUDE "mpif.h"

      INTEGER MYID,IERR,NUMPROCS
      INTEGER STATUS(MPI_STATUS_SIZE)
      
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      JJ1=NYMAX/NCPU-(NYMAX-NYMOD)+1
      JJ2=NYMAX/NCPU
      IF(MYID.EQ.NCPU-1) THEN
         NYEND=JJ1-1
      ELSE
         NYEND=JJ2
      ENDIF

      RMSMAX_ALL=0.
      RMSMAX=0.
      DO K=2,NZ-1
         
         RMS=0.
         DO I=1,NXMOD
            DO J=1,NYEND
               RMS=RMS+U(I,J,K)**2+V(I,J,K)**2
     1              +0.25*(W(I,J,K)+W(I,J,K-1))**2
            ENDDO
         ENDDO
         
         CALL MPI_ALLREDUCE(RMS,RMSMAX_ALL,1,MPI_DOUBLE_PRECISION,
     1        MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)
         IF(RMSMAX.LT.RMSMAX_ALL) THEN
            RMSMAX=RMSMAX_ALL
         ENDIF
   
      ENDDO
      
      RMSMAX=(RMSMAX/NXMOD/NYMOD/3.)**0.5
C
      SCAL=ARM/RMSMAX
      DO K=1,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               U(I,J,K)=U(I,J,K)*SCAL
               V(I,J,K)=V(I,J,K)*SCAL
               W(I,J,K)=W(I,J,K)*SCAL
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END

C=====SUBROUTINE RESCALE END HERE




C=======================================================================
      SUBROUTINE SOLEON(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,V,W,PU,PV,PW,HER,EXR,EYR,HXR,HYR,NCPU)

C     GIVEN STREAM FUNCTION PU,PV,PW AT GRID POINTS, CALCULATE VELOCITY
C     U,V AT GRID POINTS AND W AT STAGGERED GRID POINTS
C     THE RESULTING VELOCITY FIELD IS SOLENOIDIAL AND HAS BEEN DEALIASED
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,DZT

      INCLUDE "mpif.h"

      INTEGER MYID,IERR,NUMPROCS

      REAL U(NXMAX,NYMAX/NCPU,*),PU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),PV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),PW(NXMAX,NYMAX/NCPU,*)
      REAL PUY(NXMAX,NYMAX/NCPU),PVX(NXMAX,NYMAX/NCPU)
      REAL PWX(NXMAX,NYMAX/NCPU),PWY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL FTMP(NXMAX,NYMAX/NCPU),WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)      
      
      DO K=2,NZ-1
         
         CALL PDFY_PARA(PU(1,1,K),PUY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         CALL PDFX_PARA(PV(1,1,K),PVX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFX_PARA(PW(1,1,K),PWX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(PW(1,1,K),PWY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DZT=DZ(K-1)+DZ(K)
         IF(K.EQ.2) DZT=2.*DZ(K-1)+DZ(K)
         IF(K.EQ.(NZ-1)) DZT=DZ(K-1)+2.*DZ(K)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T1(I,J)=(PU(I,J,K+1)-PU(I,J,K-1))/DZT
               T2(I,J)=(PV(I,J,K+1)-PV(I,J,K-1))/DZT
               T3(I,J)=(PW(I,J,K+1)-PW(I,J,K-1))/DZT
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,T1,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,T2,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,T2,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               U(I,J,K)=PWY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*T3(I,J)
     1              -HER(I,J)*T2(I,J)
               V(I,J,K)=HER(I,J)*T1(I,J)-PWX(I,J)-(HXR(I,J)-ZZ(K)
     1              *EXR(I,J))*T3(I,J)
               W(I,J,K)=PVX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*T2(I,J)
     1              -PUY(I,J)-(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,U,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,V,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,W,NCPU)
         
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            U(I,J,1)=0.
            V(I,J,1)=0.
            W(I,J,1)=0.
            U(I,J,NZ)=0.
            V(I,J,NZ)=0.
            W(I,J,NZ)=0.
         ENDDO
      ENDDO
      
C     CALCULATE W AT STAGGERED GRID
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            DO K=2,NZ-2
               W(I,J,K)=0.5*(W(I,J,K)+W(I,J,K+1))
            ENDDO
         ENDDO
      ENDDO

C++
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            W(I,J,NZ-1)=0.
         ENDDO
      ENDDO
C++
      
      RETURN
      END

C=====SUBROUTINE SOLEON END HERE







C======================================================================
      SUBROUTINE CUTOFF_PARA(MODX,MODY,MODZ,NXMOD,NYMOD,NZMOD,NXMAX,
     1     NYMAX,NZMAX,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,F,NCPU)
      
      IMPLICIT NONE

      INTEGER MODX,MODY,MODZ,NXMOD,NYMOD,NZMOD,NXMAX,NYMAX,NZMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND,L,LL,M,MM,N,NN
      REAL AMX,AMY,AMZ

      INCLUDE "mpif.h"

      REAL F(NXMAX,NYMAX/NCPU,*),WORK(*),TRIGSX(*),TRIGSY(*),TRIGSZ(*)
      INTEGER IFAX(*)
      INTEGER MYID,NUMPROCS,IERR
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
      CALL FFTXYZ_PARA(F,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,NXMOD,
     1     NYMOD,NZMOD,NXMAX,NYMAX,NZMAX,NCPU,-1)
      
      DO L=1,NXMOD+2
         LL=(L-1)/2
         AMX=EXP(-(FLOAT(LL)/FLOAT(MODX))**2)
         DO M=1,NYEND
            MM=(MYID*NYMAX/NCPU+M-1)/2
            AMY=EXP(-(FLOAT(MM)/FLOAT(MODY))**2)
            DO N=1,NZMOD+2
               NN=(N-1)/2
               AMZ=EXP(-(FLOAT(NN)/FLOAT(MODZ))**2)
               F(L,M,N)=AMX*AMY*AMZ*F(L,M,N)
               IF(L.LE.2.OR.M.LE.2.OR.N.LE.2) F(L,M,N)=0.
            ENDDO
         ENDDO
      ENDDO
      
      CALL FFTXYZ_PARA(F,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,NXMOD,
     1     NYMOD,NZMOD,NXMAX,NYMAX,NZMAX,NCPU,1)
      
      RETURN
      END

C=====SUBROUTINE CUTOFF END HERE







C======================================================================
      SUBROUTINE INPUT(NXMOD,NYMOD,NZ,XL,YL,ZL,DX,DY,HBAR,PEX,PEY,DT,
     1     NTIME,TIME,NOUTD,NOUTC,BFORCE,RESBOT,ZLSBOT,USBOT,RESTOP,
     1     ZLSTOP,USTOP,RE,FR2,WE,CLBETA,CLGAMA,ARM,HA,HK,HOMEG,TCOEF,
     1     TIMEWAVY,HKA,NWAVE,CRAT,VPHASE,IWAVY,MODX,MODY,MODZ,ISTART,
     1     ITMAX,ERLIM,AKA,ERVFILT,NFILT,IFILT,IPA,NTH,TIMEP,TCP,TIMEW,
     1     RDGL,NXMODS,NYMODS,TIMETURB,NCPU)
      
      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NTIME,NOUTD,NOUTC,IWAVY,MODX,MODY,MODZ
      INTEGER NXMODS,NYMODS,NXS,NYS
      INTEGER NWAVE,ISTART,ITMAX,NCPU,NX,NY,IPA,NTH
      REAL XL,YL,ZL,HBAR,PEX,PEY,DT,TIME,BFORCE,RESBOT,ZLSBOT,USBOT
      REAL RESTOP,ZLSTOP,USTOP,RE,FR2,WE,CLBETA,CLGAMA,ARM,HA,HK,HOMEG
      REAL TCOEF,TIMEWAVY,HKA,CRAT,VPHASE,ERLIM,AKA
      REAL TWOPI,DX,DY
      REAL TIMEP,TCP,RDGL,TIMEW,TIMETURB

      REAL RESCALE

      REAL ERVFILT
      INTEGER NFILT,IFILT
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------
C     READ INPUT FILE
C-------------------------      

      READ(11,*) PEX,PEY
      READ(11,*) ZL,HBAR
      READ(11,*) NX,NY,NZ
      READ(11,*) NXS,NYS
      READ(11,*) DT,NTIME,TIME
      READ(11,*) ITMAX,ERLIM
      READ(11,*) RESBOT,RESTOP
      READ(11,*) FR2,WE
      READ(11,*) NOUTD,NOUTC
      READ(11,*) CLBETA,CLGAMA
      READ(11,*) ARM
      READ(11,*) MODX,MODY,MODZ
      READ(11,*) AKA
      READ(11,*) HKA,NWAVE,CRAT
      READ(11,*) TIMEWAVY,TCOEF

C-----END HERE

C------------------------
C     WAVY WALL TYPE
C------------------------
      READ(11,*) IWAVY

C     IWAVY=1: SOLID WAVY WALL
C     IWAVY=2: VERTICALLY MOVING WAVY WALL
C     IWAVY=3: WATER WAVE SURFACE
C     IWAVY=4: WATER WAVE SURFACE WITH WIND DRIFT
C     IWAVY=5: STOKES WAVE
C     IWAVY=6: STOKES WAVE WITH WIND DRIFT
C     IWAVY=7: HOS WAVE SIMULATION

C-----END HERE

C----------------------------------
C     PARAMETERS FOR FILTERING
C----------------------------------

      READ(11,*) ERVFILT,NFILT,IFILT

C     ERVFILT: CRITERIO FOR VELOCITY FILTERING
C     NFILT: 1/NFILT MODES WILL REMAIN AFTER FILTERING
C     IFILT: IFILT=1--FILTERING; IFILT=0--NOT FILTERING

C-----END HERE

C-----------------------------
C     PARAMETERS FOR HOS
C-----------------------------

      READ(11,*) IPA,NTH
      READ(11,*) TIMEP,TCP
      READ(11,*) TIMEW
      READ(11,*) RDGL

C     IPA=0: NO AIR PRESSURE INPUT TO HOS SIMULATION
C     IPA=1: HAS AIR PRESSURE INPUT TO HOS SIMULATION

C     NTH: NUMBER OF HOS TIME STEP PER TURBULENT SIMULATION TIME STEP

C     TIMEP: STARTING TIME FOR PRESSURE INPUT
C     TCP: TIME COEF FOR PRESSURE INPUT

C     TIMEW: STARTING TIME FOR WAVE DYNAMIC EVOLVING

C     RDGL: DENSITY RATION BETWEEN GAS AND LIQUID

C-----END HERE

C--------------------------------
C     PARAMETER FOR TURBINE
C--------------------------------
      
      READ(11,*) TIMETURB

C-----END HERE

C--------------------------
C     SPATIAL PARAMETER
C--------------------------      

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      NXMOD=NX-1
      NYMOD=NY-1
      DX=XL/(NX-1)
      DY=YL/(NY-1)

      NXMODS=NXS-1
      NYMODS=NYS-1

C-----END HERE

C-------------------------------
C     TURBULENCE PARAMETERS
C-------------------------------

      IF(ABS(RESTOP).LT.1.E-6)THEN
         ZLSBOT=1./RESBOT  
         ZLSTOP=0.
CC         USBOT=1./(2.5*ALOG(RESBOT)+5.0)
CC         USBOT=1./(2.5*ALOG(RESBOT/(2.0*10.0**(-7))))
         USBOT=1./(2.5*ALOG(HBAR/(2.0*10.0**(-7))))
         USTOP=0.
C+++++
C     MULTIPLY USBOT BY 2.675 TO MATCH UG AT TOP BOUNDARY
         USBOT=USBOT*2.675
C+++++
CC         RE=RESBOT*(2.5*ALOG(RESBOT)+5.0)
CC         RE=RESBOT*(2.5*ALOG(RESBOT/(2.0*10.0**(-7))))
         RE=RESBOT*(2.5*ALOG(HBAR/(2.0*10.0**(-7))))
         BFORCE=USBOT**2/HBAR
         GOTO 10
      ENDIF

      IF(ABS(RESBOT).LT.1.E-6)THEN
         ZLSBOT=0.
         ZLSTOP=1./RESTOP
         USBOT=0.
         USTOP=1./(2.5*ALOG(RESTOP)+5.0)
         RE=RESTOP*(2.5*ALOG(RESTOP)+5.0)
         BFORCE=-USTOP**2/HBAR
         GOTO 10
      ENDIF

      ZLSBOT=1./RESBOT
      ZLSTOP=1./RESTOP
      USBOT=1./((2.5*ALOG(RESBOT**2/(RESBOT+RESTOP))+5.0)
     1     +(2.5*ALOG(RESTOP**2/(RESBOT+RESTOP))+5.0)*RESTOP
     1     /RESBOT)
      USTOP=1./((2.5*ALOG(RESBOT**2/(RESBOT+RESTOP))+5.0)*RESBOT
     1     /RESTOP+(2.5*ALOG(RESTOP**2/(RESBOT+RESTOP))+5.0))
      RE=RESBOT*(2.5*ALOG(RESBOT**2/(RESBOT+RESTOP))+5.0)
     1  +RESTOP*(2.5*ALOG(RESTOP**2/(RESBOT+RESTOP))+5.0)        
      BFORCE=(USBOT**2-USTOP**2)/HBAR

 10   CONTINUE

C++
c      re=1000.
c      bforce=0.
C++

C+++
C     FOR LES_HOS_JONSWAP WITH FIXED RES ONLY
C     FIX USBOT=USTOP=0.03077 TO BE THE SAME AS DNS
CC      RESCALE=0.03077/USBOT
CC      USBOT=USBOT*RESCALE
CC      USTOP=USTOP*RESCALE
CC      RE=RE*RESCALE
C+++

C-----END HERE

C-----------------------------------
C     COEF FOR BOTTOM WAVY WALL
C-----------------------------------
C     HK -- WAVE NUMBER
C     HA -- WAVE AMPLITUDE
C     HOMEG -- WAVE ANGLE FREQUENCY
C     NWAVE -- NUMBER OF WAVES IN X DIRECTION
C     HKA -- WAVE SLOPE
C     VPHASE -- WAVE PHASE SPEED
C     CRAT -- RATIO OF C TO USBOT
C     TIMEWAVY -- TIME FOR BOTTOM TO START MOVING

      HK=PEX*NWAVE
      HA=HKA/HK
      VPHASE=CRAT*USBOT
      HOMEG=HK*VPHASE

C-----END HERE

C---------------------------
C     OUTPUT PARAMETERS
C---------------------------

      IF (MYID.EQ.0) THEN
         WRITE(91+MYID*1000,1000) PEX,PEY
         WRITE(91+MYID*1000,1001) ZL,HBAR
         WRITE(91+MYID*1000,1002) NX,NY,NZ,NXS,NYS
         WRITE(91+MYID*1000,1003) DT,NTIME,TIME
         WRITE(91+MYID*1000,998)  ITMAX,ERLIM
         WRITE(91+MYID*1000,1004) RE,FR2,WE
         WRITE(91+MYID*1000,1005) NOUTD,NOUTC
         WRITE(91+MYID*1000,1006) RESBOT,ZLSBOT,USBOT
         WRITE(91+MYID*1000,1007) RESTOP,ZLSTOP,USTOP
         WRITE(91+MYID*1000,1008) BFORCE
         WRITE(91+MYID*1000,1009) HA,HK
         WRITE(91+MYID*1000,1010) HOMEG,TCOEF
         WRITE(91+MYID*1000,1011) TIMEWAVY
         WRITE(91+MYID*1000,1013) CLBETA,CLGAMA
         WRITE(91+MYID*1000,1014) ARM
         WRITE(91+MYID*1000,1015) MODX,MODY,MODZ
         WRITE(91+MYID*1000,1016) AKA
         WRITE(91+MYID*1000,1017) CRAT,VPHASE
         WRITE(91+MYID*1000,1018) IWAVY
         WRITE(91+MYID*1000,1019) IPA,NTH
         WRITE(91+MYID*1000,1020) TIMEP,TCP
         WRITE(91+MYID*1000,10200) TIMEW
         WRITE(91+MYID*1000,1021) RDGL
         WRITE(91+MYID*1000,1022) TIMETURB
      ENDIF

 998  FORMAT(' ITMAX=',I5,4X,' ERLIM=',E16.5)
 1000 FORMAT(' WVNX=',F9.4,4X,' WVNY=',F9.4)
 1001 FORMAT(' ZL=',F9.4,' HBAR=',F9.4)
 1002 FORMAT(' NX=',I5,' NY=',I5,' NZ=',I5,' NXS=',I5,' NYS=',I5)
 1003 FORMAT(' DT=',F9.4,5X, 'NTIME=',I5,6X,'TIME=',F9.4)
 1004 FORMAT(' RE=',E12.4,' FR2=',E12.4, ' WE=',E12.4)
 1005 FORMAT(' NOUTD=',I5,5X,' NOUTC=',I5)
 1006 FORMAT(' RESBOT=',E12.4,' ZLSBOT=',E12.4,' USBOT=',E12.4)
 1007 FORMAT(' RESTOP=',E12.4,' ZLSTOP=',E12.4,' USTOP=',E12.4)
 1008 FORMAT(' BFORCE=',E12.4)
 1009 FORMAT(' HA=',F9.5,' HK=',F9.5)
 1010 FORMAT(' HOMEG=',F9.5,' TCOEF=',F9.5)
 1011 FORMAT(' TIMEWAVY=',F9.5)
 1013 FORMAT(' CLBETA=',F9.5,' CLGAMA=',F9.5)
 1014 FORMAT(' ARM=',F9.5)
 1015 FORMAT(' MODX=',I5,' MODY=',I5,' MODZ=',I5)
 1016 FORMAT(' AKA=',F9.5)
 1017 FORMAT(' CRAT=',F9.5,' VPHASE=',E12.4)
 1018 FORMAT(' IWAVY=',I5)
 1019 FORMAT(' IPA=',I5,' NTH=',I5)
 1020 FORMAT(' TIMEP=',F9.5,' TCP=',F9.5)
10200 FORMAT(' TIMEW=',F9.5)
 1021 FORMAT(' RDGL=',F9.5)
 1022 FORMAT(' TIMETURB=',F9.5)

      RETURN
      END

C=====SUBROUTINE INPUT END HERE








C========================================================================
      SUBROUTINE CLUSTER_NL(NZ,NZMAX,ZL,CLBETA,CLGAMA,ZZ1,ZZ2,ZZ,ZW,DZ)
C
C     CLGAMA: LARGEST GRID RATION
C     CLBETA: CLUSTERING PAPAMETER: SMALLER VALUE -> MORE CLUSTERED
C
      REAL ZZ(*),ZW(*),DZ(*),ZZ1(*),ZZ2(*)
C
      NEVEN=4
      DO 10 K=NEVEN,NZ-NEVEN
       ETAK=(K-NEVEN)/(NZ-2.*NEVEN)
       ZZ1(K)=((1+CLBETA)*((CLBETA+1)/(CLBETA-1))**(2*ETAK-1.)
     1   +1.-CLBETA)/(2.*(1.+((CLBETA+1.)/(CLBETA-1.))**(2*ETAK-1.)))
 10   CONTINUE
C
C      
      a=1./(2.*clbeta)*alog((1+(exp(clbeta)-1.)*0.5)
     1  /(1+(exp(-clbeta)-1.)*0.5))
      do 11 k=NEVEN+1,nz-NEVEN-1
      ETAK=(K-NEVEN)/(NZ-2.*NEVEN)
      ZZ1(K)=0.5*(1.+sinh(clbeta*(etak-a))/sinh(clbeta*a))
 11   continue
      zz1(NEVEN)=0.
      zz1(nz-NEVEN)=1.
C
      TWOPI=2.*ACOS(-1.)
      DO 18 K=NEVEN,NZ-NEVEN
 18   DZ(K)=(1.-COS(ZZ1(K)*TWOPI))*(CLGAMA-1.)/2.+1.
C
      DO 20 K=1,NEVEN-1
 20   DZ(K)=DZ(NEVEN)
C
      DO 30 K=NZ-NEVEN+1,NZ
 30   DZ(K)=DZ(NEVEN)
C
      DZ(1)=DZ(1)/2.
      DZ(NZ-1)=DZ(NZ-1)/2.
      DZ(NZ)=DZ(NZ)/2.
C
      ZZ2(1)=0.
      DO 40 K=1,NZ
 40   ZZ2(K+1)=ZZ2(K)+DZ(K)
C
      DO 45 K=1,NZ+1
c 45   ZZ(K)=(ZZ2(K)-ZZ2(1))/(ZZ2(NZ)-ZZ2(1))*ZL-ZL
 45   ZZ(K)=(ZZ2(K)-ZZ2(1))/(ZZ2(NZ)-ZZ2(1))*ZL
C
      DO 50 K=1,NZ
 50   DZ(K)=ZZ(K+1)-ZZ(K)
C
      WRITE(29,299)
 299  FORMAT('VARIABLES=K,ZZ,DZ,DZRATIO,RDZ,RATIOMAX')
      WRITE(29,399)
 399  FORMAT('ZONE T=""')
C
      UNIT=1
      RMAX=DZ((NZ-1)/2)/DZ(1)
      DO 60 K=NZ,2,-1
       WRITE(29,99)K,ZZ(K),DZ(K),DZ(K)/DZ(K-1),1./DZ(K),RMAX
 99    FORMAT(I5,5E12.4)
 60   CONTINUE
      WRITE(29,99)1,ZZ(1),DZ(1),UNIT,1./DZ(1),RMAX
      
      DO K=1,NZ
         IF(K.EQ.1) THEN
            ZW(K)=ZZ(K)
         ELSE IF(K.EQ.NZ-1) THEN
            ZW(K)=ZZ(K+1)
         ELSE IF(K.EQ.NZ) THEN
            ZW(K)=ZZ(K+1)+DZ(K)
         ELSE
            ZW(K)=(ZZ(K)+ZZ(K+1))/2.
         ENDIF
      ENDDO
C
      RETURN
      END

C=====SUBROUTINE CLUSTER_NL END HERE







C==========================================================================
      SUBROUTINE CLUSTER_NL_1(NZ,NZMAX,ZL,CLBETA,CLGAMA,ZZ1,ZZ2,ZZ,ZW,
     1     DZ)

C     THIS VERSION ONLY CLUSTER GRID NEAR K=1

C
C     CLGAMA: LARGEST GRID RATION
C     CLBETA: CLUSTERING PAPAMETER: SMALLER VALUE -> MORE CLUSTERED
C
      REAL ZZ(*),ZW(*),DZ(*),ZZ1(*),ZZ2(*)
C
      NEVEN=4
CC--
C      DO 10 K=NEVEN,NZ-NEVEN
C       ETAK=(K-NEVEN)/(NZ-2.*NEVEN)
C       ZZ1(K)=((1+CLBETA)*((CLBETA+1)/(CLBETA-1))**(2*ETAK-1.)
C     1   +1.-CLBETA)/(2.*(1.+((CLBETA+1.)/(CLBETA-1.))**(2*ETAK-1.)))
C 10   CONTINUE
CC--#####################3
C
C
CC--
C      a=1./(2.*clbeta)*alog((1+(exp(clbeta)-1.)*0.5)
C     1  /(1+(exp(-clbeta)-1.)*0.5))
CC--####################################
      a = 0.5
cc--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
      do 11 k=NEVEN+1,nz-NEVEN-1
      ETAK=(K-NEVEN)/(NZ-2.*NEVEN)/2.
      ZZ1(K)=0.5*(1.+sinh(clbeta*(etak-a))/sinh(clbeta*a))
 11      continue
      zz1(NEVEN)=0.
      zz1(nz-NEVEN)=0.5
C
      TWOPI=2.*ACOS(-1.)
      DO 18 K=NEVEN,NZ-NEVEN
 18         DZ(K)=(1.-COS(ZZ1(K)*TWOPI))*(CLGAMA-1.)/2.+1.
C
      DO 20 K=1,NEVEN-1
 20         DZ(K)=DZ(NEVEN)
C
CC--
      DO 30 K=NZ-NEVEN+1,NZ
 30         DZ(K)=DZ(NZ-NEVEN)
CC--@@@@@@@@@@@@@@@@@@@@@@@@@@@@
C
      DZ(1)=DZ(1)/2.
      DZ(NZ-1)=DZ(NZ-1)/2.
      DZ(NZ)=DZ(NZ)/2.
C
      ZZ2(1)=0.
      DO 40 K=1,NZ
 40         ZZ2(K+1)=ZZ2(K)+DZ(K)
C
      DO 45 K=1,NZ+1
c 45   ZZ(K)=(ZZ2(K)-ZZ2(1))/(ZZ2(NZ)-ZZ2(1))*ZL-ZL
 45         ZZ(K)=(ZZ2(K)-ZZ2(1))/(ZZ2(NZ)-ZZ2(1))*ZL
C
      DO 50 K=1,NZ
 50         DZ(K)=ZZ(K+1)-ZZ(K)
C
      WRITE(29,299)
 299    FORMAT('VARIABLES=K,ZZ,DZ,DZRATIO,RDZ,RATIOMAX')
      WRITE(29,399)
 399    FORMAT('ZONE T=""')
C
      UNIT=1
      RMAX=DZ((NZ-1)/2)/DZ(1)
      DO 60 K=NZ,2,-1
       WRITE(29,99)K,ZZ(K),DZ(K),DZ(K)/DZ(K-1),1./DZ(K),RMAX
 99        FORMAT(I5,5E12.4)
 60           CONTINUE
      WRITE(29,99)1,ZZ(1),DZ(1),UNIT,1./DZ(1),RMAX

      DO K=1,NZ
         IF(K.EQ.1) THEN
            ZW(K)=ZZ(K)
         ELSE IF(K.EQ.NZ-1) THEN
            ZW(K)=ZZ(K+1)
         ELSE IF(K.EQ.NZ) THEN
            ZW(K)=ZZ(K+1)+DZ(K)
         ELSE
            ZW(K)=(ZZ(K)+ZZ(K+1))/2.
         ENDIF
      ENDDO
C
      RETURN
      END

C=====SUBROUTINE CLUSTER_NL_1 END HERE








C========================================================================
      SUBROUTINE SAVE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,PEY,
     1     TIME,RE,FR2,WE,IOUTD,IOUTC,ICON,U,V,W,PP,UZFS,VZFS,WZFS,DX,
     1     DY,DZ,ZZ,ZW,CLBETA,CLGAMA,BFORCE,HU,HV,HW,ETA,ETA0,HH,HT,HA,
     1     HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU)
      
C     ZL SHOULD ALWAYS EQUAL 1.
      
      IMPLICIT NONE

      INCLUDE "mpif.h"
      
      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR,NCPU
      
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,IOUTD,IOUTC,ICON,IWAVY
      REAL XL,YL,ZL,PEX,PEY,TIME,RE,FR2,WE,DX,DY,CLBETA,CLGAMA,BFORCE
      REAL HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,HBAR

      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL U(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL UZFS(NXMAX,*),VZFS(NXMAX,*),WZFS(NXMAX,*)
      REAL ETA(NXMAX,*),ETA0(NXMAX,*),HH(NXMAX,*),HT(NXMAX,*)
      REAL DZ(*),ZZ(*),ZW(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
      IF(NYEND.EQ.0) GOTO 100

      ICON=ICON+1

      OPEN(ICON*1000+MYID)

      WRITE(ICON*1000+MYID,*) NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,
     1     PEX,PEY,TIME,RE,FR2,WE,IOUTD,IOUTC,DX,DY,CLBETA,CLGAMA,
     1     BFORCE,HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU
      
      WRITE(ICON*1000+MYID,*) (ZZ(K),K=1,NZ+1)
      WRITE(ICON*1000+MYID,*) (ZW(K),K=1,NZ)
      WRITE(ICON*1000+MYID,*) (DZ(K),K=1,NZ+1)
      
      DO I=1,NXMOD
         DO J=1,NYEND
            WRITE(ICON*1000+MYID,*) UZFS(I,J),VZFS(I,J),WZFS(I,J)
            WRITE(ICON*1000+MYID,*) ETA(I,J),ETA0(I,J),HH(I,J),HT(I,J)
            DO K=1,NZMAX
               WRITE(ICON*1000+MYID,*) U(I,J,K),V(I,J,K),W(I,J,K)
               WRITE(ICON*1000+MYID,*) PP(I,J,K)
               WRITE(ICON*1000+MYID,*) HU(I,J,K),HV(I,J,K),HW(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      CLOSE(ICON*1000+MYID)

 100  CONTINUE

      RETURN
      END

C=====SUBROUTINE SAVE END HERE





C========================================================================
      SUBROUTINE REREAD(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,
     1     PEY,TIME,RE,FR2,WE,IOUTD,IOUTC,ICON,U,V,W,PP,UZFS,VZFS,WZFS,
     1     DX,DY,DZ,ZZ,ZW,CLBETA,CLGAMA,BFORCE,HU,HV,HW,ETA,ETA0,HH,HT,
     1     HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU)
      
C     ZL SHOULD ALWAYS EQUAL 1.
      
      IMPLICIT NONE

      INCLUDE "mpif.h"
      
      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR,NCPU
      
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,IOUTD,IOUTC,ICON,IWAVY
      REAL XL,YL,ZL,PEX,PEY,TIME,RE,FR2,WE,DX,DY,CLBETA,CLGAMA,BFORCE
      REAL HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,HBAR

      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL U(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL UZFS(NXMAX,*),VZFS(NXMAX,*),WZFS(NXMAX,*)
      REAL ETA(NXMAX,*),ETA0(NXMAX,*),HH(NXMAX,*),HT(NXMAX,*)
      REAL DZ(*),ZZ(*),ZW(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
      IF(NYEND.EQ.0) GOTO 100

      OPEN(ICON*1000+MYID)

      READ(ICON*1000+MYID,*) NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,
     1     PEX,PEY,TIME,RE,FR2,WE,IOUTD,IOUTC,DX,DY,CLBETA,CLGAMA,
     1     BFORCE,HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU
      
      READ(ICON*1000+MYID,*) (ZZ(K),K=1,NZ+1)
      READ(ICON*1000+MYID,*) (ZW(K),K=1,NZ)
      READ(ICON*1000+MYID,*) (DZ(K),K=1,NZ+1)
      
      DO I=1,NXMOD
         DO J=1,NYEND
            READ(ICON*1000+MYID,*) UZFS(I,J),VZFS(I,J),WZFS(I,J)
            READ(ICON*1000+MYID,*) ETA(I,J),ETA0(I,J),HH(I,J),HT(I,J)
            DO K=1,NZMAX
               READ(ICON*1000+MYID,*) U(I,J,K),V(I,J,K),W(I,J,K)
               READ(ICON*1000+MYID,*) PP(I,J,K)
               READ(ICON*1000+MYID,*) HU(I,J,K),HV(I,J,K),HW(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      CLOSE(ICON*1000+MYID)

 100  CONTINUE

      RETURN
      END

C=====SUBROUTINE REREAD END HERE








C========================================================================
      SUBROUTINE REREADN(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,
     1     PEY,TIME,RE,FR2,WE,IOUTD,IOUTC,ICON,U,V,W,PP,UZFS,VZFS,WZFS,
     1     DX,DY,DZ,ZZ,ZW,CLBETA,CLGAMA,BFORCE,HU,HV,HW,ETA,ETA0,HH,HT,
     1     HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU)
      
C     ZL SHOULD ALWAYS EQUAL 1.
      
      IMPLICIT NONE

      INCLUDE "mpif.h"
      
      INTEGER I,J,K,I1,J1,J0
      INTEGER MYID,NUMPROCS,IERR,NCPU,NCPU1,NXMAX1,NYMAX1
      
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,IOUTD,IOUTC,ICON,IWAVY
      REAL XL,YL,ZL,PEX,PEY,TIME,RE,FR2,WE,DX,DY,CLBETA,CLGAMA,BFORCE
      REAL HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,HBAR

      INTEGER NCREQ,JJ1,JJ2,NYEND,NYEND2
      INTEGER ID1START,ID1END,NY1START,NY1END,NID,NYSTART1,NYEND1

      REAL U(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL UZFS(NXMAX,*),VZFS(NXMAX,*),WZFS(NXMAX,*)
      REAL ETA(NXMAX,*),ETA0(NXMAX,*),HH(NXMAX,*),HT(NXMAX,*)
      REAL DZ(*),ZZ(*),ZW(*)

      REAL TMP

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
      IF(NYEND.EQ.0) GOTO 100
      OPEN(ICON*1000)
      READ(ICON*1000,*) NXMOD,NYMOD,NZ,NXMAX1,NYMAX1,NZMAX,XL,YL,ZL,PEX,
     1     PEY,TIME,RE,FR2,WE,IOUTD,IOUTC,DX,DY,CLBETA,CLGAMA,BFORCE,HA,
     1     HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU1
      CLOSE(ICON*1000)

      print*, myid, 'reread 1'

      IF(NCPU.NE.NCPU1) GOTO 101

      OPEN(ICON*1000+MYID)
      
      READ(ICON*1000+MYID,*) NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,
     1     PEX,PEY,TIME,RE,FR2,WE,IOUTD,IOUTC,DX,DY,CLBETA,CLGAMA,
     1     BFORCE,HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU
     
      print*, myid, 'reread 2'

      READ(ICON*1000+MYID,*) (ZZ(K),K=1,NZ+1)
      READ(ICON*1000+MYID,*) (ZW(K),K=1,NZ)
      READ(ICON*1000+MYID,*) (DZ(K),K=1,NZ+1)

      print*, myid, 'reread 3'

      DO I=1,NXMOD
         DO J=1,NYEND
            READ(ICON*1000+MYID,*) UZFS(I,J),VZFS(I,J),WZFS(I,J)
            READ(ICON*1000+MYID,*) ETA(I,J),ETA0(I,J),HH(I,J),HT(I,J)
            DO K=1,NZMAX
               READ(ICON*1000+MYID,*) U(I,J,K),V(I,J,K),W(I,J,K)
               READ(ICON*1000+MYID,*) PP(I,J,K)
               READ(ICON*1000+MYID,*) HU(I,J,K),HV(I,J,K),HW(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      CLOSE(ICON*1000+MYID)
      print*, myid, 'reread 4'
      GOTO 100

 101  CONTINUE
      ID1START=NYMAX/NCPU*MYID/(NYMAX1/NCPU1)
      NY1START=NYMAX/NCPU*MYID+1-NYMAX1/NCPU1*ID1START
      ID1END=(NYMAX/NCPU*(MYID+1)-1)/(NYMAX1/NCPU1)
      NY1END=NYMAX/NCPU*(MYID+1)-NYMAX1/NCPU1*ID1END
      J0=0
      DO NID=ID1START,ID1END
         IF(ID1START.EQ.ID1END) THEN
            NYSTART1=NY1START
            NYEND1=NY1END
         ELSE IF(NID.EQ.ID1START) THEN
            NYSTART1=NY1START
            NYEND1=NYMAX1/NCPU1
         ELSEIF(NID.EQ.ID1END) THEN
            NYSTART1=1
            NYEND1=NY1END
         ELSE
            NYSTART1=1
            NYEND1=NYMAX1/NCPU1
         ENDIF

         IF(NID.EQ.NCPU1-1) THEN
            NYEND2=NYMOD-(NYMAX1/NCPU1)*NID
         ELSE
            NYEND2=NYMAX1/NCPU1
         ENDIF

         OPEN(ICON*1000+NID)
         READ(ICON*1000+NID,*) NXMOD,NYMOD,NZ,NXMAX1,NYMAX1,NZMAX,XL,YL,
     1        ZL,PEX,PEY,TIME,RE,FR2,WE,IOUTD,IOUTC,DX,DY,CLBETA,CLGAMA,
     1        BFORCE,HA,HK,HOMEG,CRAT,TCOEF,TIMEWAVY,IWAVY,HBAR,NCPU1
     
         READ(ICON*1000+NID,*) (ZZ(K),K=1,NZ+1)
         READ(ICON*1000+NID,*) (ZW(K),K=1,NZ)
         READ(ICON*1000+NID,*) (DZ(K),K=1,NZ+1)
         
         DO I=1,NXMOD
            DO J1=1,NYEND2
               IF(J1.GE.NYSTART1 .AND. J1.LE.NYEND1) THEN
                  J=J0+(J1-NYSTART1)+1
                  READ(ICON*1000+NID,*) UZFS(I,J),VZFS(I,J),WZFS(I,J)
                  READ(ICON*1000+NID,*) ETA(I,J),ETA0(I,J),HH(I,J),
     1                 HT(I,J)
                  DO K=1,NZMAX
                     READ(ICON*1000+NID,*) U(I,J,K),V(I,J,K),W(I,J,K)
                     READ(ICON*1000+NID,*) PP(I,J,K)
                     READ(ICON*1000+NID,*) HU(I,J,K),HV(I,J,K),
     1                    HW(I,J,K)
                  ENDDO
               ELSE
                  READ(ICON*1000+NID,*) TMP,TMP,TMP
                  READ(ICON*1000+NID,*) TMP,TMP,TMP,TMP
                  DO K=1,NZMAX
                     READ(ICON*1000+NID,*) TMP,TMP,TMP
                     READ(ICON*1000+NID,*) TMP
                     READ(ICON*1000+NID,*) TMP,TMP,TMP
                  ENDDO
               ENDIF
            ENDDO
         ENDDO
         CLOSE(ICON*1000+NID)
         J0=J0+NYEND1-NYSTART1+1
      ENDDO

 100  CONTINUE

      RETURN
      END

C=====SUBROUTINE REREADN END HERE









C======================================================================
      SUBROUTINE TPWRITE(NYMOD,NYMAX,NXWT,NYWT,JCUT,NCPU)
      
      IMPLICIT NONE

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NYMOD,NYMAX,NCPU
      INTEGER NCREQ,NYEND,JJ1,JJ2,I,J,NXWT,NYWT

      INTEGER JCUT(NYWT),ID

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      IF(MYID.EQ.0) THEN
         WRITE(93,931)
CC         DO I=1,NXWT
CC            WRITE(9400+I,9102)
CC         ENDDO
CC         WRITE(96,9102)
         WRITE(910,9101)
         WRITE(32,321)
         WRITE(33,331)
      ENDIF
      
CC      WRITE(93+MYID*1000,931)

 931  FORMAT('VARIABLES=X,Y,Z,U,V,W,OMX,OMY,OMZ,PB')
      
 9101 FORMAT('VARIABLES=X,Y,Z,U,V,W,OMX,OMY,OMZ,P,NUT,CS')
 9102 FORMAT('VARIABLES=X,Y,Z,U,V,W,OMX,OMY,OMZ,P')

 321  FORMAT('VARIABLES=Z,UM,VM,WM,URMS,VRMS,WRMS,UQ,VQ,WQ,QS,UW,
     1     TAU13_NU,TAU13_SGS')
 331  FORMAT('VARIABLES=Z,OXM,OYM,OZM,OXRMS,OYRMS,OZRMS,OXQ,OYQ,OZQ,OQS'
     1     )

      RETURN
      END

C=====SUBROUTINE TPWRITE END HERE








C=======================================================================
      SUBROUTINE OUTPUT(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,ZL,PEX,
     1     PEY,DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,IOUTD,
     1     NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,HYR,HER,
     1     HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,CS_LASD,TAU13_NU,TAU13_SGS)

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,NCPU
      INTEGER IOUTC,IOUTD,NOUTC,NOUTD
      REAL XL,YL,ZL,PEX,PEY,TIME,DT,HBAR,RE

      INTEGER NFILT,K

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*),P(NXMAX,NYMAX/NCPU,NZMAX)
      REAL OMX(NXMAX,NYMAX/NCPU,*),OMY(NXMAX,NYMAX/NCPU,*)
      REAL OMZ(NXMAX,NYMAX/NCPU,*)
      REAL ETA(NXMAX,*),ETA0(NXMAX,*),HH(NXMAX,*),HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL NUT(NXMAX,NYMAX/NCPU,*),CSP(*),CSPW(*)
      REAL CS_LASD(NXMAX,NYMAX/NCPU,*)
      REAL TAU13_NU(NXMAX,NYMAX/NCPU,*),TAU13_SGS(NXMAX,NYMAX/NCPU,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      IOUTC=IOUTC+1
      IF(IOUTC.NE.NOUTC) GOTO 88
      IOUTC=0

      CALL VORTICITY(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,ZZ,DZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,V,W,OMX,OMY,OMZ,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

CC      CALL PRESSURE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,PEX,PEY,DZ,
CC     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,P,HBAR,HER,HXR,HYR,EXR,EYR,RE,
CC     1     DT,NCPU)

      CALL OUTFRE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,XL,YL,DZ,ZZ,TIME,U,V,W,
     1     OMX,OMY,OMZ,PP,RE,HER,ETA0,ETA,HH,HBAR,NUT,CS_LASD,NCPU)

      IF(MYID.EQ.0) THEN
         WRITE(32+MYID*1000,302) TIME
      ENDIF
      CALL LAYERS_VEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,DZ,U,V,W,HBAR,
     1     TAU13_NU,TAU13_SGS,NCPU)
      
      IF(MYID.EQ.0) THEN
         WRITE(33+MYID*1000,302) TIME
      ENDIF
      CALL LAYERS_VOR(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,DZ,OMX,OMY,OMZ,HBAR,
     1     NCPU)

      IF(MYID.EQ.0) THEN
         WRITE(35,302) TIME
         DO K=2,NZ
            WRITE(35,*) ZZ(K),SQRT(CSP(K)),SQRT(CSPW(K))
         ENDDO
      ENDIF

 302  FORMAT(' ZONE T="',F8.3,'"')

C-----OUTPUT THE WHOLE DOMAIN

 88   CONTINUE

      IOUTD=IOUTD+1
      IF(IOUTD.NE.NOUTD) GOTO 99
      IOUTD=0
      IF(IOUTC.NE.0) THEN
         CALL VORTICITY(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,ZZ,DZ,WORK,
     1        TRIGSX,TRIGSY,IFAX,U,V,W,OMX,OMY,OMZ,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDIF
      
      CALL OUTALL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,XL,YL,ZL,TIME,U,V,W,PP,
     1     ETA0,ETA,HH,HBAR,NUT,NCPU)

 99   RETURN
      END




C-------------------------------------------------------------------------
      SUBROUTINE OUTPUT_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,
     1     ZL,PEX,PEY,DZ,ZZ,TIME,DT,WORK,TRIGSX,TRIGSY,IFAX,IOUTC,NOUTC,
     1     IOUTD,NOUTD,U,V,W,OMX,OMY,OMZ,PP,ETA0,ETA,HH,EXR,EYR,HXR,HYR,
     1     HER,HBAR,RE,NCPU,NFILT,NUT,CSP,CSPW,ICUT,JCUT,KCUT,NXWT,NYWT)

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,NCPU
      INTEGER IOUTC,IOUTD,NOUTC,NOUTD
      REAL XL,YL,ZL,PEX,PEY,TIME,DT,HBAR,RE

      INTEGER NFILT

      INTEGER NXWT,NYWT,K
      INTEGER ICUT(NXWT),JCUT(NYWT),KCUT

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*),P(NXMAX,NYMAX/NCPU,NZMAX)
      REAL OMX(NXMAX,NYMAX/NCPU,*),OMY(NXMAX,NYMAX/NCPU,*)
      REAL OMZ(NXMAX,NYMAX/NCPU,*)
      REAL ETA(NXMAX,*),ETA0(NXMAX,*),HH(NXMAX,*),HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL NUT(NXMAX,NYMAX/NCPU,*),CSP(*),CSPW(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      IOUTC=IOUTC+1
      IF(IOUTC.NE.NOUTC) GOTO 88
      IOUTC=0

      CALL VORTICITY(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,ZZ,DZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,V,W,OMX,OMY,OMZ,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

CC      CALL PRESSURE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,PEX,PEY,DZ,
CC     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,P,HBAR,HER,HXR,HYR,EXR,EYR,RE,
CC     1     DT,NCPU)

      CALL OUTFRE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,XL,YL,DZ,ZZ,TIME,U,V,W,
     1     OMX,OMY,OMZ,PP,RE,HER,ETA0,ETA,HH,HBAR,NUT,NCPU)

      CALL OUTCUT(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,DZ,ZZ,TIME,U,V,
     1     W,OMX,OMY,OMZ,PP,RE,HER,ETA0,ETA,HH,HBAR,NCPU,NXWT,NYWT,ICUT,
     1     JCUT,KCUT)

      IF(MYID.EQ.0) THEN
         WRITE(32+MYID*1000,302) TIME
      ENDIF
      CALL LAYERS_VEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,DZ,U,V,W,HBAR,NCPU)
      
      IF(MYID.EQ.0) THEN
         WRITE(33+MYID*1000,302) TIME
      ENDIF
      CALL LAYERS_VOR(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,DZ,OMX,OMY,OMZ,HBAR,
     1     NCPU)

      IF(MYID.EQ.0) THEN
         WRITE(35,302) TIME
         DO K=2,NZ
            WRITE(35,*) ZZ(K),SQRT(CSP(K)),SQRT(CSPW(K))
         ENDDO
      ENDIF

 302  FORMAT(' ZONE T="',F8.3,'"')

C-----OUTPUT THE WHOLE DOMAIN

 88   CONTINUE

      IOUTD=IOUTD+1
      IF(IOUTD.NE.NOUTD) GOTO 99
      IOUTD=0
      IF(IOUTC.NE.0) THEN
         CALL VORTICITY(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,ZZ,DZ,WORK,
     1        TRIGSX,TRIGSY,IFAX,U,V,W,OMX,OMY,OMZ,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDIF
      
      CALL OUTALL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,XL,YL,ZL,TIME,U,V,W,PP,
     1     ETA0,ETA,HH,HBAR,NCPU)

 99   RETURN
      END





C-------------------------------------------------------------------------
      SUBROUTINE OUTALL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,XL,YL,ZL,TIME,U,V,W,
     1     PP,ETA0,ETA,HH,HBAR,NUT,NCPU)

C     OUTPUT THE WHOLE DOMAIN (FROM BOTTOM TO FREE SURFACE)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NZ1,NZ2,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL XL,YL,ZL,TIME,HBAR

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL ETA0(NXMAX,*),ETA(NXMAX,*),HH(NXMAX,*)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IF(NYEND.EQ.0) GOTO 100

      NZ1=NZ+1
      NZ2=NZ+2
      WRITE(92+MYID*1000,*) TIME,NXMOD,NYMOD,NZ,XL,YL,ZL,HBAR
      WRITE(92+MYID*1000,*) (((U(I,J,K),I=1,NXMOD),J=1,NYEND),K=1,NZ1)
      WRITE(92+MYID*1000,*) (((V(I,J,K),I=1,NXMOD),J=1,NYEND),K=1,NZ1)
      WRITE(92+MYID*1000,*) (((W(I,J,K),I=1,NXMOD),J=1,NYEND),K=1,NZ1)
      WRITE(92+MYID*1000,*) (((PP(I,J,K),I=1,NXMOD),J=1,NYEND),K=1,NZ1)
      WRITE(95+MYID*1000,*) ((ETA0(I,J),I=1,NXMOD),J=1,NYEND)
      WRITE(95+MYID*1000,*) ((ETA(I,J),I=1,NXMOD),J=1,NYEND)
      WRITE(95+MYID*1000,*) ((HH(I,J),I=1,NXMOD),J=1,NYEND)
      WRITE(96+MYID*1000,*) (((NUT(I,J,K),I=1,NXMOD),J=1,NYEND),K=1,NZ1)

 100  CONTINUE

      RETURN
      END

C-----------------------------------------------------------------------
      SUBROUTINE OUTFRE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,XL,YL,DZ,ZZ,TIME,U,V,
     1     W,OMX,OMY,OMZ,PP,RE,HER,ETA0,ETA,HH,HBAR,NUT,CS_LASD,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL XL,YL,TIME,RE,HBAR,X,Y,Z,WW

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL OMX(NXMAX,NYMAX/NCPU,*),OMY(NXMAX,NYMAX/NCPU,*)
      REAL OMZ(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL HER(NXMAX,*),ETA0(NXMAX,*),ETA(NXMAX,*),HH(NXMAX,*)
      REAL DZ(*),ZZ(*)
      REAL NUT(NXMAX,NYMAX/NCPU,*),CS_LASD(NXMAX,NYMAX/NCPU,*)

C+++
C     ADDED FOR SINGLE-FILE OUTPUT OF SURFACE DATA
      REAL US(NXMAX,NYMAX),OXS(NXMAX,NYMAX)
      REAL VS(NXMAX,NYMAX),OYS(NXMAX,NYMAX)
      REAL WS(NXMAX,NYMAX),OZS(NXMAX,NYMAX)
      REAL PS(NXMAX,NYMAX),PS2(NXMAX,NYMAX)
      REAL ETAS(NXMAX,NYMAX),HHS(NXMAX,NYMAX)
      REAL W2(NXMAX,NYMAX/NCPU)
C+++
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
C-----------------------------------
C     TRANSFER DATA INTO MYID=0
C-----------------------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            W2(I,J)=(W(I,J,1)+W(I,J,2))/2.
         ENDDO
      ENDDO

      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,ETA,ETAS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,HH,HHS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,U(1,1,1),US,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,V(1,1,1),VS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,W(1,1,1),WS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,OMX(1,1,1),OXS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,OMY(1,1,1),OYS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,OMZ(1,1,1),OZS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,PP(1,1,1),PS,NCPU)
CC      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,PP(1,1,2),PS2,NCPU)

C-----END HERE

c$$$      WRITE(93+MYID*1000,900) TIME,NXMOD,NYEND
c$$$      DO J=1,NYEND
c$$$         Y=(MYID*NYMAX/NCPU+J-1)*YL/NYMOD
c$$$         DO I=1,NXMOD
c$$$            X=(I-1)*XL/NXMOD
c$$$            Z=ZZ(1)*(HBAR+ETA(I,J))-HH(I,J)
c$$$            WRITE(93+MYID*1000,901) X,Y,Z,U(I,J,1),V(I,J,1),W(I,J,1),
c$$$     1           OMX(I,J,1),OMY(I,J,1),OMZ(I,J,1),PP(I,J,1)
c$$$         ENDDO
c$$$      ENDDO
      

      IF(MYID.EQ.0) THEN

         WRITE(93,900) TIME,NXMOD+1,NYMOD+1

         DO J=1,NYMOD
            Y=(J-1)*YL/NYMOD
            DO I=1,NXMOD
               X=(I-1)*XL/NXMOD
               Z=ZZ(1)*(HBAR+ETAS(I,J))-HHS(I,J)
	       PRINT *, 'PLYU:X,Y,Z,ZZ(1),HBAR,ETAS(I,J),HHS(I,J)'
	       PRINT *, X,Y,Z,ZZ(1),HBAR,ETAS(I,J),HHS(I,J)
	       WRITE(93,901) X,Y,Z,US(I,J),VS(I,J),WS(I,J),
     1              OXS(I,J),OYS(I,J),OZS(I,J),PS(I,J)
            ENDDO
            DO I=1,1
               X=XL
               Z=ZZ(1)*(HBAR+ETAS(I,J))-HHS(I,J)
               WRITE(93,901) X,Y,Z,US(I,J),VS(I,J),WS(I,J),
     1              OXS(I,J),OYS(I,J),OZS(I,J),PS(I,J)
            ENDDO
         ENDDO
         DO J=1,1
            Y=YL
            DO I=1,NXMOD
               X=(I-1)*XL/NXMOD
               Z=ZZ(1)*(HBAR+ETAS(I,J))-HHS(I,J)
               WRITE(93,901) X,Y,Z,US(I,J),VS(I,J),WS(I,J),
     1              OXS(I,J),OYS(I,J),OZS(I,J),PS(I,J)
            ENDDO
            DO I=1,1
               X=XL
               Z=ZZ(1)*(HBAR+ETAS(I,J))-HHS(I,J)
               WRITE(93,901) X,Y,Z,US(I,J),VS(I,J),WS(I,J),
     1              OXS(I,J),OYS(I,J),OZS(I,J),PS(I,J)
            ENDDO
         ENDDO
      
 900     FORMAT(' ZONE T="',F11.5,'" I=',I4,' J=',I4,' F=POINT')
 901     FORMAT(25E12.4)

         WRITE(910,900) TIME,NXMOD,NZ+1
         J=1
         Y=(MYID*NYMAX/NCPU+J-1)*YL/NYMOD!-0.5*YL
         DO K=1,NZ+1
            DO I=1,NXMOD
               X=(I-1)*XL/NXMOD!-0.5*XL
               Z=ZZ(K)*(HBAR+ETA(I,J))-HH(I,J)
               if(k.eq.nz+1) then
                  z=hbar+dz(nz)*hbar
               endif
               IF(K.EQ.1) THEN
                  WW=W(I,J,1)
               ELSE IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K-1)+W(I,J,K))/2.
               ENDIF
               WRITE(910,910) X,Y,Z,U(I,J,K),V(I,J,K),WW,OMX(I,J,K),
     1              OMY(I,J,K),OMZ(I,J,K),PP(I,J,K),NUT(I,J,K),
     1              CS_LASD(I,J,K)
            ENDDO
         ENDDO
 910     FORMAT(12E12.4)

      ENDIF

 100  CONTINUE
      
      RETURN
      END



C-----------------------------------------------------------------------
      SUBROUTINE OUTCUT(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,XL,YL,DZ,ZZ,
     1     TIME,U,V,W,OMX,OMY,OMZ,PP,RE,HER,ETA0,ETA,HH,HBAR,NCPU,NXWT,
     1     NYWT,ICUT,JCUT,KCUT)
      
      IMPLICIT NONE
      
      INTEGER I,J,K,II,JJ
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL XL,YL,TIME,RE,HBAR,X,Y,Z,WW

      INTEGER NXWT,NYWT
      INTEGER ICUT(NXWT),JCUT(NYWT),KCUT

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,ID
      
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL OMX(NXMAX,NYMAX/NCPU,*),OMY(NXMAX,NYMAX/NCPU,*)
      REAL OMZ(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL HER(NXMAX,*),ETA0(NXMAX,*),ETA(NXMAX,*),HH(NXMAX,*)
      REAL DZ(*),ZZ(*)

C     S: SINGLE CPU
      REAL UKS(NXMAX,NYMAX),OXKS(NXMAX,NYMAX)
      REAL VKS(NXMAX,NYMAX),OYKS(NXMAX,NYMAX)
      REAL WKS(NXMAX,NYMAX),OZKS(NXMAX,NYMAX)
      REAL PKS(NXMAX,NYMAX)
      REAL ETAS(NXMAX,NYMAX),HHS(NXMAX,NYMAX)
      REAL W2(NXMAX,NYMAX/NCPU)

      REAL UI(NYMAX/NCPU,NZMAX),OXI(NYMAX/NCPU,NZMAX)
      REAL VI(NYMAX/NCPU,NZMAX),OYI(NYMAX/NCPU,NZMAX)
      REAL WI(NYMAX/NCPU,NZMAX),OZI(NYMAX/NCPU,NZMAX)
      REAL PI(NYMAX/NCPU,NZMAX)
      REAL UIS(NYMAX,NZMAX),OXIS(NYMAX,NZMAX)
      REAL VIS(NYMAX,NZMAX),OYIS(NYMAX,NZMAX)
      REAL WIS(NYMAX,NZMAX),OZIS(NYMAX,NZMAX)
      REAL PIS(NYMAX,NZMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C------------------------
C     OUTPUT K-CUT
C------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMAX
            W2(I,J)=(W(I,J,KCUT)+W(I,J,KCUT-1))/2.
         ENDDO
      ENDDO

      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,ETA,ETAS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,HH,HHS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,U(1,1,KCUT),UKS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,V(1,1,KCUT),VKS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,W2,WKS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,OMX(1,1,KCUT),OXKS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,OMY(1,1,KCUT),OYKS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,OMZ(1,1,KCUT),OZKS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,PP(1,1,KCUT),PKS,NCPU)

      IF(MYID.EQ.0) THEN

         WRITE(96,900) TIME,NXMOD+1,NYMOD+1

         DO J=1,NYMOD
            Y=(J-1)*YL/FLOAT(NYMOD)
            DO I=1,NXMOD
               X=(I-1)*XL/FLOAT(NXMOD)
               Z=ZZ(KCUT)*(HBAR+ETAS(I,J))-HHS(I,J)
               WRITE(96,901) X,Y,Z,UKS(I,J),VKS(I,J),WKS(I,J),
     1              OXKS(I,J),OYKS(I,J),OZKS(I,J),PKS(I,J)
            ENDDO
            DO I=1,1
               X=XL
               Z=ZZ(KCUT)*(HBAR+ETAS(I,J))-HHS(I,J)
               WRITE(96,901) X,Y,Z,UKS(I,J),VKS(I,J),WKS(I,J),
     1              OXKS(I,J),OYKS(I,J),OZKS(I,J),PKS(I,J)
            ENDDO
         ENDDO
         DO J=1,1
            Y=YL
            DO I=1,NXMOD
               X=(I-1)*XL/FLOAT(NXMOD)
               Z=ZZ(KCUT)*(HBAR+ETAS(I,J))-HHS(I,J)
               WRITE(96,901) X,Y,Z,UKS(I,J),VKS(I,J),WKS(I,J),
     1              OXKS(I,J),OYKS(I,J),OZKS(I,J),PKS(I,J)
            ENDDO
            DO I=1,1
               X=XL
               Z=ZZ(KCUT)*(HBAR+ETAS(I,J))-HHS(I,J)
               WRITE(96,901) X,Y,Z,UKS(I,J),VKS(I,J),WKS(I,J),
     1              OXKS(I,J),OYKS(I,J),OZKS(I,J),PKS(I,J)
            ENDDO
         ENDDO
      
 900     FORMAT(' ZONE T="',F11.5,'" I=',I4,' J=',I4,' F=POINT')
 901     FORMAT(25E12.4)

      ENDIF

C-----END HERE

C------------------------
C     OUTPUT I-CUT
C------------------------

      DO 100 II=1,NXWT
         
         I=ICUT(II)
         X=(I-1)*XL/FLOAT(NXMOD)

         DO K=1,NZ
            DO J=1,NYMAX/NCPU
               UI(J,K)=U(I,J,K)
               VI(J,K)=V(I,J,K)
               WI(J,K)=W(I,J,K)
               OXI(J,K)=OMX(I,J,K)
               OYI(J,K)=OMY(I,J,K)
               OZI(J,K)=OMZ(I,J,K)
               PI(J,K)=PP(I,J,K)
            ENDDO
         ENDDO
         
         DO K=1,NZ
            CALL ALLTOONE(1,NYMOD,1,NYMAX,UI(1,K),UIS(1,K),NCPU)
            CALL ALLTOONE(1,NYMOD,1,NYMAX,VI(1,K),VIS(1,K),NCPU)
            CALL ALLTOONE(1,NYMOD,1,NYMAX,WI(1,K),WIS(1,K),NCPU)
            CALL ALLTOONE(1,NYMOD,1,NYMAX,OXI(1,K),OXIS(1,K),NCPU)
            CALL ALLTOONE(1,NYMOD,1,NYMAX,OYI(1,K),OYIS(1,K),NCPU)
            CALL ALLTOONE(1,NYMOD,1,NYMAX,OZI(1,K),OZIS(1,K),NCPU)
            CALL ALLTOONE(1,NYMOD,1,NYMAX,PI(1,K),PIS(1,K),NCPU)
         ENDDO

         IF(MYID.EQ.0) THEN
            
            WRITE(9400+II,900) TIME,NYMOD+1,NZ
            
            DO K=1,NZ
               DO J=1,NYMOD
                  Y=(J-1)*YL/FLOAT(NYMOD)
                  Z=ZZ(K)*(HBAR+ETAS(I,J))-HHS(I,J)
                  IF(K.EQ.1) THEN
                     WW=WIS(J,K)
                  ELSE IF(K.EQ.NZ) THEN
                     WW=WIS(J,K-1)
                  ELSE
                     WW=(WIS(J,K)+WIS(J,K-1))/2.
                  ENDIF
                  WRITE(9400+II,901) X,Y,Z,UIS(J,K),VIS(J,K),WW,
     1                 OXIS(J,K),OYIS(J,K),OZIS(J,K),PIS(J,K)
               ENDDO
               DO J=1,1
                  Y=YL
                  Z=ZZ(K)*(HBAR+ETAS(I,J))-HHS(I,J)
                  IF(K.EQ.1) THEN
                     WW=WIS(J,K)
                  ELSE IF(K.EQ.NZ) THEN
                     WW=WIS(J,K-1)
                  ELSE
                     WW=(WIS(J,K)+WIS(J,K-1))/2.
                  ENDIF
                  WRITE(9400+II,901) X,Y,Z,UIS(J,K),VIS(J,K),WW,
     1                 OXIS(J,K),OYIS(J,K),OZIS(J,K),PIS(J,K)
               ENDDO
            ENDDO

         ENDIF
         
 100  CONTINUE

C-----END HERE

C------------------------
C     OUTPUT J-CUT
C------------------------
      
      DO 200 JJ=1,NYWT
         
         ID=INT(JCUT(JJ)/(NYMAX/NCPU))

         IF(MYID.EQ.ID) THEN
            
            WRITE(9500+JJ,*) 'VARIABLES=X,Y,Z,U,V,W,OMX,OMY,OMZ,P'
            WRITE(9500+JJ,900) TIME,NXMOD+1,NZ

            J=JCUT(JJ)-MYID*(NYMAX/NCPU)
            Y=(JCUT(JJ)-1)*YL/FLOAT(NYMOD)
            DO K=1,NZ
               DO I=1,NXMOD
                  X=(I-1)*XL/FLOAT(NXMOD)
                  Z=ZZ(K)*(HBAR+ETA(I,J))-HH(I,J)
                  IF(K.EQ.1) THEN
                     WW=W(I,J,1)
                  ELSE IF(K.EQ.NZ) THEN
                     WW=W(I,J,K-1)
                  ELSE
                     WW=(W(I,J,K)+W(I,J,K-1))/2.
                  ENDIF
                  WRITE(9500+JJ,901) X,Y,Z,U(I,J,K),V(I,J,K),WW,
     1                 OMX(I,J,K),OMY(I,J,K),OMZ(I,J,K),PP(I,J,K)
               ENDDO
               DO I=1,1
                  X=XL
                  Z=ZZ(K)*(HBAR+ETA(I,J))-HH(I,J)
                  IF(K.EQ.1) THEN
                     WW=W(I,J,1)
                  ELSE IF(K.EQ.NZ) THEN
                     WW=W(I,J,K-1)
                  ELSE
                     WW=(W(I,J,K)+W(I,J,K-1))/2.
                  ENDIF
                  WRITE(9500+JJ,901) X,Y,Z,U(I,J,K),V(I,J,K),WW,
     1                 OMX(I,J,K),OMY(I,J,K),OMZ(I,J,K),PP(I,J,K)
               ENDDO
            ENDDO

         ENDIF

 200  CONTINUE

C-----END HERE
      
      RETURN
      END
      

C----------------------------------------------------------------------
      SUBROUTINE VORTICITY(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,ZZ,DZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,OMX,OMY,OMZ,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,UZ,VZ,WZ

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL U(NXMAX,NYMAX/NCPU,*),OMX(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),OMY(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),OMZ(NXMAX,NYMAX/NCPU,*)
      REAL UY(NXMAX,NYMAX/NCPU),VX(NXMAX,NYMAX/NCPU)
      REAL WX(NXMAX,NYMAX/NCPU),WY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,*),EYR(NXMAX,*)
      REAL HXR(NXMAX,*),HYR(NXMAX,*),HER(NXMAX,*)
      REAL DZ(*),ZZ(*)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO K=1,NZ
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU 
               IF(K.EQ.1) THEN
                  TMP(I,J)=W(I,J,1)
               ELSE IF(K.EQ.NZ) THEN
                  TMP(I,J)=W(I,J,NZ-1)
               ELSE
                  TMP(I,J)=0.5*(W(I,J,K)+W(I,J,K-1))
               ENDIF
            ENDDO
         ENDDO
         
         CALL PDFX_PARA(V(1,1,K),VX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFX_PARA(TMP,WX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1        NYMAX,NCPU)
         CALL PDFY_PARA(U(1,1,K),UY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(TMP,WY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1        NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU

               IF(K.EQ.1) THEN
                  UZ=(-184.*U(I,J,1)+225.*U(I,J,2)-50.*U(I,J,3)
     1                 +9.*U(I,J,4))/(60.*DZ(2))
                  VZ=(-184.*V(I,J,1)+225.*V(I,J,2)-50.*V(I,J,3)
     1                 +9.*V(I,J,4))/(60.*DZ(2))
                  WZ=(-11.*W(I,J,1)+18.*W(I,J,2)-9.*W(I,J,3)
     1                 +2.*W(I,J,4))/(6.*DZ(2))
               ELSE IF(K.EQ.2) THEN
                  UZ=(-32.*U(I,J,1)+15.*U(I,J,2)+20.*U(I,J,3)
     1                 -3.*U(I,J,4))/(30.*DZ(2))
                  VZ=(-32.*V(I,J,1)+15.*V(I,J,2)+20.*V(I,J,3)
     1                 -3.*V(I,J,4))/(30.*DZ(2))
                  WZ=(W(I,J,2)-W(I,J,1))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  UZ=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZ=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZ=(W(I,J,NZ-1)-W(I,J,NZ-2))/DZ(NZ-2)
               ELSE IF(K.EQ.NZ) THEN
                  UZ=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZ=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZ=(-2.*W(I,J,NZ-4)+9.*W(I,J,NZ-3)-18.*W(I,J,NZ-2)
     1                 +11.*W(I,J,NZ-1))/(6.*DZ(NZ-2))
               ELSE
                  UZ=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
                  VZ=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ=(W(I,J,K)-W(I,J,K-1))/(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
               
               OMX(I,J,K)=WY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*WZ
     1              -HER(I,J)*VZ
               OMY(I,J,K)=HER(I,J)*UZ-WX(I,J)-(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *WZ
               OMZ(I,J,K)=VX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*VZ
     1              -UY(I,J)-(HYR(I,J)-ZZ(K)*EYR(I,J))*UZ
               
            ENDDO
         ENDDO

      ENDDO
      
      RETURN
      END


C----------------------------------------------------------------------
      SUBROUTINE LAYERS_VEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,DZ,U,V,W,HBAR,
     1     TAU13_NU,TAU13_SGS,NCPU)

C     CALCULATE SOME STATISTIC RESULTS OF VELOCITY  FOR EACH K
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND,NXYMOD

      REAL UM1,VM1,WM1,URMS1,VRMS1,WRMS1,UM,VM,WM,URMS,VRMS,WRMS
      REAL UQ1,VQ1,WQ1,UQ,VQ,WQ,QS,UWQ,UWQ1
      REAL HBAR,Z,TAU13_NUM,TAU13_NUM1,TAU13_SGSM,TAU13_SGSM1

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      INTEGER STATUS(MPI_STATUS_SIZE)

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*),ZZ(*)
      REAL TAU13_NU(NXMAX,NYMAX/NCPU,*),TAU13_SGS(NXMAX,NYMAX/NCPU,*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NXYMOD=NXMOD*NYMOD
      
      DO K=2,NZ+1
         UM1=0.
         VM1=0.
         WM1=0.
         URMS1=0.
         VRMS1=0.
         WRMS1=0.
         
         UM=0.
         VM=0.
         WM=0.
         URMS=0.
         VRMS=0.
         WRMS=0.
         
         IF(NYEND.EQ.0) GOTO 100

         DO I=1,NXMOD
            DO J=1,NYEND
               UM1=UM1+U(I,J,K)
               URMS1=URMS1+U(I,J,K)**2
               VM1=VM1+V(I,J,K)
               VRMS1=VRMS1+V(I,J,K)**2
               IF(K.EQ.1) THEN
                  WM1=WM1+W(I,J,K)
                  WRMS1=WRMS1+W(I,J,K)**2
               ELSE IF(K.EQ.NZ) THEN
                  WM1=WM1+W(I,J,K-1)
                  WRMS1=WRMS1+W(I,J,K-1)**2
               ELSE
                  WM1=WM1+0.5*(W(I,J,K)+W(I,J,K-1))
                  WRMS1=WRMS1+0.25*(W(I,J,K)+W(I,J,K-1))**2
               ENDIF
            ENDDO
         ENDDO

 100     CONTINUE

         CALL MPI_ALLREDUCE(UM1,UM,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(VM1,VM,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(WM1,WM,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(URMS1,URMS,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(VRMS1,VRMS,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(WRMS1,WRMS,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)

         UM=UM/NXYMOD
         VM=VM/NXYMOD
         WM=WM/NXYMOD
         URMS=(URMS/NXYMOD)**0.5
         VRMS=(VRMS/NXYMOD)**0.5
         WRMS=(WRMS/NXYMOD)**0.5

CC
         
         UQ=0.
         VQ=0.
         WQ=0.
         UWQ=0.
         TAU13_NUM=0.
         TAU13_SGSM=0.
         
         UQ1=0.
         VQ1=0.
         WQ1=0.
         UWQ1=0.
         TAU13_NUM1=0.
         TAU13_SGSM1=0.

         IF(NYEND.EQ.0) GOTO 200
         
         DO I=1,NXMOD
            DO J=1,NYEND
               UQ1=UQ1+(U(I,J,K)-UM)**2
               VQ1=VQ1+(V(I,J,K)-VM)**2
               IF(K.EQ.1) THEN
                  WQ1=WQ1+(W(I,J,K)-WM)**2
                  UWQ1=UWQ1+(U(I,J,K)-UM)*(W(I,J,K)-WM)
               ELSE IF(K.EQ.NZ) THEN
                  WQ1=WQ1+(W(I,J,K-1)-WM)**2
                  UWQ1=UWQ1+(U(I,J,K)-UM)*(W(I,J,K-1)-WM)
               ELSE
                  WQ1=WQ1+(0.5*(W(I,J,K)+W(I,J,K-1))-WM)**2
                  UWQ1=UWQ1+(U(I,J,K)-UM)*(0.5*(W(I,J,K)+W(I,J,K-1))-WM)
               ENDIF
               TAU13_NUM1=TAU13_NUM1+TAU13_NU(I,J,K)
               TAU13_SGSM1=TAU13_SGSM1+TAU13_SGS(I,J,K)
            ENDDO
         ENDDO

 200     CONTINUE
         
         CALL MPI_ALLREDUCE(UQ1,UQ,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(VQ1,VQ,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(WQ1,WQ,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(UWQ1,UWQ,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(TAU13_NUM1,TAU13_NUM,1,MPI_DOUBLE_PRECISION,
     1        MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(TAU13_SGSM1,TAU13_SGSM,1,
     1        MPI_DOUBLE_PRECISION,MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)

         QS=(UQ+VQ+WQ)/NXYMOD
         UQ=(UQ/NXYMOD)**0.5
         VQ=(VQ/NXYMOD)**0.5
         WQ=(WQ/NXYMOD)**0.5
         UWQ=UWQ/NXYMOD
         TAU13_NUM=TAU13_NUM/NXYMOD
         TAU13_SGSM=TAU13_SGSM/NXYMOD
         
         IF(MYID.EQ.0) THEN
            Z=ZZ(K)*HBAR
            WRITE(MYID*1000+32,1001) ZZ(K),UM,VM,WM,URMS,VRMS,WRMS,UQ,
     1           VQ,WQ,QS,UWQ,TAU13_NUM,TAU13_SGSM
         ENDIF
         
      ENDDO
      
 1001 FORMAT(14E12.4)
      
      RETURN
      END


C-----------------------------------------------------------------------
      SUBROUTINE LAYERS_VOR(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,DZ,OX,OY,OZ,
     1     HBAR,NCPU)
      
C     CALCULATE SOME STATISTIC RESULTS OF VORTICITY FOR EACH K

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND,NXYMOD
      
      REAL UM1,VM1,WM1,URMS1,VRMS1,WRMS1,UM,VM,WM,URMS,VRMS,WRMS
      REAL UQ1,VQ1,WQ1,UQ,VQ,WQ,QS
      REAL HBAR,Z

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      INTEGER STATUS(MPI_STATUS_SIZE)
      
      REAL OX(NXMAX,NYMAX/NCPU,*),OY(NXMAX,NYMAX/NCPU,*)
      REAL OZ(NXMAX,NYMAX/NCPU,*)
      REAL ZZ(*),DZ(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NXYMOD=NXMOD*NYMOD
      
      DO K=2,NZ
         UM1=0.
         VM1=0.
         WM1=0.
         URMS1=0.
         VRMS1=0.
         WRMS1=0.
         
         UM=0.
         VM=0.
         WM=0.
         URMS=0.
         VRMS=0.
         WRMS=0.
         
         IF(NYEND.EQ.0) GOTO 100

         DO I=1,NXMOD
            DO J=1,NYEND
               UM1=UM1+OX(I,J,K)
               URMS1=URMS1+OX(I,J,K)**2
               VM1=VM1+OY(I,J,K)
               VRMS1=VRMS1+OY(I,J,K)**2
               WM1=WM1+OZ(I,J,K)
               WRMS1=WRMS1+OZ(I,J,K)**2
            ENDDO
         ENDDO

 100     CONTINUE

         CALL MPI_ALLREDUCE(UM1,UM,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(VM1,VM,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(WM1,WM,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(URMS1,URMS,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(VRMS1,VRMS,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(WRMS1,WRMS,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)

         UM=UM/NXYMOD
         VM=VM/NXYMOD
         WM=WM/NXYMOD
         URMS=(URMS/NXYMOD)**0.5
         VRMS=(VRMS/NXYMOD)**0.5
         WRMS=(WRMS/NXYMOD)**0.5

CC
         
         UQ=0.
         VQ=0.
         WQ=0.
         
         UQ1=0.
         VQ1=0.
         WQ1=0.

         IF(NYEND.EQ.0) GOTO 200
         
         DO I=1,NXMOD
            DO J=1,NYEND
               UQ1=UQ1+(OX(I,J,K)-UM)**2
               VQ1=VQ1+(OY(I,J,K)-VM)**2
               WQ1=WQ1+(OZ(I,J,K)-WM)**2
            ENDDO
         ENDDO

 200     CONTINUE
         
         CALL MPI_ALLREDUCE(UQ1,UQ,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(VQ1,VQ,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)
         CALL MPI_ALLREDUCE(WQ1,WQ,1,MPI_DOUBLE_PRECISION,MPI_SUM,
     1        MPI_COMM_WORLD,STATUS,IERR)

         QS=(UQ+VQ+WQ)/NXYMOD
         UQ=(UQ/NXYMOD)**0.5
         VQ=(VQ/NXYMOD)**0.5
         WQ=(WQ/NXYMOD)**0.5
         
         IF(MYID.EQ.0) THEN
            Z=ZZ(K)*HBAR
            WRITE(MYID*1000+33,1001) Z,UM,VM,WM,URMS,VRMS,WRMS,UQ,
     1           VQ,WQ,QS
         ENDIF
         
      ENDDO
      
 1001 FORMAT(11E12.4)
      
      RETURN
      END

C====SUBROUTINE GROUP OUTPUT END HERE







C===================================================================
      SUBROUTINE ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,F,FA,NCPU)

C     BY DI YANG, MAY 2011
C     COLLECTING 2D PLANE DATA FOR ALL PROCESSORS INTO MYID=0

      IMPLICIT NONE
      
      INTEGER I,J,K,JS
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STAT(MPI_STATUS_SIZE)
      
      REAL F(NXMAX,*),F0(NXMAX,NYMAX),FA(NXMAX,NYMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
C-------------------------
C     INITIALIZATION
C-------------------------

      DO J=1,NYMAX
         DO I=1,NXMAX
            F0(I,J)=0.
            FA(I,J)=0.
         ENDDO
      ENDDO

      DO JS=1,NYEND
         J=MYID*NYMAX/NCPU+JS
         DO I=1,NXMAX
            F0(I,J)=F(I,JS)
         ENDDO
      ENDDO

C-----END HERE

C--------------------------------------
C     COLLECT VALUE TO SINGLE CPU
C--------------------------------------
      
      CALL MPI_ALLREDUCE(F0,FA,NXMAX*NYMAX,MPI_DOUBLE_PRECISION,
     1     MPI_SUM,MPI_COMM_WORLD,IERR)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE ALLTOONE END HERE








C===================================================================
      SUBROUTINE ALLTOONE_OLD(NXMOD,NYMOD,NXMAX,NYMAX,F,FA,NCPU)

C     COLLECTING 2D PLANE DATA FOR ALL PROCESSORS INTO MYID=0

      IMPLICIT NONE
      
      INTEGER I,J,K,JS
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER NUMSEND,NUMRECV
      INTEGER ITAG

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STAT(MPI_STATUS_SIZE)
      
      REAL F(NXMAX,*),FA(NXMAX,NYMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      NUMSEND=NXMAX*NYMAX/NCPU
      NUMRECV=NUMSEND

      DO J=1,NYMAX
         DO I=1,NXMAX
            FA(I,J)=0.
         ENDDO
      ENDDO

      IF(NCPU.EQ.1) THEN
         
         DO I=1,NXMOD
            DO J=1,NYMOD
               FA(I,J)=F(I,J)
            ENDDO
         ENDDO
         
      ELSE 

         IF(MYID.NE.0) THEN
         
            ITAG=MYID
            CALL MPI_SEND(F,NUMSEND,MPI_DOUBLE_PRECISION,0,ITAG,
     1           MPI_COMM_WORLD,IERR)

         ELSE IF(MYID.EQ.0) THEN
            
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  FA(I,J)=F(I,J)
               ENDDO
            ENDDO

            DO K=1,NCPU-1
               JS=K*NYMAX/NCPU+1
               ITAG=K
               CALL MPI_RECV(FA(1,JS),NUMRECV,MPI_DOUBLE_PRECISION,K,
     1              ITAG,MPI_COMM_WORLD,STAT,IERR)
            ENDDO
            
         ENDIF

      ENDIF

      RETURN
      END

C=====SUBROUTINE ALLTOONE END HERE






C============================================================================
      SUBROUTINE PRESSURE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,P,HBAR,HER,HXR,HYR,EXR,EYR,RE,
     1     DT,NCPU)

C     CALCULATE REAL PRESSURE FROM PSEUDO-PRESSURE

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL PEX,PEY,HBAR,RE,DT

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),P(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),T6(NXMAX,NYMAX/NCPU)
      REAL LAP(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-----------------
C     LAP_PHI
C-----------------

C~~~~~~~~~~~~~~
C     K=2
C~~~~~~~~~~~~~~

      CALL PDFY_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T5(I,J)=(T1(I,J)+3.*T2(I,J)+T3(I,J)+3.*T4(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T4(I,J)=(T1(I,J)+3.*T2(I,J)+T3(I,J)+3.*T4(I,J))/3./DZ(2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(-PP(I,J,4)+4.*PP(I,J,3)-3.*PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAP(I,J,2)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
         ENDDO
      ENDDO
      
      CALL PDFXX_PARA(PP(1,1,2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,2)=LAP(I,J,2)+T1(I,J)+T2(I,J)
         ENDDO
      ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~
C     K=3
C~~~~~~~~~~~~~~

      CALL PDFY_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(4)*EYR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)           
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(4)*EXR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)           
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,4)-PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,4)-2.*PP(I,J,3)+PP(I,J,2))
     1           /(DZ(2))**2
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAP(I,J,3)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL PDFXX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(PP(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,3)=LAP(I,J,3)+T1(I,J)+T2(I,J)
         ENDDO
      ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~
C     K=4,NZ-3
C~~~~~~~~~~~~~~~~~~~~

      DO 100 K=4,NZ-3

         CALL PDFY_PARA(PP(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=(HYR(I,J)-ZZ(K+1)*EYR(I,J))
     1              *(PP(I,J,K+2)-PP(I,J,K))/(DZ(K)+DZ(K+1))
               T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))
     1              *(PP(I,J,K)-PP(I,J,K-2))/(DZ(K-2)+DZ(K-1))
               T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
            ENDDO
         ENDDO
         
CC
      
         CALL PDFX_PARA(PP(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFX_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=(HXR(I,J)-ZZ(K+1)*EXR(I,J))
     1              *(PP(I,J,K+2)-PP(I,J,K))/(DZ(K)+DZ(K+1))
               T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))
     1              *(PP(I,J,K)-PP(I,J,K-2))/(DZ(K-2)+DZ(K-1))
               T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K)) 
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
            ENDDO
         ENDDO
         
CC
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T1(I,J)=(PP(I,J,K+1)-PP(I,J,K-1))/(DZ(K-1)+DZ(K))
               T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
               T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1        NXMAX,NYMAX,NCPU)
         
CC

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T1(I,J)=HER(I,J)*((PP(I,J,K+1)-PP(I,J,K))/DZ(K)
     1              -(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1))*2./(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T1(I,J)=HER(I,J)*T1(I,J)
               LAP(I,J,K)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
            ENDDO
         ENDDO
         
         CALL PDFXX_PARA(PP(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFYY_PARA(PP(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               LAP(I,J,K)=LAP(I,J,K)+T1(I,J)+T2(I,J)
            ENDDO
         ENDDO

 100  CONTINUE

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~
C     K=NZ-2
C~~~~~~~~~~~~~~~~~

      CALL PDFY_PARA(PP(1,1,NZ-1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,NZ-3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(NZ-1)*EYR(I,J))*(4.*PP(I,J,NZ)
     1           -3.*PP(I,J,NZ-1)-PP(I,J,NZ-2))/3./DZ(NZ-2)
            T4(I,J)=(HYR(I,J)-ZZ(NZ-3)*EYR(I,J))*(PP(I,J,NZ-2)
     1           -PP(I,J,NZ-4))/(DZ(NZ-4)+DZ(NZ-3))
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(NZ-2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,NZ-1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,NZ-3),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(NZ-1)*EXR(I,J))*(4.*PP(I,J,NZ)
     1           -3.*PP(I,J,NZ-1)-PP(I,J,NZ-2))/3./DZ(NZ-2)
            T4(I,J)=(HXR(I,J)-ZZ(NZ-3)*EXR(I,J))*(PP(I,J,NZ-2)
     1           -PP(I,J,NZ-4))/(DZ(NZ-4)+DZ(NZ-3))
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(NZ-2)           
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(NZ-2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,NZ-1)-PP(I,J,NZ-3))/2./DZ(NZ-2)
            T2(I,J)=(HXR(I,J)-ZZ(NZ-2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(NZ-2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,NZ-1)-2.*PP(I,J,NZ-2)+PP(I,J,NZ-3))
     1           /DZ(NZ-2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAP(I,J,NZ-2)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
         ENDDO
      ENDDO
      
      CALL PDFXX_PARA(PP(1,1,NZ-2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(PP(1,1,NZ-2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,NZ-2)=LAP(I,J,NZ-2)+T1(I,J)+T2(I,J)
         ENDDO
      ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~
C     K=NZ-1
C~~~~~~~~~~~~~~~~~~

      CALL PDFY_PARA(PP(1,1,NZ),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,NZ-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,NZ-2),T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=4.*(HYR(I,J)-ZZ(NZ)*EYR(I,J))*(8.*PP(I,J,NZ)-9.
     1           *PP(I,J,NZ-1)+PP(I,J,NZ-2))/3./DZ(NZ-2)-3.*(HYR(I,J)
     1           -ZZ(NZ-1)*EYR(I,J))*(4.*PP(I,J,NZ)-3.*PP(I,J,NZ-1)
     1           -PP(I,J,NZ-2))/3./DZ(NZ-2)-(HYR(I,J)-ZZ(NZ-2)
     1           *EYR(I,J))*(PP(I,J,NZ-1)-PP(I,J,NZ-3))
     1           /(DZ(NZ-2)+DZ(NZ-3))
            T5(I,J)=(4.*T1(I,J)-3.*T2(I,J)-T3(I,J)+T4(I,J))/3./DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(NZ-1)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,NZ),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,NZ-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,NZ-2),T3,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=4.*(HXR(I,J)-ZZ(NZ)*EXR(I,J))*(8.*PP(I,J,NZ)-9.
     1           *PP(I,J,NZ-1)+PP(I,J,NZ-2))/3./DZ(NZ-2)-3.*(HXR(I,J)
     1           -ZZ(NZ-1)*EXR(I,J))*(4.*PP(I,J,NZ)-3.*PP(I,J,NZ-1)
     1           -PP(I,J,NZ-2))/3./DZ(NZ-2)-(HXR(I,J)-ZZ(NZ-2)
     1           *EXR(I,J))*(PP(I,J,NZ-1)-PP(I,J,NZ-3))
     1           /(DZ(NZ-2)+DZ(NZ-3))
            T4(I,J)=(4.*T1(I,J)-3.*T2(I,J)-T3(I,J)+T4(I,J))/3./DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(NZ-1)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(4.*PP(I,J,NZ)-3.*PP(I,J,NZ-1)-PP(I,J,NZ-2))/3.
     1           /DZ(NZ-2)
            T2(I,J)=(HXR(I,J)-ZZ(NZ-1)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(NZ-1)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(8.*PP(I,J,NZ)-12.*PP(I,J,NZ-1)+4.
     1           *PP(I,J,NZ-2))/3./DZ(NZ-2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAP(I,J,NZ-1)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL PDFXX_PARA(PP(1,1,NZ-1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(PP(1,1,NZ-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,NZ-1)=LAP(I,J,NZ-1)+T1(I,J)+T2(I,J)
         ENDDO
      ENDDO

C~~~~~END HERE

C-----END HERE

C--------------------
C     PRESSURE
C--------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,1)=(35.*LAP(I,J,2)-35.*LAP(I,J,3)+21.*LAP(I,J,4)
     1           -5.*LAP(I,J,5))/16.
            LAP(I,J,NZ)=(35.*LAP(I,J,NZ-1)-35.*LAP(I,J,NZ-2)
     1           +21.*LAP(I,J,NZ-3)-5.*LAP(I,J,NZ-4))/16.
         ENDDO
      ENDDO

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               P(I,J,K)=PP(I,J,K)-DT/(2.*RE)*LAP(I,J,K)
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

      RETURN
      END

C=====SUBROUTINE PRESSURE END HERE








C=======================================================================
      SUBROUTINE WIND_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,NXMODS,
     1     NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,TRIGSX,
     1     TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,EX,EXX,EY,
     1     EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,REH2,HER,
     1     HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,TIME,
     1     ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,
     1     KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0,WVN,
     1     ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,FVPS,WBS,PAS0,NPW,IPA,NTH,
     1     TIMEP,TCP,FR2,RDGL,NUT,DX,DY,MFILT,CSP,CSPW)

C     WIND_LES SIMULATION
C     USE WALL FUNCTION

C     WAVY SURFACE MOTION IS GIVEN BY HOS SIMULATION
C     HOS SURFACE PRESSURE IS GIVEN BY WAVYWALL SIMULATION

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE
      REAL DX,DY,DELTAX,DELTAY
      INTEGER MFILT

      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      REAL UT(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WT(NXMAX,NYMAX/NCPU)

C----------------------------
C     VARIABLES FOR LES
C----------------------------

CC      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

C-----END HERE

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER IRK,NPW,IPA,NTH,ITH
      REAL TH,TIMEP,TCP,TIME0,FEXP,FR2,RDGL
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL ETAB(NXMAXS,*)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,*)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)
      
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C------------------------------------------
C     CALCULATE NONLINEAR COEFFICIENT
C------------------------------------------

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

C-----END HERE

C---------------------------------
C     FILTERING THE VELOCITY
C---------------------------------

      DELTAX=1.5*DX
      DELTAY=1.5*DY

      DO K=1,NZ+1
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,U(1,1,K),UF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,V(1,1,K),VF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,W(1,1,K),WF(1,1,K),
     1        MFILT)
      ENDDO

C-----END HERE

C---------------------------------------------
C     CALCULATE WALL-LAYER MODEL FOR LES
C---------------------------------------------

CC      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
CC     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)
      CALL WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
     1     DELTAY,HH,ETA,NCPU)

C-----END HERE

C-----------------------------------------------
C     CALCULATE MODEL COEFFICIENTS FOR LES
C-----------------------------------------------

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

      CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     1     HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,
     1     UF,VF,WF,MFILT)

      CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
     1     ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,IVANDRIEST,CS0,
     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,
     1     VF,WF,MFILT,CSPW)

C-----END HERE

C---------------------------------
C     PREDICTION OF VELOCITY
C---------------------------------

      CALL FUN_U_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,S12,S13W,NUT,
     1     NUTW,TAUWX)

      CALL FUN_V_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

      CALL FUN_W_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

C--------------------------------------------------------------
C     CALCULATE AIR PRESSURE ON SURFACE AT TIME STEP N+1/2
C--------------------------------------------------------------

      IF(IPA.EQ.0) THEN

         DO I=1,NXMODS
            DO J=1,NYMAXS/NCPU
               PAS(I,J)=0.
            ENDDO
         ENDDO

      ELSE IF(IPA.EQ.1) THEN
         
         CALL AIR_P_LES(NXMAX,NYMAX,NXMOD,NYMOD,NXMAXS,NYMAXS,NXMODS,
     1        NYMODS,PEX,PEY,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,
     1        IFAX,PAS,PP,NCPU)
      
         CALL AIR_P0(NXMAXS,NYMAXS,NXMODS,NYMODS,PAS,PAS0,NCPU)

         IF(TIME.LT.TIMEP) THEN
            TIME0=0.
         ELSE
            TIME0=TIME-TIMEP
         ENDIF
         FEXP=EXP(-TCP*TIME0**2)
         DO J=1,NYMAXS/NCPU
            DO I=1,NXMODS
               PAS(I,J)=RDGL*PAS(I,J)*(1.-FEXP)
            ENDDO
         ENDDO

      ELSE
         
         PRINT*, "INVALID IPA: IPA=",IPA
       
      ENDIF
      
C-----END HERE

C------------------------------------------------
C     HOS SIMULATION FOR SURFACE WAVE MOTION
C------------------------------------------------

      DO ITH=1,NTH
         TH=TIME-(NTH-ITH)*DT/NTH
         CALL HOS_WAVE_3D(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,WORKS,IFAX,
     1        TRIGSXS,TRIGSYS,PEX,PEY,TH,DT/NTH,WVN,ETAB,EBX,EBY,VPS,
     1        VPSX,VPSY,FETAB,FVPS,UBS,VBS,WBS,PAS,FR2,NCPU)
      ENDDO

C-----END HERE

C--------------------------------------
C     CALCULATE SURFACE ROUGHNESS
C--------------------------------------

CC      CALL ROUGHNESS

C-----END HERE

C-------------------------------------------------------------
C     APPLY SURFACE WAVE BOUNDARY CONDITION TO TURBULENCE
C-------------------------------------------------------------

      CALL BOTTOM_HOS_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,
     1     WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,UBS,VBS,WBS,
     1     ETAB,HX,HY,HXX,HYY,HXY,NCPU)

C-----END HERE

C---------------------------------------
C     APPLY TOP BOUNDARY CONDITION
C---------------------------------------

      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,UZFS,
     1     VZFS,W,HBAR,NUTA,USTOP,NCPU)

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,
     1     EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
      
C-----END HERE

C----------------------------------
C     CALCULATE PRESSURE FIELD
C----------------------------------

      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

C-----END HERE

C---------------------------------------
C     CORRECTION OF VELOCITY FIELD
C---------------------------------------

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C-----END HERE

C------------------------------------------------------
C     APPLY BOUNDARY CONDITION TO VELOCITY FIELD
C------------------------------------------------------

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C-----END HERE

C--------------------------------------------
C     CHECK DIVERGENCE OF THE VELOCITY
C--------------------------------------------

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WIND_LES_HOS END HERE








C=======================================================================
      SUBROUTINE WIND_LES_LAND(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,NXMODS,
     1     NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,TRIGSX,
     1     TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,EX,EXX,EY,
     1     EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,REH2,HER,
     1     HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,TIME,
     1     ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,
     1     KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0,WVN,
     1     ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,FVPS,WBS,PAS0,NPW,IPA,NTH,
     1     TIMEP,TCP,FR2,RDGL,NUT,DX,DY,MFILT,CSP,CSPW)

C     WIND_LES SIMULATION
C     USE WALL FUNCTION

C     WAVY SURFACE MOTION IS GIVEN BY HOS SIMULATION
C     HOS SURFACE PRESSURE IS GIVEN BY WAVYWALL SIMULATION

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE
      REAL DX,DY,DELTAX,DELTAY
      INTEGER MFILT

      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      REAL UT(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WT(NXMAX,NYMAX/NCPU)

C----------------------------
C     VARIABLES FOR LES
C----------------------------

CC      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

C-----END HERE

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER IRK,NPW,IPA,NTH,ITH
      REAL TH,TIMEP,TCP,TIME0,FEXP,FR2,RDGL
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL ETAB(NXMAXS,*)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,*)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)
      
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C------------------------------------------
C     CALCULATE NONLINEAR COEFFICIENT
C------------------------------------------

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

C-----END HERE

C---------------------------------
C     FILTERING THE VELOCITY
C---------------------------------

      DELTAX=1.5*DX
      DELTAY=1.5*DY

      DO K=1,NZ+1
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,U(1,1,K),UF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,V(1,1,K),VF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,W(1,1,K),WF(1,1,K),
     1        MFILT)
      ENDDO

C-----END HERE

C---------------------------------------------
C     CALCULATE WALL-LAYER MODEL FOR LES
C---------------------------------------------

CC      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
CC     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)
      CALL WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
     1     DELTAY,HH,ETA,NCPU)

C-----END HERE

C-----------------------------------------------
C     CALCULATE MODEL COEFFICIENTS FOR LES
C-----------------------------------------------

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

      CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     1     HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,
     1     UF,VF,WF,MFILT)

      CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
     1     ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,IVANDRIEST,CS0,
     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,
     1     VF,WF,MFILT,CSPW)

C-----END HERE

C---------------------------------
C     PREDICTION OF VELOCITY
C---------------------------------

      CALL FUN_U_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,S12,S13W,NUT,
     1     NUTW,TAUWX)

      CALL FUN_V_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

      CALL FUN_W_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

C-------------------------------------------------------------
C     APPLY SURFACE WAVE BOUNDARY CONDITION TO TURBULENCE
C-------------------------------------------------------------

      CALL BOTTOM_LAND_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,
     1     WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,ETAB,HX,HY,
     1     HXX,HYY,HXY,NCPU)

C-----END HERE

C---------------------------------------
C     APPLY TOP BOUNDARY CONDITION
C---------------------------------------

      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,UZFS,
     1     VZFS,W,HBAR,NUTA,USTOP,NCPU)

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,
     1     EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)

C-----END HERE

C----------------------------------
C     CALCULATE PRESSURE FIELD
C----------------------------------

      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

C-----END HERE

C---------------------------------------
C     CORRECTION OF VELOCITY FIELD
C---------------------------------------

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C-----END HERE

C------------------------------------------------------
C     APPLY BOUNDARY CONDITION TO VELOCITY FIELD
C------------------------------------------------------

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C-----END HERE

C--------------------------------------------
C     CHECK DIVERGENCE OF THE VELOCITY
C--------------------------------------------

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WIND_LES_LAND END HERE








C=======================================================================
      SUBROUTINE WIND_LES_WAVE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,NXMODS,
     1     NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,TRIGSX,
     1     TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,EX,EXX,EY,
     1     EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,REH2,HER,
     1     HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,TIME,
     1     ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,
     1     KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0,WVN,
     1     ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,FVPS,WBS,PAS0,NPW,IPA,NTH,
     1     TIMEP,TCP,FR2,RDGL,NUT,DX,DY,MFILT,CSP,CSPW)

C     WIND_LES SIMULATION
C     USE WALL FUNCTION

C     WAVY SURFACE MOTION IS GIVEN BY HOS SIMULATION
C     HOS SURFACE PRESSURE IS GIVEN BY WAVYWALL SIMULATION

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE
      REAL DX,DY,DELTAX,DELTAY
      INTEGER MFILT

      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      REAL UT(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WT(NXMAX,NYMAX/NCPU)

C----------------------------
C     VARIABLES FOR LES
C----------------------------

CC      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

C-----END HERE

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER IRK,NPW,IPA,NTH,ITH
      REAL TH,TIMEP,TCP,TIME0,FEXP,FR2,RDGL
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL ETAB(NXMAXS,*)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,*)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)
      
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C------------------------------------------
C     CALCULATE NONLINEAR COEFFICIENT
C------------------------------------------

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

C-----END HERE

C---------------------------------
C     FILTERING THE VELOCITY
C---------------------------------

      DELTAX=1.5*DX
      DELTAY=1.5*DY

      DO K=1,NZ+1
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,U(1,1,K),UF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,V(1,1,K),VF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,W(1,1,K),WF(1,1,K),
     1        MFILT)
      ENDDO

C-----END HERE

C---------------------------------------------
C     CALCULATE WALL-LAYER MODEL FOR LES
C---------------------------------------------

CC      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
CC     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)
      CALL WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
     1     DELTAY,HH,ETA,NCPU)

C-----END HERE

C-----------------------------------------------
C     CALCULATE MODEL COEFFICIENTS FOR LES
C-----------------------------------------------

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

      CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     1     HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,
     1     UF,VF,WF,MFILT)

      CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
     1     ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,IVANDRIEST,CS0,
     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,
     1     VF,WF,MFILT,CSPW)

C-----END HERE

C---------------------------------
C     PREDICTION OF VELOCITY
C---------------------------------

      CALL FUN_U_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,S12,S13W,NUT,
     1     NUTW,TAUWX)

      CALL FUN_V_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

      CALL FUN_W_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

C-------------------------------------------------------------
C     APPLY SURFACE WAVE BOUNDARY CONDITION TO TURBULENCE
C-------------------------------------------------------------

      CALL BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,HK,
     1     HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)

C-----END HERE

C---------------------------------------
C     APPLY TOP BOUNDARY CONDITION
C---------------------------------------

      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,UZFS,
     1     VZFS,W,HBAR,NUTA,USTOP,NCPU)

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,
     1     EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
      
C-----END HERE

C----------------------------------
C     CALCULATE PRESSURE FIELD
C----------------------------------

      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

C-----END HERE

C---------------------------------------
C     CORRECTION OF VELOCITY FIELD
C---------------------------------------

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C-----END HERE

C------------------------------------------------------
C     APPLY BOUNDARY CONDITION TO VELOCITY FIELD
C------------------------------------------------------

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C-----END HERE

C--------------------------------------------
C     CHECK DIVERGENCE OF THE VELOCITY
C--------------------------------------------

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WIND_LES_WAVE END HERE









C=======================================================================
      SUBROUTINE WIND_LES_WAVE_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     NXMODS,NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,
     1     TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,EX,
     1     EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,REH2,
     1     HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,TIME,
     1     ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,
     1     KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0,WVN,
     1     ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,FVPS,WBS,PAS0,NPW,IPA,NTH,
     1     TIMEP,TCP,FR2,RDGL,NUT,DX,DY,MFILT,CSP,CSPW,WTGAMMA0,UD,NXWT,
     1     NYWT,IDISC,NDISC,WNDP,TIMETURB,RDISC,HDISC,ICUT,JCUT,KCUT,
     1     ITURBINE)

C     WIND_LES SIMULATION
C     USE WALL FUNCTION

C     WAVY SURFACE MOTION IS GIVEN BY HOS SIMULATION
C     HOS SURFACE PRESSURE IS GIVEN BY WAVYWALL SIMULATION

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE
      REAL DX,DY,DELTAX,DELTAY
      INTEGER MFILT

      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      REAL UT(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WT(NXMAX,NYMAX/NCPU)

C----------------------------
C     VARIABLES FOR LES
C----------------------------

CC      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

C-----END HERE

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER IRK,NPW,IPA,NTH,ITH
      REAL TH,TIMEP,TCP,TIME0,FEXP,FR2,RDGL
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL ETAB(NXMAXS,*)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,*)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)
      
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)

C-----END HERE

C-------------------------------------
C     VARIABLES FOR WIND TURBINE
C-------------------------------------

      INTEGER ITURBINE

      INTEGER NXWT,NYWT,NDP,ICUT,JCUT,KCUT
      REAL RDISC,HDISC
      INTEGER IDISC(NXMAX,NYMAX,*),NDISC(NXMAX,NYMAX,*)
      
      REAL WTGAMMA0(NXMAX,NYMAX,*),UD(NXWT*NYWT)
      REAL WTFORCE(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TIMETURB
      REAL WNDP

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C------------------------------------------
C     CALCULATE NONLINEAR COEFFICIENT
C------------------------------------------

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

C-----END HERE

C--------------------------------------
C     CALCULATE WIND TURBINE FORCE
C--------------------------------------

      IF(ITURBINE.EQ.1) THEN
      
         CALL DISCLOCA_V3(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
     1        IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,WNDP,
     1        RDISC,HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)
         
         CALL VELDISC_V2(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,UD,
     1        U,NDISC,IDISC,NXWT,NYWT,WNDP,WTGAMMA0,DT,USBOT,HBAR)
         
         CALL WIND_TURBINE_FORCE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,
     1        NZ,NCPU,PEX,PEY,WTFORCE,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC)

      ENDIF

C-----END HERE

C---------------------------------
C     FILTERING THE VELOCITY
C---------------------------------

      DELTAX=1.5*DX
      DELTAY=1.5*DY

      DO K=1,NZ+1
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,U(1,1,K),UF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,V(1,1,K),VF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,W(1,1,K),WF(1,1,K),
     1        MFILT)
      ENDDO

C-----END HERE

C---------------------------------------------
C     CALCULATE WALL-LAYER MODEL FOR LES
C---------------------------------------------

      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)

C-----END HERE

C-----------------------------------------------
C     CALCULATE MODEL COEFFICIENTS FOR LES
C-----------------------------------------------

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

      CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     1     HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,
     1     UF,VF,WF,MFILT)

      CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
     1     ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,IVANDRIEST,CS0,
     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,
     1     VF,WF,MFILT,CSPW)

C-----END HERE

C---------------------------------
C     PREDICTION OF VELOCITY
C---------------------------------

      CALL FUN_U_LES8_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,
     1     ZZ,TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,
     1     PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,
     1     S12,S13W,NUT,NUTW,TAUWX,WTFORCE,TIMETURB,ITURBINE)

      CALL FUN_V_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

      CALL FUN_W_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

C-------------------------------------------------------------
C     APPLY SURFACE WAVE BOUNDARY CONDITION TO TURBULENCE
C-------------------------------------------------------------

      CALL BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,HK,
     1     HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)

C-----END HERE

C---------------------------------------
C     APPLY TOP BOUNDARY CONDITION
C---------------------------------------

      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,UZFS,
     1     VZFS,W,HBAR,NUTA,USTOP,NCPU)

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,
     1     EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
      
C-----END HERE

C----------------------------------
C     CALCULATE PRESSURE FIELD
C----------------------------------

      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

C-----END HERE

C---------------------------------------
C     CORRECTION OF VELOCITY FIELD
C---------------------------------------

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C-----END HERE

C------------------------------------------------------
C     APPLY BOUNDARY CONDITION TO VELOCITY FIELD
C------------------------------------------------------

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C-----END HERE

C--------------------------------------------
C     CHECK DIVERGENCE OF THE VELOCITY
C--------------------------------------------

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WIND_LES_WAVE_TURBINE END HERE









C========================================================================
      SUBROUTINE NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,
     1     EHX,EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU

      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,NCPU)
CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
CC     1     IFAX,HH,NCPU)
      
      CALL PDFX_PARA(ETA,EX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFXX_PARA(ETA,EXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFY_PARA(ETA,EY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(ETA,EYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(EX,EXY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC      CALL PDFX_PARA(HH,HX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
CC     1     NYMAX,NCPU)
CC      CALL PDFXX_PARA(HH,HXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
CC     1     NYMAX,NCPU)
CC      CALL PDFY_PARA(HH,HY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
CC     1     NXMAX,NYMAX,NCPU)
CC      CALL PDFYY_PARA(HH,HYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
CC     1     NXMAX,NYMAX,NCPU)
CC      CALL PDFY_PARA(HX,HXY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
CC     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            EHX(I,J)=EX(I,J)-HX(I,J)
            EHY(I,J)=EY(I,J)-HY(I,J)
            EHX2(I,J)=EHX(I,J)**2
            EHY2(I,J)=EHY(I,J)**2
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EHX2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EHY2,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            REH(I,J)=1./(1+EHX2(I,J)+EHY2(I,J))
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,REH,NCPU)      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            REH2(I,J)=REH(I,J)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,REH2,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            HER(I,J)=1./(ETA(I,J)+HBAR)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HER,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            HER2(I,J)=HER(I,J)**2
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HER2,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            EXR(I,J)=EX(I,J)*HER(I,J)
            EYR(I,J)=EY(I,J)*HER(I,J)
            HXR(I,J)=HX(I,J)*HER(I,J)
            HYR(I,J)=HY(I,J)*HER(I,J)
         ENDDO
      ENDDO

      RETURN
      END

C=====SUBROUTINE NL_COEF END HERE







C=======================================================================
      SUBROUTINE GETNUT(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,HER,
     1     HXR,EXR,HYR,EYR,U,V,W,DELTA,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0)
C------------------------------
C     CALCULATE NU_T AND <NU_T> AND S_IJ
C------------------------------
      IMPLICIT NONE
      INCLUDE "mpif.h"
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S33(NXMAX,NYMAX/NCPU,*)

      REAL DZ(*),ZZ(*)
      REAL HER(NXMAX,*),HXR(NXMAX,*),EXR(NXMAX,*)
      REAL HYR(NXMAX,*),EYR(NXMAX,*)
      REAL PEX,PEY
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX),NUTAR
      REAL UKSI(NXMAX,NYMAX/NCPU),UPHI(NXMAX,NYMAX/NCPU)
      REAL VKSI(NXMAX,NYMAX/NCPU),VPHI(NXMAX,NYMAX/NCPU)
      REAL WKSI(NXMAX,NYMAX/NCPU,NZMAX),WPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WWKSI,WWPHI
      REAL UF(NXMAX,NYMAX/NCPU),VF(NXMAX,NYMAX/NCPU)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX),WF0(NXMAX,NYMAX/NCPU)
      REAL UZETA(NXMAX,NYMAX/NCPU),VZETA(NXMAX,NYMAX/NCPU)
      REAL WZETA(NXMAX,NYMAX/NCPU),UKSI2D(NXMAX,NYMAX/NCPU)
      REAL UPHI2D(NXMAX,NYMAX/NCPU),VKSI2D(NXMAX,NYMAX/NCPU)
      REAL VPHI2D(NXMAX,NYMAX/NCPU),WKSI2D(NXMAX,NYMAX/NCPU)
      REAL WPHI2D(NXMAX,NYMAX/NCPU)
      REAL UU11(NXMAX,NYMAX/NCPU),UU12(NXMAX,NYMAX/NCPU)
      REAL UU13(NXMAX,NYMAX/NCPU),UU22(NXMAX,NYMAX/NCPU)
      REAL UU23(NXMAX,NYMAX/NCPU),UU33(NXMAX,NYMAX/NCPU)
      REAL UU11F(NXMAX,NYMAX/NCPU),UU12F(NXMAX,NYMAX/NCPU)
      REAL UU13F(NXMAX,NYMAX/NCPU),UU22F(NXMAX,NYMAX/NCPU)
      REAL UU23F(NXMAX,NYMAX/NCPU),UU33F(NXMAX,NYMAX/NCPU)
      REAL SS(NXMAX,NYMAX/NCPU),SSF(NXMAX,NYMAX/NCPU)
      REAL SS11(NXMAX,NYMAX/NCPU),SS12(NXMAX,NYMAX/NCPU)
      REAL SS13(NXMAX,NYMAX/NCPU),SS22(NXMAX,NYMAX/NCPU)
      REAL SS23(NXMAX,NYMAX/NCPU),SS33(NXMAX,NYMAX/NCPU)
      REAL SS11F(NXMAX,NYMAX/NCPU),SS12F(NXMAX,NYMAX/NCPU)
      REAL SS13F(NXMAX,NYMAX/NCPU),SS22F(NXMAX,NYMAX/NCPU)
      REAL SS23F(NXMAX,NYMAX/NCPU),SS33F(NXMAX,NYMAX/NCPU)
      REAL M11(NXMAX,NYMAX/NCPU),M12(NXMAX,NYMAX/NCPU)
      REAL M13(NXMAX,NYMAX/NCPU),M22(NXMAX,NYMAX/NCPU)
      REAL M23(NXMAX,NYMAX/NCPU),M33(NXMAX,NYMAX/NCPU)
      REAL L11(NXMAX,NYMAX/NCPU),L12(NXMAX,NYMAX/NCPU)
      REAL L13(NXMAX,NYMAX/NCPU),L22(NXMAX,NYMAX/NCPU)
      REAL L23(NXMAX,NYMAX/NCPU),L33(NXMAX,NYMAX/NCPU)
      REAL MM,ML,MMR,MLR,MMP,MLP,MMT,MLT,DELTA,DELTA2,DELTAH

      INTEGER ICSC,IVANDRIEST
      REAL RESTOP,RESBOT,APLUS,CS0
      INTEGER IWAVEBOT
      REAL ZCS0
      REAL CSTMP,MLA(NXMAX,NZMAX),MMA(NXMAX,NZMAX),CSA(NXMAX,NZMAX)

      REAL S11F(NXMAX,NYMAX/NCPU),S12F(NXMAX,NYMAX/NCPU)
      REAL S13F(NXMAX,NYMAX/NCPU),S22F(NXMAX,NYMAX/NCPU)
      REAL S23F(NXMAX,NYMAX/NCPU),S33F(NXMAX,NYMAX/NCPU)

      INTEGER I,J,K,MYID,IERR,NYEND

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      IF((MYID+1)*NYMAX/NCPU.LE.NYMOD) THEN
         NYEND=NYMAX/NCPU
      ELSEIF(MYID*NYMAX/NCPU.GT.NYMOD) THEN
         NYEND=0
      ELSE
         NYEND=NYMOD-MYID*NYMAX/NCPU
      ENDIF
      DELTA2=DELTA*2.
      DELTAH=DELTA*SQRT(5.)

      DO K=1,NZ-1
         CALL PDFX_PARA(W(1,1,K),WKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(W(1,1,K),WPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
      ENDDO
      
      DO K=1,NZ
         
         CALL PDFX_PARA(U(1,1,K),UKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),UPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFX_PARA(V(1,1,K),VKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYEND

               IF(K.EQ.1) THEN
                  UZETA(I,J)=(U(I,J,2)-U(I,J,1))/DZ(1)
                  VZETA(I,J)=(V(I,J,2)-V(I,J,1))/DZ(1)
                  WZETA(I,J)=(W(I,J,2)-W(I,J,1))/(DZ(1)+DZ(2)/2.0)
                  WWKSI=WKSI(I,J,K)
                  WWPHI=WPHI(I,J,K)
               ELSE IF(K.EQ.2) THEN
                  UZETA(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
     1                 /(3.*DZ(2))
                  VZETA(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
     1                 /(3.*DZ(2))
                  WZETA(I,J)=(W(I,J,2)-W(I,J,1))/(DZ(2)/2.+DZ(1))
                  WWKSI=(WKSI(I,J,2)+WKSI(I,J,1))/2.0
                  WWPHI=(WPHI(I,J,2)+WPHI(I,J,1))/2.0
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(NZ-2)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ELSE IF(K.EQ.NZ) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ-1)-W(I,J,NZ-2))/DZ(NZ-2)
                  WWKSI=WKSI(I,J,NZ-1)
                  WWPHI=WPHI(I,J,NZ-1)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/(DZ(K)/2.+DZ(K-1)/2.)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ENDIF

               S11(I,J,K)=UKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZETA(I,J)
               S12(I,J,K)=0.5*(UPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     &              *UZETA(I,J)+VKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     &              *VZETA(I,J))
               S13(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WWKSI
     &              +(HXR(I,J)-ZZ(K)*EXR(I,J))*WZETA(I,J))
               S22(I,J,K)=VPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZETA(I,J)
               S23(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WWPHI
     &              +(HYR(I,J)-ZZ(K)*EYR(I,J))*WZETA(I,J))
               S33(I,J,K)=HER(I,J)*WZETA(I,J)

            ENDDO
         ENDDO

      ENDDO

      K=1
      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,K)=0.0
         ENDDO
      ENDDO
      NUTA(K)=0.0

      DO K=1,NZ-1
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,W(1,1,K),WF(1,1,K))
      ENDDO

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYEND
               SS(I,J)=SQRT(2.0*(S11(I,J,K)**2+2.*S12(I,J,K)**2
     &              +2.*S13(I,J,K)**2+S22(I,J,K)**2+2.*S23(I,J,K)**2
     &              +S33(I,J,K)**2))
               SS11(I,J)=SS(I,J)*S11(I,J,K)
               SS12(I,J)=SS(I,J)*S12(I,J,K)
               SS13(I,J)=SS(I,J)*S13(I,J,K)
               SS22(I,J)=SS(I,J)*S22(I,J,K)
               SS23(I,J)=SS(I,J)*S23(I,J,K)
               SS33(I,J)=SS(I,J)*S33(I,J,K)
            ENDDO
         ENDDO

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS11,SS11F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS12,SS12F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS13,SS13F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS22,SS22F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS23,SS23F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS33,SS33F)

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S11(1,1,K),S11F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S12(1,1,K),S12F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S13(1,1,K),S13F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S22(1,1,K),S22F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S23(1,1,K),S23F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S33(1,1,K),S33F)
         
         DO I=1,NXMOD
            DO J=1,NYEND
               SSF(I,J)=SQRT(2.0*(S11F(I,J)**2+2.*S12F(I,J)**2
     &              +2.*S13F(I,J)**2+S22F(I,J)**2+2.*S23F(I,J)**2
     &              +S33F(I,J)**2))
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYEND
               M11(I,J)=2.*DELTA**2*SS11F(I,J)-2.*DELTAH**2*SSF(I,J)
     &              *S11F(I,J)
               M12(I,J)=2.*DELTA**2*SS12F(I,J)-2.*DELTAH**2*SSF(I,J)
     &              *S12F(I,J)
               M13(I,J)=2.*DELTA**2*SS13F(I,J)-2.*DELTAH**2*SSF(I,J)
     &              *S13F(I,J)
               M22(I,J)=2.*DELTA**2*SS22F(I,J)-2.*DELTAH**2*SSF(I,J)
     &              *S22F(I,J)
               M23(I,J)=2.*DELTA**2*SS23F(I,J)-2.*DELTAH**2*SSF(I,J)
     &              *S23F(I,J)
               M33(I,J)=2.*DELTA**2*SS33F(I,J)-2.*DELTAH**2*SSF(I,J)
     &              *S33F(I,J)

               UU11(I,J)=U(I,J,K)*U(I,J,K)
               UU12(I,J)=U(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU13(I,J)=U(I,J,K)*W(I,J,K-1)
               ELSE
                  UU13(I,J)=U(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               UU22(I,J)=V(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU23(I,J)=V(I,J,K)*W(I,J,K-1)
               ELSE
                  UU23(I,J)=V(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               IF(K.EQ.NZ) THEN
                  UU33(I,J)=W(I,J,K-1)*W(I,J,K-1)
               ELSE
                  UU33(I,J)=((W(I,J,K)+W(I,J,K-1))/2.0)**2
               ENDIF
            ENDDO
         ENDDO

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU11,UU11F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU12,UU12F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU13,UU13F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU22,UU22F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU23,UU23F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU33,UU33F)
         
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,U(1,1,K),UF)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,V(1,1,K),VF)
         
         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.NZ) THEN
                  WF0(I,J)=WF(I,J,NZ-1)
               ELSE
                  WF0(I,J)=(WF(I,J,K)+WF(I,J,K-1))/2.0
               ENDIF
               L11(I,J)=UU11F(I,J)-UF(I,J)*UF(I,J)
               L12(I,J)=UU12F(I,J)-UF(I,J)*VF(I,J)
               L13(I,J)=UU13F(I,J)-UF(I,J)*WF0(I,J)
               L22(I,J)=UU22F(I,J)-VF(I,J)*VF(I,J)
               L23(I,J)=UU23F(I,J)-VF(I,J)*WF0(I,J)
               L33(I,J)=UU33F(I,J)-WF0(I,J)*WF0(I,J)
            ENDDO
         ENDDO
         
         MLP=0.0
         MMP=0.0
         DO I=1,NXMOD
            ML=0.
            MM=0.
            DO J=1,NYEND
               MLT=M11(I,J)*L11(I,J)+2.*M12(I,J)*L12(I,J)+2.*M13(I,J)
     &              *L13(I,J)+M22(I,J)*L22(I,J)+2.*M23(I,J)*L23(I,J)
     &              +M33(I,J)*L33(I,J)
               ML=ML+MLT
               MMT=M11(I,J)*M11(I,J)+2.*M12(I,J)*M12(I,J)+2.*M13(I,J)
     &              *M13(I,J)+M22(I,J)*M22(I,J)+2.*M23(I,J)*M23(I,J)
     &              +M33(I,J)*M33(I,J)
               MM=MM+MMT
               
               CSD(I,J,K)=MLT/MMT

               IF(IVANDRIEST.EQ.1) THEN
                  IF(ZZ(K).LE.0.5) THEN
                     CSD(I,J,K)=(CS0*(1-EXP(-ZZ(K)*RESBOT/0.5/APLUS)))
     1                    **2
                  ELSE
                     CSD(I,J,K)=(CS0*(1-EXP((ZZ(K)-1)*RESTOP/0.5
     &                    /APLUS)))**2
                  ENDIF
               ENDIF
            ENDDO

            MLP=MLP+ML
            MMP=MMP+MM

            CALL MPI_ALLREDUCE(ML,MLR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
            CALL MPI_ALLREDUCE(MM,MMR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
            MLA(I,K)=MLR
            MMA(I,K)=MMR
            CS(I,K)=MLR/MMR

            IF(IVANDRIEST.EQ.1) THEN
               IF(ZZ(K).LE.0.5) THEN
                  CS(I,K)=(CS0*(1-EXP(-ZZ(K)*RESBOT/0.5/APLUS)))**2
               ELSE
                  CS(I,K)=(CS0*(1-EXP((ZZ(K)-1)*RESTOP/0.5/APLUS)))**2
               ENDIF
            ENDIF
            
         ENDDO

         CALL MPI_ALLREDUCE(MLP,MLR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CALL MPI_ALLREDUCE(MMP,MMR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CSP(K)=MLR/MMR

         IF(IVANDRIEST.EQ.1) THEN
            IF(ZZ(K).LE.0.5) THEN
               CSP(K)=(CS0*(1-EXP(-ZZ(K)*RESBOT/0.5/APLUS)))**2
            ELSE
               CSP(K)=(CS0*(1-EXP((ZZ(K)-1)*RESTOP/0.5/APLUS)))**2
            ENDIF
         ENDIF
         
         IF(ICSC.EQ.1) THEN
            IF(CSP(K).LT.0) THEN
               CSP(K)=0.0
            ENDIF
         ENDIF

         NUTA(K)=0.0
         DO I=1,NXMOD
            DO J=1,NYEND
               NUT(I,J,K)=CSP(K)*DELTA**2*SS(I,J)

               IF(IWAVEBOT.EQ.1) THEN
                  IF(ZZ(K).LT.ZCS0) THEN
                     IF(I.GT.2 .AND. I.LT.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(I+2,K))/
     &                       (MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)+MMA(I+1,K)
     &                       +MMA(I+2,K))
                     ELSEIF(I.EQ.1) THEN
                        CSTMP=(MLA(NXMOD-1,K)+MLA(NXMOD,K)+MLA(I,K)
     &                       +MLA(I+1,K)+MLA(I+2,K))/
     &                       (MMA(NXMOD-1,K)+MMA(NXMOD,K)+MMA(I,K)
     &                       +MMA(I+1,K)+MMA(I+2,K))
                     ELSEIF(I.EQ.2) THEN
                        CSTMP=(MLA(NXMOD,K)+MLA(1,K)+MLA(2,K)+MLA(3,K)
     &                       +MLA(4,K))/(MMA(NXMOD,K)+MMA(1,K)+MMA(2,K)
     &                       +MMA(3,K)+MMA(4,K))
                     ELSEIF(I.EQ.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(1,K))/(MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)
     &                       +MMA(I+1,K)+MMA(1,K))
                     ELSE
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(1,K)
     &                       +MLA(2,K))/(MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)
     &                       +MMA(1,K)+MMA(2,K))
                     ENDIF
                     IF(CSTMP.GT.0.0) THEN
                        NUT(I,J,K)=CSTMP*DELTA**2*SS(I,J)
                     ELSE
                        NUT(I,J,K)=0.0
                     ENDIF
                     CSA(I,K)=CSTMP
                  ENDIF
               ENDIF

               NUTA(K)=NUTA(K)+NUT(I,J,K)
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(NUTA(K),NUTAR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)

         NUTA(K)=NUTAR/NXMOD/NYMOD

      ENDDO

      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,NZ+1)=2.*NUT(I,J,NZ)-NUT(I,J,NZ-1)
            S11(I,J,NZ+1)=2.*S11(I,J,NZ)-S11(I,J,NZ-1)
            S12(I,J,NZ+1)=2.*S12(I,J,NZ)-S12(I,J,NZ-1)
            S13(I,J,NZ+1)=2.*S13(I,J,NZ)-S13(I,J,NZ-1)
            S22(I,J,NZ+1)=2.*S22(I,J,NZ)-S22(I,J,NZ-1)
            S23(I,J,NZ+1)=2.*S23(I,J,NZ)-S23(I,J,NZ-1)
            S33(I,J,NZ+1)=2.*S33(I,J,NZ)-S33(I,J,NZ-1)
         ENDDO
      ENDDO
      NUTA(NZ+1)=2.*NUTA(NZ)-NUTA(NZ-1)

      RETURN
      END

C=====SUBROUTINE GETNUT END HERE







C=======================================================================
      SUBROUTINE GETNUTW(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZW,
     &     HER,HXR,EXR,HYR,EYR,U,V,W,DELTA,ICSC,PEX,PEY,WORK,TRIGSX,
     &     TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,NUTW,NUTWA,IVANDRIEST,
     &     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0)
C------------------------------
C     CALCULATE NUW_T AND <NUW_T> AND SW_IJ
C------------------------------
      IMPLICIT NONE
      INCLUDE "mpif.h"

      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      REAL NUTW(NXMAX,NYMAX/NCPU,*),NUTWA(*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S33(NXMAX,NYMAX/NCPU,*)
      REAL DELTA,DELTA2,DELTAH

      REAL DZ(*),ZW(*)
      REAL HER(NXMAX,*),HXR(NXMAX,*),EXR(NXMAX,*)
      REAL HYR(NXMAX,*),EYR(NXMAX,*)
      REAL PEX,PEY
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX),NUTAR
      INTEGER ICSC
      REAL UKSI(NXMAX,NYMAX/NCPU,NZMAX),UPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VKSI(NXMAX,NYMAX/NCPU,NZMAX),VPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UF(NXMAX,NYMAX/NCPU,NZMAX),VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WKSI(NXMAX,NYMAX/NCPU,NZMAX),WPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UZETA(NXMAX,NYMAX/NCPU),VZETA(NXMAX,NYMAX/NCPU)
      REAL WZETA(NXMAX,NYMAX/NCPU),UKSI2D(NXMAX,NYMAX/NCPU)
      REAL UPHI2D(NXMAX,NYMAX/NCPU),VKSI2D(NXMAX,NYMAX/NCPU)
      REAL VPHI2D(NXMAX,NYMAX/NCPU),WKSI2D(NXMAX,NYMAX/NCPU)
      REAL WPHI2D(NXMAX,NYMAX/NCPU)
      REAL UU11(NXMAX,NYMAX/NCPU),UU12(NXMAX,NYMAX/NCPU)
      REAL UU13(NXMAX,NYMAX/NCPU),UU22(NXMAX,NYMAX/NCPU)
      REAL UU23(NXMAX,NYMAX/NCPU),UU33(NXMAX,NYMAX/NCPU)
      REAL UU11F(NXMAX,NYMAX/NCPU),UU12F(NXMAX,NYMAX/NCPU)
      REAL UU13F(NXMAX,NYMAX/NCPU),UU22F(NXMAX,NYMAX/NCPU)
      REAL UU23F(NXMAX,NYMAX/NCPU),UU33F(NXMAX,NYMAX/NCPU)
      REAL S11F(NXMAX,NYMAX/NCPU),S12F(NXMAX,NYMAX/NCPU)
      REAL S13F(NXMAX,NYMAX/NCPU),S22F(NXMAX,NYMAX/NCPU)
      REAL S23F(NXMAX,NYMAX/NCPU),S33F(NXMAX,NYMAX/NCPU)
      REAL SS(NXMAX,NYMAX/NCPU),SSF(NXMAX,NYMAX/NCPU)
      REAL SS11(NXMAX,NYMAX/NCPU),SS12(NXMAX,NYMAX/NCPU)
      REAL SS13(NXMAX,NYMAX/NCPU),SS22(NXMAX,NYMAX/NCPU)
      REAL SS23(NXMAX,NYMAX/NCPU),SS33(NXMAX,NYMAX/NCPU)
      REAL SS11F(NXMAX,NYMAX/NCPU),SS12F(NXMAX,NYMAX/NCPU)
      REAL SS13F(NXMAX,NYMAX/NCPU),SS22F(NXMAX,NYMAX/NCPU)
      REAL SS23F(NXMAX,NYMAX/NCPU),SS33F(NXMAX,NYMAX/NCPU)
      REAL M11(NXMAX,NYMAX/NCPU),M12(NXMAX,NYMAX/NCPU)
      REAL M13(NXMAX,NYMAX/NCPU),M22(NXMAX,NYMAX/NCPU)
      REAL M23(NXMAX,NYMAX/NCPU),M33(NXMAX,NYMAX/NCPU)
      REAL L11(NXMAX,NYMAX/NCPU),L12(NXMAX,NYMAX/NCPU)
      REAL L13(NXMAX,NYMAX/NCPU),L22(NXMAX,NYMAX/NCPU)
      REAL L23(NXMAX,NYMAX/NCPU),L33(NXMAX,NYMAX/NCPU)
      REAL MM,ML,MMR,MLR,MMT,MLT,MMP,MLP

      INTEGER IVANDRIEST
      REAL RESTOP,RESBOT,APLUS,CS0
      INTEGER IWAVEBOT
      REAL ZCS0
      REAL CSTMP,MLA(NXMAX,NZMAX),MMA(NXMAX,NZMAX),CSA(NXMAX,NZMAX)

      INTEGER I,J,K,MYID,IERR,NYEND
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      IF((MYID+1)*NYMAX/NCPU.LE.NYMOD) THEN
         NYEND=NYMAX/NCPU
      ELSEIF(MYID*NYMAX/NCPU.GT.NYMOD) THEN
         NYEND=0
      ELSE
         NYEND=NYMOD-MYID*NYMAX/NCPU
      ENDIF
      DELTA2=DELTA*2.
      DELTAH=DELTA*SQRT(5.)

      DO K=1,NZ
         CALL PDFX_PARA(U(1,1,K),UKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),UPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFX_PARA(V(1,1,K),VKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,U(1,1,K),UF(1,1,K))
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,V(1,1,K),VF(1,1,K))
      ENDDO

      DO K=1,NZ-1
         CALL PDFX_PARA(W(1,1,K),WKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(W(1,1,K),WPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,W(1,1,K),WF(1,1,K))         
      ENDDO

      DO K=1,NZ-1
         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.1) THEN
                  UZETA(I,J)=(U(I,J,2)-U(I,J,1))/DZ(1)
                  VZETA(I,J)=(V(I,J,2)-V(I,J,1))/DZ(1)
                  WZETA(I,J)=(W(I,J,2)-W(I,J,1))/(DZ(1)+DZ(2)/2.0)
                  UKSI2D(I,J)=UKSI(I,J,1)
                  UPHI2D(I,J)=UPHI(I,J,1)
                  VKSI2D(I,J)=VKSI(I,J,1)
                  VPHI2D(I,J)=VPHI(I,J,1)
                  WKSI2D(I,J)=WKSI(I,J,1)
                  WPHI2D(I,J)=WPHI(I,J,1)
               ELSE IF(K.EQ.2) THEN
                  UZETA(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  VZETA(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
                  WZETA(I,J)=(W(I,J,3)-W(I,J,1))/(DZ(3)/2.+DZ(2)+DZ(1))
                  UKSI2D(I,J)=(UKSI(I,J,3)+UKSI(I,J,2))/2.0
                  UPHI2D(I,J)=(UPHI(I,J,3)+UPHI(I,J,2))/2.0
                  VKSI2D(I,J)=(VKSI(I,J,3)+VKSI(I,J,2))/2.0
                  VPHI2D(I,J)=(VPHI(I,J,3)+VPHI(I,J,2))/2.0
                  WKSI2D(I,J)=WKSI(I,J,2)
                  WPHI2D(I,J)=WPHI(I,J,2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ-1)-W(I,J,NZ-2))/DZ(NZ-2)
                  UKSI2D(I,J)=UKSI(I,J,NZ)
                  UPHI2D(I,J)=UPHI(I,J,NZ)
                  VKSI2D(I,J)=VKSI(I,J,NZ)
                  VPHI2D(I,J)=VPHI(I,J,NZ)
                  WKSI2D(I,J)=WKSI(I,J,NZ-1)
                  WPHI2D(I,J)=WPHI(I,J,NZ-1)
               ELSE IF(K.EQ.(NZ-2)) THEN
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)+DZ(K)
     &                 +DZ(K-1)/2.)
                  UKSI2D(I,J)=(UKSI(I,J,K+1)+UKSI(I,J,K))/2.0
                  UPHI2D(I,J)=(UPHI(I,J,K+1)+UPHI(I,J,K))/2.0
                  VKSI2D(I,J)=(VKSI(I,J,K+1)+VKSI(I,J,K))/2.0
                  VPHI2D(I,J)=(VPHI(I,J,K+1)+VPHI(I,J,K))/2.0
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)/2.+DZ(K)
     &                 +DZ(K-1)/2.)
                  UKSI2D(I,J)=(UKSI(I,J,K+1)+UKSI(I,J,K))/2.0
                  UPHI2D(I,J)=(UPHI(I,J,K+1)+UPHI(I,J,K))/2.0
                  VKSI2D(I,J)=(VKSI(I,J,K+1)+VKSI(I,J,K))/2.0
                  VPHI2D(I,J)=(VPHI(I,J,K+1)+VPHI(I,J,K))/2.0
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ENDIF

               S11(I,J,K)=UKSI2D(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))
     &              *UZETA(I,J)
               S12(I,J,K)=0.5*(UPHI2D(I,J)+(HYR(I,J)-ZW(K)*
     &              EYR(I,J))*UZETA(I,J)+VKSI2D(I,J)+(HXR(I,J)-
     &              ZW(K)*EXR(I,J))*VZETA(I,J))
               S13(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WKSI2D(I,J)+
     &              (HXR(I,J)-ZW(K)*EXR(I,J))*WZETA(I,J))
               S22(I,J,K)=VPHI2D(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))
     &              *VZETA(I,J)
               S23(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WPHI2D(I,J)+
     &              (HYR(I,J)-ZW(K)*EYR(I,J))*WZETA(I,J))
               S33(I,J,K)=HER(I,J)*WZETA(I,J)

            ENDDO
         ENDDO

      ENDDO

      K=1
      DO I=1,NXMOD
         DO J=1,NYEND
            NUTW(I,J,K)=0.0
         ENDDO
      ENDDO
      NUTWA(K)=0.0

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYEND
               SS(I,J)=SQRT(2.0*(S11(I,J,K)**2+2.*S12(I,J,K)**2
     &              +2.*S13(I,J,K)**2+S22(I,J,K)**2+2.*S23(I,J,K)**2
     &              +S33(I,J,K)**2))
               SS11(I,J)=SS(I,J)*S11(I,J,K)
               SS12(I,J)=SS(I,J)*S12(I,J,K)
               SS13(I,J)=SS(I,J)*S13(I,J,K)
               SS22(I,J)=SS(I,J)*S22(I,J,K)
               SS23(I,J)=SS(I,J)*S23(I,J,K)
               SS33(I,J)=SS(I,J)*S33(I,J,K)
            ENDDO
         ENDDO

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS11,SS11F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS12,SS12F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS13,SS13F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS22,SS22F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS23,SS23F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,SS33,SS33F)

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S11(1,1,K),S11F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S12(1,1,K),S12F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S13(1,1,K),S13F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S22(1,1,K),S22F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S23(1,1,K),S23F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,S33(1,1,K),S33F)
         
         DO I=1,NXMOD
            DO J=1,NYEND
               SSF(I,J)=SQRT(2.0*(S11F(I,J)**2+2.*S12F(I,J)**2
     &              +2.*S13F(I,J)**2+S22F(I,J)**2+2.*S23F(I,J)**2
     &              +S33F(I,J)**2))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               M11(I,J)=DELTA**2*SS11F(I,J)-DELTAH**2*SSF(I,J)*S11F(I,J)
               M12(I,J)=DELTA**2*SS12F(I,J)-DELTAH**2*SSF(I,J)*S12F(I,J)
               M13(I,J)=DELTA**2*SS13F(I,J)-DELTAH**2*SSF(I,J)*S13F(I,J)
               M22(I,J)=DELTA**2*SS22F(I,J)-DELTAH**2*SSF(I,J)*S22F(I,J)
               M23(I,J)=DELTA**2*SS23F(I,J)-DELTAH**2*SSF(I,J)*S23F(I,J)
               M33(I,J)=DELTA**2*SS33F(I,J)-DELTAH**2*SSF(I,J)*S33F(I,J)
               M11(I,J)=2.*M11(I,J)
               M12(I,J)=2.*M12(I,J)
               M13(I,J)=2.*M13(I,J)
               M22(I,J)=2.*M22(I,J)
               M23(I,J)=2.*M23(I,J)
               M33(I,J)=2.*M33(I,J)
               IF(K.EQ.1) THEN
                  UU11(I,J)=U(I,J,K)*U(I,J,K)
                  UU12(I,J)=U(I,J,K)*V(I,J,K)
                  UU13(I,J)=U(I,J,K)*W(I,J,K)
                  UU22(I,J)=V(I,J,K)*V(I,J,K)
                  UU23(I,J)=V(I,J,K)*W(I,J,K)
                  UU33(I,J)=W(I,J,K)*W(I,J,K)
               ELSE IF(K.EQ.NZ-1) THEN
                  UU11(I,J)=U(I,J,NZ)*U(I,J,NZ)
                  UU12(I,J)=U(I,J,NZ)*V(I,J,NZ)
                  UU13(I,J)=U(I,J,NZ)*W(I,J,NZ-1)
                  UU22(I,J)=V(I,J,NZ)*V(I,J,NZ)
                  UU23(I,J)=V(I,J,NZ)*W(I,J,NZ-1)
                  UU33(I,J)=W(I,J,NZ-1)*W(I,J,NZ-1)                  
               ELSE
                  UU11(I,J)=(U(I,J,K)+U(I,J,K+1))**2/4.
                  UU12(I,J)=(U(I,J,K)+U(I,J,K+1))*(V(I,J,K)+V(I,J,K+1))
     &                 /4.
                  UU13(I,J)=(U(I,J,K)+U(I,J,K+1))*W(I,J,K)/2.
                  UU22(I,J)=(V(I,J,K)+V(I,J,K+1))**2/4.
                  UU23(I,J)=(V(I,J,K)+V(I,J,K+1))*W(I,J,K)/2.
                  UU33(I,J)=W(I,J,K)**2
               ENDIF
            ENDDO
         ENDDO

         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU11,UU11F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU12,UU12F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU13,UU13F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU22,UU22F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU23,UU23F)
         CALL LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &        IFAX,TRIGSX,TRIGSY,DELTA2,PEX,PEY,UU33,UU33F)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.1) THEN
                  L11(I,J)=UU11F(I,J)-UF(I,J,K)*UF(I,J,K)
                  L12(I,J)=UU12F(I,J)-UF(I,J,K)*VF(I,J,K)
                  L13(I,J)=UU13F(I,J)-UF(I,J,K)*WF(I,J,K)
                  L22(I,J)=UU22F(I,J)-VF(I,J,K)*VF(I,J,K)
                  L23(I,J)=UU23F(I,J)-VF(I,J,K)*WF(I,J,K)
                  L33(I,J)=UU33F(I,J)-WF(I,J,K)*WF(I,J,K)
               ELSE IF(K.EQ.NZ-1) THEN
                  L11(I,J)=UU11F(I,J)-UF(I,J,NZ)*UF(I,J,NZ)
                  L12(I,J)=UU12F(I,J)-UF(I,J,NZ)*VF(I,J,NZ)
                  L13(I,J)=UU13F(I,J)-UF(I,J,NZ)*WF(I,J,NZ-1)
                  L22(I,J)=UU22F(I,J)-VF(I,J,NZ)*VF(I,J,NZ)
                  L23(I,J)=UU23F(I,J)-VF(I,J,NZ)*WF(I,J,NZ-1)
                  L33(I,J)=UU33F(I,J)-WF(I,J,NZ-1)*WF(I,J,NZ-1)
               ELSE
                  L11(I,J)=UU11F(I,J)-(UF(I,J,K)+UF(I,J,K+1))**2/4.
                  L12(I,J)=UU12F(I,J)-(UF(I,J,K)+UF(I,J,K+1))
     &                 *(VF(I,J,K)+VF(I,J,K+1))/4.
                  L13(I,J)=UU13F(I,J)-(UF(I,J,K)+UF(I,J,K+1))
     &                 *WF(I,J,K)/2.
                  L22(I,J)=UU22F(I,J)-(VF(I,J,K)+VF(I,J,K+1))**2/4.
                  L23(I,J)=UU23F(I,J)-(VF(I,J,K)+VF(I,J,K+1))
     &                 *WF(I,J,K)/2.
                  L33(I,J)=UU33F(I,J)-WF(I,J,K)**2
               ENDIF
            ENDDO
         ENDDO

         MLP=0.0
         MMP=0.0
         DO I=1,NXMOD
            ML=0.
            MM=0.
            DO J=1,NYEND
               MLT=M11(I,J)*L11(I,J)+2*M12(I,J)*L12(I,J)+2*M13(I,J)
     &              *L13(I,J)+M22(I,J)*L22(I,J)+2*M23(I,J)*L23(I,J)
     &              +M33(I,J)*L33(I,J)
               ML=ML+MLT
               MMT=M11(I,J)*M11(I,J)+2*M12(I,J)*M12(I,J)+2*M13(I,J)
     &              *M13(I,J)+M22(I,J)*M22(I,J)+2*M23(I,J)*M23(I,J)
     &              +M33(I,J)*M33(I,J)
               MM=MM+MMT

               CSD(I,J,K)=MLT/MMT
            ENDDO

            MLP=MLP+ML
            MMP=MMP+MM
            CALL MPI_ALLREDUCE(ML,MLR,1,MPI_DOUBLE_PRECISION,
     &           MPI_SUM,MPI_COMM_WORLD,IERR)
            CALL MPI_ALLREDUCE(MM,MMR,1,MPI_DOUBLE_PRECISION,
     &           MPI_SUM,MPI_COMM_WORLD,IERR)
            CS(I,K)=MLR/MMR
         ENDDO

         CALL MPI_ALLREDUCE(MLP,MLR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CALL MPI_ALLREDUCE(MMP,MMR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CSP(K)=MLR/MMR

         IF(IVANDRIEST.EQ.1) THEN
            IF(ZW(K).LE.0.5) THEN
               CSP(K)=(0.1*(1-EXP(-ZW(K)*RESBOT/0.5/APLUS)))**2
            ELSE
               CSP(K)=(0.1*(1-EXP((ZW(K)-1)*RESTOP/0.5/APLUS)))**2
            ENDIF
         ENDIF
         
         IF(ICSC.EQ.1) THEN
            IF(CSP(K).LT.0) THEN
               CSP(K)=0.0
            ENDIF
         ENDIF

         NUTWA(K)=0.0
         DO I=1,NXMOD
            DO J=1,NYEND
               NUTW(I,J,K)=CSP(K)*DELTA**2*SS(I,J)

               IF(IWAVEBOT.EQ.1) THEN
                  IF(ZW(K).LT.ZCS0) THEN
                     IF(I.GT.2 .AND. I.LT.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(I+2,K))/
     &                       (MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)+MMA(I+1,K)
     &                       +MMA(I+2,K))
                     ELSEIF(I.EQ.1) THEN
                        CSTMP=(MLA(NXMOD-1,K)+MLA(NXMOD,K)+MLA(I,K)
     &                       +MLA(I+1,K)+MLA(I+2,K))/
     &                       (MMA(NXMOD-1,K)+MMA(NXMOD,K)+MMA(I,K)
     &                       +MMA(I+1,K)+MMA(I+2,K))
                     ELSEIF(I.EQ.2) THEN
                        CSTMP=(MLA(NXMOD,K)+MLA(1,K)+MLA(2,K)+MLA(3,K)
     &                       +MLA(4,K))/(MMA(NXMOD,K)+MMA(1,K)+MMA(2,K)
     &                       +MMA(3,K)+MMA(4,K))
                     ELSEIF(I.EQ.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(1,K))/
     &                       (MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)+MMA(I+1,K)
     &                       +MMA(1,K))
                     ELSE
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(1,K)
     &                       +MLA(2,K))/(MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)
     &                       +MMA(1,K)+MMA(2,K))
                     ENDIF
                     IF(CSTMP.GT.0.0) THEN
                        NUTW(I,J,K)=CSTMP*DELTA**2*SS(I,J)
                     ELSE
                        NUTW(I,J,K)=0.0
                     ENDIF
                  ENDIF
               ENDIF

               NUTWA(K)=NUTWA(K)+NUTW(I,J,K)
            ENDDO
         ENDDO
         CALL MPI_ALLREDUCE(NUTWA(K),NUTAR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         NUTWA(K)=NUTAR/NXMOD/NYMOD

      ENDDO

      DO I=1,NXMOD
         DO J=1,NYEND
            NUTW(I,J,NZ)=2.*NUTW(I,J,NZ-1)-NUTW(I,J,NZ-2)
            S11(I,J,NZ)=2.*S11(I,J,NZ-1)-S11(I,J,NZ-2)
            S12(I,J,NZ)=2.*S12(I,J,NZ-1)-S12(I,J,NZ-2)
            S13(I,J,NZ)=2.*S13(I,J,NZ-1)-S13(I,J,NZ-2)
            S22(I,J,NZ)=2.*S22(I,J,NZ-1)-S22(I,J,NZ-2)
            S23(I,J,NZ)=2.*S23(I,J,NZ-1)-S23(I,J,NZ-2)
            S33(I,J,NZ)=2.*S33(I,J,NZ-1)-S33(I,J,NZ-2)
         ENDDO
      ENDDO
      NUTWA(NZ)=2.*NUTWA(NZ-1)-NUTWA(NZ-2)
      
      RETURN
      END

C=====SUBROUTINE GETNUTW END HERE









C=======================================================================
      SUBROUTINE GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1     DZ,ZZ,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,
     1     IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,
     1     DELTAX,DELTAY,UF,VF,WF,MFILT)
C------------------------------
C     CALCULATE NU_T AND <NU_T> AND S_IJ
C------------------------------
      IMPLICIT NONE
      INCLUDE "mpif.h"
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S33(NXMAX,NYMAX/NCPU,*)

      REAL DZ(*),ZZ(*)
      REAL HER(NXMAX,*),HXR(NXMAX,*),EXR(NXMAX,*)
      REAL HYR(NXMAX,*),EYR(NXMAX,*)
      REAL PEX,PEY
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX),NUTAR
      REAL UKSI(NXMAX,NYMAX/NCPU),UPHI(NXMAX,NYMAX/NCPU)
      REAL VKSI(NXMAX,NYMAX/NCPU),VPHI(NXMAX,NYMAX/NCPU)
      REAL WKSI(NXMAX,NYMAX/NCPU,NZMAX),WPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WWKSI,WWPHI
      REAL UF(NXMAX,NYMAX/NCPU,*),VF(NXMAX,NYMAX/NCPU,*)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX),WF0(NXMAX,NYMAX/NCPU)
      REAL UZETA(NXMAX,NYMAX/NCPU),VZETA(NXMAX,NYMAX/NCPU)
      REAL WZETA(NXMAX,NYMAX/NCPU),UKSI2D(NXMAX,NYMAX/NCPU)
      REAL UPHI2D(NXMAX,NYMAX/NCPU),VKSI2D(NXMAX,NYMAX/NCPU)
      REAL VPHI2D(NXMAX,NYMAX/NCPU),WKSI2D(NXMAX,NYMAX/NCPU)
      REAL WPHI2D(NXMAX,NYMAX/NCPU)
      REAL UU11(NXMAX,NYMAX/NCPU),UU12(NXMAX,NYMAX/NCPU)
      REAL UU13(NXMAX,NYMAX/NCPU),UU22(NXMAX,NYMAX/NCPU)
      REAL UU23(NXMAX,NYMAX/NCPU),UU33(NXMAX,NYMAX/NCPU)
      REAL UU11F(NXMAX,NYMAX/NCPU),UU12F(NXMAX,NYMAX/NCPU)
      REAL UU13F(NXMAX,NYMAX/NCPU),UU22F(NXMAX,NYMAX/NCPU)
      REAL UU23F(NXMAX,NYMAX/NCPU),UU33F(NXMAX,NYMAX/NCPU)
      REAL SS(NXMAX,NYMAX/NCPU),SSF(NXMAX,NYMAX/NCPU)
      REAL SS11(NXMAX,NYMAX/NCPU),SS12(NXMAX,NYMAX/NCPU)
      REAL SS13(NXMAX,NYMAX/NCPU),SS22(NXMAX,NYMAX/NCPU)
      REAL SS23(NXMAX,NYMAX/NCPU),SS33(NXMAX,NYMAX/NCPU)
      REAL SS11F(NXMAX,NYMAX/NCPU),SS12F(NXMAX,NYMAX/NCPU)
      REAL SS13F(NXMAX,NYMAX/NCPU),SS22F(NXMAX,NYMAX/NCPU)
      REAL SS23F(NXMAX,NYMAX/NCPU),SS33F(NXMAX,NYMAX/NCPU)
      REAL M11(NXMAX,NYMAX/NCPU),M12(NXMAX,NYMAX/NCPU)
      REAL M13(NXMAX,NYMAX/NCPU),M22(NXMAX,NYMAX/NCPU)
      REAL M23(NXMAX,NYMAX/NCPU),M33(NXMAX,NYMAX/NCPU)
      REAL L11(NXMAX,NYMAX/NCPU),L12(NXMAX,NYMAX/NCPU)
      REAL L13(NXMAX,NYMAX/NCPU),L22(NXMAX,NYMAX/NCPU)
      REAL L23(NXMAX,NYMAX/NCPU),L33(NXMAX,NYMAX/NCPU)
      REAL MM,ML,MMR,MLR,MMP,MLP,MMT,MLT,DELTA,DELTAT

      INTEGER ICSC,IVANDRIEST
      REAL RESTOP,RESBOT,APLUS,CS0
      INTEGER IWAVEBOT
      REAL ZCS0
      REAL CSTMP,MLA(NXMAX,NZMAX),MMA(NXMAX,NZMAX),CSA(NXMAX,NZMAX)

      REAL S11F(NXMAX,NYMAX/NCPU),S12F(NXMAX,NYMAX/NCPU)
      REAL S13F(NXMAX,NYMAX/NCPU),S22F(NXMAX,NYMAX/NCPU)
      REAL S23F(NXMAX,NYMAX/NCPU),S33F(NXMAX,NYMAX/NCPU)

      REAL Z0(NXMAX,*),HBAR

      INTEGER I,J,K,MYID,IERR,NYEND

      REAL DELTAX,DELTAY,DZM
      INTEGER MFILT

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      IF((MYID+1)*NYMAX/NCPU.LE.NYMOD) THEN
         NYEND=NYMAX/NCPU
      ELSEIF(MYID*NYMAX/NCPU.GT.NYMOD) THEN
         NYEND=0
      ELSE
         NYEND=NYMOD-MYID*NYMAX/NCPU
      ENDIF

C---------------------------------------
C     FILTER SIZE FOR DYNAMIC MODEL
C---------------------------------------

      DZM=HBAR/FLOAT(NZ-2)
      DELTA=(DELTAX*DELTAY*DZM)**(1./3.)
      DELTAT=(2.*DELTAX*2.*DELTAY*DZM)**(1./3.)

C-----END HERE

      DO K=1,NZ-1
         CALL PDFX_PARA(W(1,1,K),WKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(W(1,1,K),WPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
      ENDDO
      
      DO K=2,NZ
         
         CALL PDFX_PARA(U(1,1,K),UKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),UPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFX_PARA(V(1,1,K),VKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYEND

               IF(K.EQ.2) THEN
                  UZETA(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
     1                 /(2.*DZ(2))
                  VZETA(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
     1                 /(2.*DZ(2))
                  WZETA(I,J)=(W(I,J,2)-W(I,J,1))/(DZ(2)/2.+DZ(1))
                  WWKSI=(WKSI(I,J,2)+WKSI(I,J,1))/2.0
                  WWPHI=(WPHI(I,J,2)+WPHI(I,J,1))/2.0
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(NZ-2)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ELSE IF(K.EQ.NZ) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ)-W(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WWKSI=WKSI(I,J,NZ-1)
                  WWPHI=WPHI(I,J,NZ-1)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/(DZ(K)/2.+DZ(K-1)/2.)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ENDIF

               S11(I,J,K)=UKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZETA(I,J)
               S12(I,J,K)=0.5*(UPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     &              *UZETA(I,J)+VKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     &              *VZETA(I,J))
               S13(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WWKSI
     &              +(HXR(I,J)-ZZ(K)*EXR(I,J))*WZETA(I,J))
               S22(I,J,K)=VPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZETA(I,J)
               S23(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WWPHI
     &              +(HYR(I,J)-ZZ(K)*EYR(I,J))*WZETA(I,J))
               S33(I,J,K)=HER(I,J)*WZETA(I,J)

            ENDDO
         ENDDO

      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S13,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S22,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S23,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S33,NCPU)
      
      K=1
      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,K)=0.0
         ENDDO
      ENDDO
      NUTA(K)=0.0

      DO K=2,NZ

         DO I=1,NXMOD
            DO J=1,NYEND
               SS(I,J)=SQRT(2.0*(S11(I,J,K)**2+2.*S12(I,J,K)**2
     &              +2.*S13(I,J,K)**2+S22(I,J,K)**2+2.*S23(I,J,K)**2
     &              +S33(I,J,K)**2))
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               SS11(I,J)=SS(I,J)*S11(I,J,K)
               SS12(I,J)=SS(I,J)*S12(I,J,K)
               SS13(I,J)=SS(I,J)*S13(I,J,K)
               SS22(I,J)=SS(I,J)*S22(I,J,K)
               SS23(I,J)=SS(I,J)*S23(I,J,K)
               SS33(I,J)=SS(I,J)*S33(I,J,K)
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS11,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS12,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS13,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS22,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS23,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS33,NCPU)
         
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS11,SS11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS12,SS12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS13,SS13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS22,SS22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS23,SS23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS33,SS33F,MFILT)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S11(1,1,K),S11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S12(1,1,K),S12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S13(1,1,K),S13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S22(1,1,K),S22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S23(1,1,K),S23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S33(1,1,K),S33F,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               SSF(I,J)=SQRT(2.0*(S11F(I,J)**2+2.*S12F(I,J)**2
     &              +2.*S13F(I,J)**2+S22F(I,J)**2+2.*S23F(I,J)**2
     &              +S33F(I,J)**2))
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SSF,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               M11(I,J)=2.*DELTA**2*SS11F(I,J)-2.*DELTAT**2*SSF(I,J)
     &              *S11F(I,J)
               M12(I,J)=2.*DELTA**2*SS12F(I,J)-2.*DELTAT**2*SSF(I,J)
     &              *S12F(I,J)
               M13(I,J)=2.*DELTA**2*SS13F(I,J)-2.*DELTAT**2*SSF(I,J)
     &              *S13F(I,J)
               M22(I,J)=2.*DELTA**2*SS22F(I,J)-2.*DELTAT**2*SSF(I,J)
     &              *S22F(I,J)
               M23(I,J)=2.*DELTA**2*SS23F(I,J)-2.*DELTAT**2*SSF(I,J)
     &              *S23F(I,J)
               M33(I,J)=2.*DELTA**2*SS33F(I,J)-2.*DELTAT**2*SSF(I,J)
     &              *S33F(I,J)

               UU11(I,J)=U(I,J,K)*U(I,J,K)
               UU12(I,J)=U(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU13(I,J)=U(I,J,K)*W(I,J,K-1)
               ELSE
                  UU13(I,J)=U(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               UU22(I,J)=V(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU23(I,J)=V(I,J,K)*W(I,J,K-1)
               ELSE
                  UU23(I,J)=V(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               IF(K.EQ.NZ) THEN
                  UU33(I,J)=W(I,J,K-1)*W(I,J,K-1)
               ELSE
                  UU33(I,J)=((W(I,J,K)+W(I,J,K-1))/2.0)**2
               ENDIF
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M11,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M12,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M13,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M22,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M23,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M33,NCPU)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU11,UU11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU12,UU12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU13,UU13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU22,UU22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU23,UU23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU33,UU33F,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.NZ) THEN
                  WF0(I,J)=WF(I,J,NZ-1)
               ELSE
                  WF0(I,J)=(WF(I,J,K)+WF(I,J,K-1))/2.0
               ENDIF
               L11(I,J)=UU11F(I,J)-UF(I,J,K)*UF(I,J,K)
               L12(I,J)=UU12F(I,J)-UF(I,J,K)*VF(I,J,K)
               L13(I,J)=UU13F(I,J)-UF(I,J,K)*WF0(I,J)
               L22(I,J)=UU22F(I,J)-VF(I,J,K)*VF(I,J,K)
               L23(I,J)=UU23F(I,J)-VF(I,J,K)*WF0(I,J)
               L33(I,J)=UU33F(I,J)-WF0(I,J)*WF0(I,J)
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L11,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L12,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L13,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L22,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L23,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L33,NCPU)

         MLP=0.0
         MMP=0.0
         DO I=1,NXMOD
            ML=0.
            MM=0.
            DO J=1,NYEND
               MLT=M11(I,J)*L11(I,J)+2.*M12(I,J)*L12(I,J)+2.*M13(I,J)
     &              *L13(I,J)+M22(I,J)*L22(I,J)+2.*M23(I,J)*L23(I,J)
     &              +M33(I,J)*L33(I,J)
               ML=ML+MLT
               MMT=M11(I,J)*M11(I,J)+2.*M12(I,J)*M12(I,J)+2.*M13(I,J)
     &              *M13(I,J)+M22(I,J)*M22(I,J)+2.*M23(I,J)*M23(I,J)
     &              +M33(I,J)*M33(I,J)
               MM=MM+MMT
               
               CSD(I,J,K)=MLT/MMT

               IF(IVANDRIEST.EQ.1) THEN
                  CSD(I,J,K)=(CS0*(1-EXP(-ZZ(K)*RESBOT/0.5/APLUS)))**2
               ENDIF
            ENDDO

            MLP=MLP+ML
            MMP=MMP+MM

            CALL MPI_ALLREDUCE(ML,MLR,1,MPI_DOUBLE_PRECISION,
     &           MPI_SUM,MPI_COMM_WORLD,IERR)
            CALL MPI_ALLREDUCE(MM,MMR,1,MPI_DOUBLE_PRECISION,
     &           MPI_SUM,MPI_COMM_WORLD,IERR)
            MLA(I,K)=MLR
            MMA(I,K)=MMR
            CS(I,K)=MLR/MMR

            IF(IVANDRIEST.EQ.1) THEN
               CS(I,K)=(CS0*(1-EXP(-ZZ(K)*RESBOT/0.5/APLUS)))**2
            ENDIF
            
         ENDDO

         CALL MPI_ALLREDUCE(MLP,MLR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CALL MPI_ALLREDUCE(MMP,MMR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CSP(K)=MLR/MMR

         IF(IVANDRIEST.EQ.1) THEN
            CSP(K)=(CS0*(1-EXP(-ZZ(K)*RESBOT/0.5/APLUS)))**2
         ENDIF

CC         IF(ICSC.EQ.1) THEN
CC            IF(CSP(K).LT.0) THEN
CC               CSP(K)=0.0
CC            ENDIF
CC         ENDIF

         NUTA(K)=0.0
         DO I=1,NXMOD
            DO J=1,NYEND

               IF(IVANDRIEST.EQ.2) THEN
                  CSP(K)=((CS0*DELTA)**(-3)+(0.4*(ZZ(K)*HBAR+Z0(I,J)))
     1                 **(-3))**(-2./3.)/DELTA**2
               ENDIF

               IF(ICSC.EQ.1) THEN
                  IF(CSP(K).LT.0) THEN
                     CSP(K)=((CS0*DELTA)**(-3)+(0.4*(ZZ(K)*HBAR
     1                    +Z0(I,J)))**(-3))**(-2./3.)/DELTA**2

                  ENDIF
               ENDIF

               NUT(I,J,K)=CSP(K)*DELTA**2*SS(I,J)

               IF(IWAVEBOT.EQ.1) THEN
                  IF(ZZ(K).LT.ZCS0) THEN
                     IF(I.GT.2 .AND. I.LT.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(I+2,K))/
     &                       (MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)+MMA(I+1,K)
     &                       +MMA(I+2,K))
                     ELSEIF(I.EQ.1) THEN
                        CSTMP=(MLA(NXMOD-1,K)+MLA(NXMOD,K)+MLA(I,K)
     &                       +MLA(I+1,K)+MLA(I+2,K))/
     &                       (MMA(NXMOD-1,K)+MMA(NXMOD,K)+MMA(I,K)
     &                       +MMA(I+1,K)+MMA(I+2,K))
                     ELSEIF(I.EQ.2) THEN
                        CSTMP=(MLA(NXMOD,K)+MLA(1,K)+MLA(2,K)+MLA(3,K)
     &                       +MLA(4,K))/(MMA(NXMOD,K)+MMA(1,K)+MMA(2,K)
     &                       +MMA(3,K)+MMA(4,K))
                     ELSEIF(I.EQ.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(1,K))/(MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)
     &                       +MMA(I+1,K)+MMA(1,K))
                     ELSE
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(1,K)
     &                       +MLA(2,K))/(MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)
     &                       +MMA(1,K)+MMA(2,K))
                     ENDIF
                     IF(CSTMP.GT.0.0) THEN
                        NUT(I,J,K)=CSTMP*DELTA**2*SS(I,J)
                     ELSE
                        NUT(I,J,K)=0.0
                     ENDIF
                     CSA(I,K)=CSTMP
                  ENDIF
               ENDIF

               NUTA(K)=NUTA(K)+NUT(I,J,K)
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(NUTA(K),NUTAR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)

         NUTA(K)=NUTAR/NXMOD/NYMOD

      ENDDO

      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,NZ+1)=NUT(I,J,NZ-1)
            S11(I,J,NZ+1)=S11(I,J,NZ-1)
            S12(I,J,NZ+1)=S12(I,J,NZ-1)
            S13(I,J,NZ+1)=-S13(I,J,NZ-1)
            S22(I,J,NZ+1)=S22(I,J,NZ-1)
            S23(I,J,NZ+1)=-S23(I,J,NZ-1)
            S33(I,J,NZ+1)=S33(I,J,NZ-1)
         ENDDO
      ENDDO
      NUTA(NZ+1)=NUTA(NZ-1)

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,NUT,NCPU)

      RETURN
      END

C=====SUBROUTINE GETNUT_WALLMODEL END HERE







C=======================================================================
      SUBROUTINE GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,
     1     NCPU,DZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,
     1     TRIGSX,TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,NUTW,NUTWA,
     1     IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,
     1     DELTAX,DELTAY,UF,VF,WF,MFILT,CSP)
C------------------------------
C     CALCULATE NUW_T AND <NUW_T> AND SW_IJ
C------------------------------
      IMPLICIT NONE
      INCLUDE "mpif.h"

      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      REAL NUTW(NXMAX,NYMAX/NCPU,*),NUTWA(*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S33(NXMAX,NYMAX/NCPU,*)
      REAL DELTA,DELTAT

      REAL DZ(*),ZW(*)
      REAL HER(NXMAX,*),HXR(NXMAX,*),EXR(NXMAX,*)
      REAL HYR(NXMAX,*),EYR(NXMAX,*)
      REAL PEX,PEY
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX),NUTAR
      INTEGER ICSC
      REAL UKSI(NXMAX,NYMAX/NCPU,NZMAX),UPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VKSI(NXMAX,NYMAX/NCPU,NZMAX),VPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UF(NXMAX,NYMAX/NCPU,NZMAX),VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WKSI(NXMAX,NYMAX/NCPU,NZMAX),WPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UZETA(NXMAX,NYMAX/NCPU),VZETA(NXMAX,NYMAX/NCPU)
      REAL WZETA(NXMAX,NYMAX/NCPU),UKSI2D(NXMAX,NYMAX/NCPU)
      REAL UPHI2D(NXMAX,NYMAX/NCPU),VKSI2D(NXMAX,NYMAX/NCPU)
      REAL VPHI2D(NXMAX,NYMAX/NCPU),WKSI2D(NXMAX,NYMAX/NCPU)
      REAL WPHI2D(NXMAX,NYMAX/NCPU)
      REAL UU11(NXMAX,NYMAX/NCPU),UU12(NXMAX,NYMAX/NCPU)
      REAL UU13(NXMAX,NYMAX/NCPU),UU22(NXMAX,NYMAX/NCPU)
      REAL UU23(NXMAX,NYMAX/NCPU),UU33(NXMAX,NYMAX/NCPU)
      REAL UU11F(NXMAX,NYMAX/NCPU),UU12F(NXMAX,NYMAX/NCPU)
      REAL UU13F(NXMAX,NYMAX/NCPU),UU22F(NXMAX,NYMAX/NCPU)
      REAL UU23F(NXMAX,NYMAX/NCPU),UU33F(NXMAX,NYMAX/NCPU)
      REAL S11F(NXMAX,NYMAX/NCPU),S12F(NXMAX,NYMAX/NCPU)
      REAL S13F(NXMAX,NYMAX/NCPU),S22F(NXMAX,NYMAX/NCPU)
      REAL S23F(NXMAX,NYMAX/NCPU),S33F(NXMAX,NYMAX/NCPU)
      REAL SS(NXMAX,NYMAX/NCPU),SSF(NXMAX,NYMAX/NCPU)
      REAL SS11(NXMAX,NYMAX/NCPU),SS12(NXMAX,NYMAX/NCPU)
      REAL SS13(NXMAX,NYMAX/NCPU),SS22(NXMAX,NYMAX/NCPU)
      REAL SS23(NXMAX,NYMAX/NCPU),SS33(NXMAX,NYMAX/NCPU)
      REAL SS11F(NXMAX,NYMAX/NCPU),SS12F(NXMAX,NYMAX/NCPU)
      REAL SS13F(NXMAX,NYMAX/NCPU),SS22F(NXMAX,NYMAX/NCPU)
      REAL SS23F(NXMAX,NYMAX/NCPU),SS33F(NXMAX,NYMAX/NCPU)
      REAL M11(NXMAX,NYMAX/NCPU),M12(NXMAX,NYMAX/NCPU)
      REAL M13(NXMAX,NYMAX/NCPU),M22(NXMAX,NYMAX/NCPU)
      REAL M23(NXMAX,NYMAX/NCPU),M33(NXMAX,NYMAX/NCPU)
      REAL L11(NXMAX,NYMAX/NCPU),L12(NXMAX,NYMAX/NCPU)
      REAL L13(NXMAX,NYMAX/NCPU),L22(NXMAX,NYMAX/NCPU)
      REAL L23(NXMAX,NYMAX/NCPU),L33(NXMAX,NYMAX/NCPU)
      REAL MM,ML,MMR,MLR,MMT,MLT,MMP,MLP

      INTEGER IVANDRIEST
      REAL RESTOP,RESBOT,APLUS,CS0
      INTEGER IWAVEBOT
      REAL ZCS0
      REAL CSTMP,MLA(NXMAX,NZMAX),MMA(NXMAX,NZMAX),CSA(NXMAX,NZMAX)

      REAL Z0(NXMAX,*),HBAR

      INTEGER I,J,K,MYID,IERR,NYEND

      REAL DELTAX,DELTAY,DZM
      INTEGER MFILT
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      IF((MYID+1)*NYMAX/NCPU.LE.NYMOD) THEN
         NYEND=NYMAX/NCPU
      ELSEIF(MYID*NYMAX/NCPU.GT.NYMOD) THEN
         NYEND=0
      ELSE
         NYEND=NYMOD-MYID*NYMAX/NCPU
      ENDIF

C---------------------------------------
C     FILTER SIZE FOR DYNAMIC MODEL
C---------------------------------------

      DZM=HBAR/FLOAT(NZ-2)
      DELTA=(DELTAX*DELTAY*DZM)**(1./3.)
      DELTAT=(2.*DELTAX*2.*DELTAY*DZM)**(1./3.)

C-----END HERE

      DO K=2,NZ
         CALL PDFX_PARA(U(1,1,K),UKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),UPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFX_PARA(V(1,1,K),VKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

      ENDDO

      DO K=1,NZ-1
         CALL PDFX_PARA(W(1,1,K),WKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(W(1,1,K),WPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

      ENDDO

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.2) THEN
                  UZETA(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  VZETA(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
                  WZETA(I,J)=(W(I,J,3)-W(I,J,1))/(DZ(3)/2.+DZ(2)+DZ(1))
                  UKSI2D(I,J)=(UKSI(I,J,3)+UKSI(I,J,2))/2.0
                  UPHI2D(I,J)=(UPHI(I,J,3)+UPHI(I,J,2))/2.0
                  VKSI2D(I,J)=(VKSI(I,J,3)+VKSI(I,J,2))/2.0
                  VPHI2D(I,J)=(VPHI(I,J,3)+VPHI(I,J,2))/2.0
                  WKSI2D(I,J)=WKSI(I,J,2)
                  WPHI2D(I,J)=WPHI(I,J,2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ)-W(I,J,NZ-2))/(2.*DZ(NZ-2))
                  UKSI2D(I,J)=UKSI(I,J,NZ)
                  UPHI2D(I,J)=UPHI(I,J,NZ)
                  VKSI2D(I,J)=VKSI(I,J,NZ)
                  VPHI2D(I,J)=VPHI(I,J,NZ)
                  WKSI2D(I,J)=WKSI(I,J,NZ-1)
                  WPHI2D(I,J)=WPHI(I,J,NZ-1)
               ELSE IF(K.EQ.(NZ-2)) THEN
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)+DZ(K)
     &                 +DZ(K-1)/2.)
                  UKSI2D(I,J)=(UKSI(I,J,K+1)+UKSI(I,J,K))/2.0
                  UPHI2D(I,J)=(UPHI(I,J,K+1)+UPHI(I,J,K))/2.0
                  VKSI2D(I,J)=(VKSI(I,J,K+1)+VKSI(I,J,K))/2.0
                  VPHI2D(I,J)=(VPHI(I,J,K+1)+VPHI(I,J,K))/2.0
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)/2.+DZ(K)
     &                 +DZ(K-1)/2.)
                  UKSI2D(I,J)=(UKSI(I,J,K+1)+UKSI(I,J,K))/2.0
                  UPHI2D(I,J)=(UPHI(I,J,K+1)+UPHI(I,J,K))/2.0
                  VKSI2D(I,J)=(VKSI(I,J,K+1)+VKSI(I,J,K))/2.0
                  VPHI2D(I,J)=(VPHI(I,J,K+1)+VPHI(I,J,K))/2.0
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ENDIF

               S11(I,J,K)=UKSI2D(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))
     &              *UZETA(I,J)
               S12(I,J,K)=0.5*(UPHI2D(I,J)+(HYR(I,J)-ZW(K)*
     &              EYR(I,J))*UZETA(I,J)+VKSI2D(I,J)+(HXR(I,J)-
     &              ZW(K)*EXR(I,J))*VZETA(I,J))
               S13(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WKSI2D(I,J)+
     &              (HXR(I,J)-ZW(K)*EXR(I,J))*WZETA(I,J))
               S22(I,J,K)=VPHI2D(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))
     &              *VZETA(I,J)
               S23(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WPHI2D(I,J)+
     &              (HYR(I,J)-ZW(K)*EYR(I,J))*WZETA(I,J))
               S33(I,J,K)=HER(I,J)*WZETA(I,J)

            ENDDO
         ENDDO

      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S13,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S22,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S23,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,S33,NCPU)

      K=1
      DO I=1,NXMOD
         DO J=1,NYEND
            NUTW(I,J,K)=0.0
         ENDDO
      ENDDO
      NUTWA(K)=0.0

      DO K=2,NZ-1

         DO I=1,NXMOD
            DO J=1,NYEND
               SS(I,J)=SQRT(2.0*(S11(I,J,K)**2+2.*S12(I,J,K)**2
     &              +2.*S13(I,J,K)**2+S22(I,J,K)**2+2.*S23(I,J,K)**2
     &              +S33(I,J,K)**2))
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               SS11(I,J)=SS(I,J)*S11(I,J,K)
               SS12(I,J)=SS(I,J)*S12(I,J,K)
               SS13(I,J)=SS(I,J)*S13(I,J,K)
               SS22(I,J)=SS(I,J)*S22(I,J,K)
               SS23(I,J)=SS(I,J)*S23(I,J,K)
               SS33(I,J)=SS(I,J)*S33(I,J,K)
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS11,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS12,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS13,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS22,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS23,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SS33,NCPU)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS11,SS11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS12,SS12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS13,SS13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS22,SS22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS23,SS23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS33,SS33F,MFILT)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S11(1,1,K),S11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S12(1,1,K),S12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S13(1,1,K),S13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S22(1,1,K),S22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S23(1,1,K),S23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S33(1,1,K),S33F,MFILT)
         
         DO I=1,NXMOD
            DO J=1,NYEND
               SSF(I,J)=SQRT(2.0*(S11F(I,J)**2+2.*S12F(I,J)**2
     &              +2.*S13F(I,J)**2+S22F(I,J)**2+2.*S23F(I,J)**2
     &              +S33F(I,J)**2))
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,SSF,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               M11(I,J)=DELTA**2*SS11F(I,J)-DELTAT**2*SSF(I,J)*S11F(I,J)
               M12(I,J)=DELTA**2*SS12F(I,J)-DELTAT**2*SSF(I,J)*S12F(I,J)
               M13(I,J)=DELTA**2*SS13F(I,J)-DELTAT**2*SSF(I,J)*S13F(I,J)
               M22(I,J)=DELTA**2*SS22F(I,J)-DELTAT**2*SSF(I,J)*S22F(I,J)
               M23(I,J)=DELTA**2*SS23F(I,J)-DELTAT**2*SSF(I,J)*S23F(I,J)
               M33(I,J)=DELTA**2*SS33F(I,J)-DELTAT**2*SSF(I,J)*S33F(I,J)
               M11(I,J)=2.*M11(I,J)
               M12(I,J)=2.*M12(I,J)
               M13(I,J)=2.*M13(I,J)
               M22(I,J)=2.*M22(I,J)
               M23(I,J)=2.*M23(I,J)
               M33(I,J)=2.*M33(I,J)
               IF(K.EQ.1) THEN
                  UU11(I,J)=U(I,J,K)*U(I,J,K)
                  UU12(I,J)=U(I,J,K)*V(I,J,K)
                  UU13(I,J)=U(I,J,K)*W(I,J,K)
                  UU22(I,J)=V(I,J,K)*V(I,J,K)
                  UU23(I,J)=V(I,J,K)*W(I,J,K)
                  UU33(I,J)=W(I,J,K)*W(I,J,K)
               ELSE IF(K.EQ.NZ-1) THEN
                  UU11(I,J)=U(I,J,NZ)*U(I,J,NZ)
                  UU12(I,J)=U(I,J,NZ)*V(I,J,NZ)
                  UU13(I,J)=U(I,J,NZ)*W(I,J,NZ-1)
                  UU22(I,J)=V(I,J,NZ)*V(I,J,NZ)
                  UU23(I,J)=V(I,J,NZ)*W(I,J,NZ-1)
                  UU33(I,J)=W(I,J,NZ-1)*W(I,J,NZ-1)                  
               ELSE
                  UU11(I,J)=(U(I,J,K)+U(I,J,K+1))**2/4.
                  UU12(I,J)=(U(I,J,K)+U(I,J,K+1))*(V(I,J,K)+V(I,J,K+1))
     &                 /4.
                  UU13(I,J)=(U(I,J,K)+U(I,J,K+1))*W(I,J,K)/2.
                  UU22(I,J)=(V(I,J,K)+V(I,J,K+1))**2/4.
                  UU23(I,J)=(V(I,J,K)+V(I,J,K+1))*W(I,J,K)/2.
                  UU33(I,J)=W(I,J,K)**2
               ENDIF
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M11,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M12,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M13,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M22,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M23,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,M33,NCPU)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU11,UU11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU12,UU12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU13,UU13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU22,UU22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU23,UU23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU33,UU33F,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.1) THEN
                  L11(I,J)=UU11F(I,J)-UF(I,J,K)*UF(I,J,K)
                  L12(I,J)=UU12F(I,J)-UF(I,J,K)*VF(I,J,K)
                  L13(I,J)=UU13F(I,J)-UF(I,J,K)*WF(I,J,K)
                  L22(I,J)=UU22F(I,J)-VF(I,J,K)*VF(I,J,K)
                  L23(I,J)=UU23F(I,J)-VF(I,J,K)*WF(I,J,K)
                  L33(I,J)=UU33F(I,J)-WF(I,J,K)*WF(I,J,K)
               ELSE IF(K.EQ.NZ-1) THEN
                  L11(I,J)=UU11F(I,J)-UF(I,J,NZ)*UF(I,J,NZ)
                  L12(I,J)=UU12F(I,J)-UF(I,J,NZ)*VF(I,J,NZ)
                  L13(I,J)=UU13F(I,J)-UF(I,J,NZ)*WF(I,J,NZ-1)
                  L22(I,J)=UU22F(I,J)-VF(I,J,NZ)*VF(I,J,NZ)
                  L23(I,J)=UU23F(I,J)-VF(I,J,NZ)*WF(I,J,NZ-1)
                  L33(I,J)=UU33F(I,J)-WF(I,J,NZ-1)*WF(I,J,NZ-1)
               ELSE
                  L11(I,J)=UU11F(I,J)-(UF(I,J,K)+UF(I,J,K+1))**2/4.
                  L12(I,J)=UU12F(I,J)-(UF(I,J,K)+UF(I,J,K+1))
     &                 *(VF(I,J,K)+VF(I,J,K+1))/4.
                  L13(I,J)=UU13F(I,J)-(UF(I,J,K)+UF(I,J,K+1))
     &                 *WF(I,J,K)/2.
                  L22(I,J)=UU22F(I,J)-(VF(I,J,K)+VF(I,J,K+1))**2/4.
                  L23(I,J)=UU23F(I,J)-(VF(I,J,K)+VF(I,J,K+1))
     &                 *WF(I,J,K)/2.
                  L33(I,J)=UU33F(I,J)-WF(I,J,K)**2
               ENDIF
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L11,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L12,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L13,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L22,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L23,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,L33,NCPU)

         MLP=0.0
         MMP=0.0
         DO I=1,NXMOD
            ML=0.
            MM=0.
            DO J=1,NYEND
               MLT=M11(I,J)*L11(I,J)+2*M12(I,J)*L12(I,J)+2*M13(I,J)
     &              *L13(I,J)+M22(I,J)*L22(I,J)+2*M23(I,J)*L23(I,J)
     &              +M33(I,J)*L33(I,J)
               ML=ML+MLT
               MMT=M11(I,J)*M11(I,J)+2*M12(I,J)*M12(I,J)+2*M13(I,J)
     &              *M13(I,J)+M22(I,J)*M22(I,J)+2*M23(I,J)*M23(I,J)
     &              +M33(I,J)*M33(I,J)
               MM=MM+MMT

               CSD(I,J,K)=MLT/MMT
            ENDDO

            MLP=MLP+ML
            MMP=MMP+MM
            CALL MPI_ALLREDUCE(ML,MLR,1,MPI_DOUBLE_PRECISION,
     &           MPI_SUM,MPI_COMM_WORLD,IERR)
            CALL MPI_ALLREDUCE(MM,MMR,1,MPI_DOUBLE_PRECISION,
     &           MPI_SUM,MPI_COMM_WORLD,IERR)
            CS(I,K)=MLR/MMR
         ENDDO

         CALL MPI_ALLREDUCE(MLP,MLR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CALL MPI_ALLREDUCE(MMP,MMR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CSP(K)=MLR/MMR

         IF(IVANDRIEST.EQ.1) THEN
            CSP(K)=(0.1*(1-EXP(-ZW(K)*RESBOT/0.5/APLUS)))**2
         ENDIF

CC         IF(ICSC.EQ.1) THEN
CC            IF(CSP(K).LT.0) THEN
CC               CSP(K)=0.0
CC            ENDIF
CC         ENDIF

         NUTWA(K)=0.0
         DO I=1,NXMOD
            DO J=1,NYEND

               IF(IVANDRIEST.EQ.2) THEN
                  CSP(K)=((CS0*DELTA)**(-3)+(0.4*(ZW(K)*HBAR+Z0(I,J)))
     1                 **(-3))**(-2./3.)/DELTA**2
               ENDIF

               IF(ICSC.EQ.1) THEN
                  IF(CSP(K).LT.0) THEN
                     CSP(K)=((CS0*DELTA)**(-3)+(0.4*(ZW(K)*HBAR
     1                    +Z0(I,J)))**(-3))**(-2./3.)/DELTA**2
                  ENDIF
               ENDIF

               NUTW(I,J,K)=CSP(K)*DELTA**2*SS(I,J)

               IF(IWAVEBOT.EQ.1) THEN
                  IF(ZW(K).LT.ZCS0) THEN
                     IF(I.GT.2 .AND. I.LT.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(I+2,K))/
     &                       (MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)+MMA(I+1,K)
     &                       +MMA(I+2,K))
                     ELSEIF(I.EQ.1) THEN
                        CSTMP=(MLA(NXMOD-1,K)+MLA(NXMOD,K)+MLA(I,K)
     &                       +MLA(I+1,K)+MLA(I+2,K))/
     &                       (MMA(NXMOD-1,K)+MMA(NXMOD,K)+MMA(I,K)
     &                       +MMA(I+1,K)+MMA(I+2,K))
                     ELSEIF(I.EQ.2) THEN
                        CSTMP=(MLA(NXMOD,K)+MLA(1,K)+MLA(2,K)+MLA(3,K)
     &                       +MLA(4,K))/(MMA(NXMOD,K)+MMA(1,K)+MMA(2,K)
     &                       +MMA(3,K)+MMA(4,K))
                     ELSEIF(I.EQ.NXMOD-1) THEN
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(I+1,K)
     &                       +MLA(1,K))/
     &                       (MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)+MMA(I+1,K)
     &                       +MMA(1,K))
                     ELSE
                        CSTMP=(MLA(I-2,K)+MLA(I-1,K)+MLA(I,K)+MLA(1,K)
     &                       +MLA(2,K))/(MMA(I-2,K)+MMA(I-1,K)+MMA(I,K)
     &                       +MMA(1,K)+MMA(2,K))
                     ENDIF
                     IF(CSTMP.GT.0.0) THEN
                        NUTW(I,J,K)=CSTMP*DELTA**2*SS(I,J)
                     ELSE
                        NUTW(I,J,K)=0.0
                     ENDIF
                  ENDIF
               ENDIF

               NUTWA(K)=NUTWA(K)+NUTW(I,J,K)
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(NUTWA(K),NUTAR,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         NUTWA(K)=NUTAR/NXMOD/NYMOD

      ENDDO

      DO I=1,NXMOD
         DO J=1,NYEND
            NUTW(I,J,NZ)=NUTW(I,J,NZ-2)
            S11(I,J,NZ)=S11(I,J,NZ-2)
            S12(I,J,NZ)=S12(I,J,NZ-2)
            S13(I,J,NZ)=-S13(I,J,NZ-2)
            S22(I,J,NZ)=S22(I,J,NZ-2)
            S23(I,J,NZ)=-S23(I,J,NZ-2)
            S33(I,J,NZ)=S33(I,J,NZ-2)
         ENDDO
      ENDDO
      NUTWA(NZ)=NUTWA(NZ-2)

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,NUTW,NCPU)

      RETURN
      END

C=====SUBROUTINE GETNUTW_WALLMODEL END HERE








C=======================================================================
      SUBROUTINE GETNUT_LASD(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1     DZ,ZZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,S13W,S23W,CS_LASD,NUT,
     1     NUTW,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT,JMM0,JLM0,JNN0,JQN0,
     1     DX,DY,HH,DT,TIME,ITLASD,TLASD0,CSP,CS0,Z0)

C     BY DI YANG, OCT 2011
C     IN THIS VERSION
C     USE LAGRANGIAN-AVERAGED SCALE-DEPENDENT DYNAMIC MODEL
C     REFERENCE: Bou-Zeid ea (2005), PoF Vol.17, 025105

C------------------------------
C     CALCULATE NU_T AND <NU_T> AND S_IJ
C------------------------------

      IMPLICIT NONE
      INCLUDE "mpif.h"
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTW(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S33(NXMAX,NYMAX/NCPU,*)
      REAL S13W(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)

      REAL DZ(*),ZZ(*),ZW(*)
      REAL HER(NXMAX,*),HXR(NXMAX,*),EXR(NXMAX,*)
      REAL HYR(NXMAX,*),EYR(NXMAX,*)
      REAL PEX,PEY
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL UKSI(NXMAX,NYMAX/NCPU),UPHI(NXMAX,NYMAX/NCPU)
      REAL VKSI(NXMAX,NYMAX/NCPU),VPHI(NXMAX,NYMAX/NCPU)
      REAL WKSI(NXMAX,NYMAX/NCPU,NZMAX),WPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WWKSI,WWPHI
      REAL UF(NXMAX,NYMAX/NCPU,*),VF(NXMAX,NYMAX/NCPU,*)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX),WF0(NXMAX,NYMAX/NCPU)
      REAL UZETA(NXMAX,NYMAX/NCPU),VZETA(NXMAX,NYMAX/NCPU)
      REAL WZETA(NXMAX,NYMAX/NCPU),UKSI2D(NXMAX,NYMAX/NCPU)
      REAL UPHI2D(NXMAX,NYMAX/NCPU),VKSI2D(NXMAX,NYMAX/NCPU)
      REAL VPHI2D(NXMAX,NYMAX/NCPU),WKSI2D(NXMAX,NYMAX/NCPU)
      REAL WPHI2D(NXMAX,NYMAX/NCPU)
      REAL UU11(NXMAX,NYMAX/NCPU),UU12(NXMAX,NYMAX/NCPU)
      REAL UU13(NXMAX,NYMAX/NCPU),UU22(NXMAX,NYMAX/NCPU)
      REAL UU23(NXMAX,NYMAX/NCPU),UU33(NXMAX,NYMAX/NCPU)
      REAL UU11F(NXMAX,NYMAX/NCPU),UU12F(NXMAX,NYMAX/NCPU)
      REAL UU13F(NXMAX,NYMAX/NCPU),UU22F(NXMAX,NYMAX/NCPU)
      REAL UU23F(NXMAX,NYMAX/NCPU),UU33F(NXMAX,NYMAX/NCPU)
      REAL SS(NXMAX,NYMAX/NCPU),SSF(NXMAX,NYMAX/NCPU)
      REAL SS11(NXMAX,NYMAX/NCPU),SS12(NXMAX,NYMAX/NCPU)
      REAL SS13(NXMAX,NYMAX/NCPU),SS22(NXMAX,NYMAX/NCPU)
      REAL SS23(NXMAX,NYMAX/NCPU),SS33(NXMAX,NYMAX/NCPU)
      REAL SS11F(NXMAX,NYMAX/NCPU),SS12F(NXMAX,NYMAX/NCPU)
      REAL SS13F(NXMAX,NYMAX/NCPU),SS22F(NXMAX,NYMAX/NCPU)
      REAL SS23F(NXMAX,NYMAX/NCPU),SS33F(NXMAX,NYMAX/NCPU)
      REAL M11(NXMAX,NYMAX/NCPU),M12(NXMAX,NYMAX/NCPU)
      REAL M13(NXMAX,NYMAX/NCPU),M22(NXMAX,NYMAX/NCPU)
      REAL M23(NXMAX,NYMAX/NCPU),M33(NXMAX,NYMAX/NCPU)
      REAL L11(NXMAX,NYMAX/NCPU),L12(NXMAX,NYMAX/NCPU)
      REAL L13(NXMAX,NYMAX/NCPU),L22(NXMAX,NYMAX/NCPU)
      REAL L23(NXMAX,NYMAX/NCPU),L33(NXMAX,NYMAX/NCPU)
      REAL MM,ML,MMR,MLR,MMP,MLP,MMT,MLT,DELTA(NZMAX),DELTAT(NZMAX)

      INTEGER ICSC,IVANDRIEST
      REAL RESTOP,RESBOT,APLUS,CS0
      INTEGER IWAVEBOT
      REAL ZCS0
      REAL CSTMP,MLA(NXMAX,NZMAX),MMA(NXMAX,NZMAX),CSA(NXMAX,NZMAX)

      REAL S11F(NXMAX,NYMAX/NCPU),S12F(NXMAX,NYMAX/NCPU)
      REAL S13F(NXMAX,NYMAX/NCPU),S22F(NXMAX,NYMAX/NCPU)
      REAL S23F(NXMAX,NYMAX/NCPU),S33F(NXMAX,NYMAX/NCPU)

      REAL HBAR

      INTEGER I,J,K,MYID,IERR,NYEND
      INTEGER STATUS(MPI_STATUS_SIZE)

      REAL DELTAX,DELTAY,DZM
      INTEGER MFILT

C----------------------------------------
C     NEW VARIABLES FOR LASD MODEL
C----------------------------------------

      REAL UFF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VFF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WFF(NXMAX,NYMAX/NCPU,NZMAX),WFF0(NXMAX,NYMAX/NCPU)
      REAL UU11FF(NXMAX,NYMAX/NCPU),UU12FF(NXMAX,NYMAX/NCPU)
      REAL UU13FF(NXMAX,NYMAX/NCPU),UU22FF(NXMAX,NYMAX/NCPU)
      REAL UU23FF(NXMAX,NYMAX/NCPU),UU33FF(NXMAX,NYMAX/NCPU)
      REAL SSFF(NXMAX,NYMAX/NCPU)
      REAL SS11FF(NXMAX,NYMAX/NCPU),SS12FF(NXMAX,NYMAX/NCPU)
      REAL SS13FF(NXMAX,NYMAX/NCPU),SS22FF(NXMAX,NYMAX/NCPU)
      REAL SS23FF(NXMAX,NYMAX/NCPU),SS33FF(NXMAX,NYMAX/NCPU)
      REAL S11FF(NXMAX,NYMAX/NCPU),S12FF(NXMAX,NYMAX/NCPU)
      REAL S13FF(NXMAX,NYMAX/NCPU),S22FF(NXMAX,NYMAX/NCPU)
      REAL S23FF(NXMAX,NYMAX/NCPU),S33FF(NXMAX,NYMAX/NCPU)
      REAL Q11(NXMAX,NYMAX/NCPU),Q12(NXMAX,NYMAX/NCPU)
      REAL Q13(NXMAX,NYMAX/NCPU),Q22(NXMAX,NYMAX/NCPU)
      REAL Q23(NXMAX,NYMAX/NCPU),Q33(NXMAX,NYMAX/NCPU)
      REAL N11(NXMAX,NYMAX/NCPU),N12(NXMAX,NYMAX/NCPU)
      REAL N13(NXMAX,NYMAX/NCPU),N22(NXMAX,NYMAX/NCPU)
      REAL N23(NXMAX,NYMAX/NCPU),N33(NXMAX,NYMAX/NCPU)
      REAL JMM(NXMAX,NYMAX/NCPU,NZMAX),JLM(NXMAX,NYMAX/NCPU,NZMAX)
      REAL JNN(NXMAX,NYMAX/NCPU,NZMAX),JQN(NXMAX,NYMAX/NCPU,NZMAX)
      REAL JMM0(NXMAX,NYMAX,*),JLM0(NXMAX,NYMAX,*)
      REAL JNN0(NXMAX,NYMAX,*),JQN0(NXMAX,NYMAX,*)
      REAL CS_LASD(NXMAX,NYMAX/NCPU,*),CSP(NZMAX),CSP1

      REAL HH(NXMAX,*),HHS(NXMAX,NYMAX)

      INTEGER JJ,KK
      INTEGER IL,IR,JL,JR,KL,KR

      REAL EPSILON,TN,EPSILON4,TN4
      REAL XL,YL,TWOPI,DX,DY,TIME,DT,DELTATT(NZMAX)
      REAL XP,YP,ZP,X0,Y0,ZZ0,ZETA0,H0,WW
      REAL AX,BX,AY,BY,AZ,BZ
CCC      REAL JMM00,JLM00,JNN00,JQN00
      REAL JMM00(NXMAX,NYMAX/NCPU,NZMAX),JLM00(NXMAX,NYMAX/NCPU,NZMAX)
      REAL JNN00(NXMAX,NYMAX/NCPU,NZMAX),JQN00(NXMAX,NYMAX/NCPU,NZMAX)

      INTEGER ITLASD
      REAL TLASD0,DELTA_T

      REAL Z0(NXMAX,*)

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      IF((MYID+1)*NYMAX/NCPU.LE.NYMOD) THEN
         NYEND=NYMAX/NCPU
      ELSEIF(MYID*NYMAX/NCPU.GT.NYMOD) THEN
         NYEND=0
      ELSE
         NYEND=NYMOD-MYID*NYMAX/NCPU
      ENDIF

C---------------------------------------
C     FILTER SIZE FOR DYNAMIC MODEL
C---------------------------------------

      DZM=HBAR/FLOAT(NZ-2)
CC      DELTA=(DELTAX*DELTAY*DZM)**(1./3.)
CC      DELTAT=(2.*DELTAX*2.*DELTAY*DZM)**(1./3.)
CC      DELTATT=(4.*DELTAX*4.*DELTAY*DZM)**(1./3.)
      DO K=1,NZ
         DELTA(K)=(DELTAX*DELTAY*DZ(K)*HBAR)**(1./3.)
         DELTAT(K)=(2.*DELTAX*2.*DELTAY*DZ(K)*HBAR)**(1./3.)
         DELTATT(K)=(4.*DELTAX*4.*DELTAY*DZ(K)*HBAR)**(1./3.)
CC         DELTA(K)=DELTAX
CC         DELTAT(K)=2.*DELTAX
CC         DELTATT(K)=4.*DELTAX
      ENDDO

C      DELTA=SQRT(DELTAX*DELTAY)
C      DELTAT=2.*DELTA
C      DELTATT=4.*DELTA

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY

      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,HH,HHS,NCPU)

C-----END HERE

C-----------------------------------
C     CALCULATE STRAIN TENSOR
C-----------------------------------

      DO K=1,NZ
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,U(1,1,K),
     1        UFF(1,1,K),MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,V(1,1,K),
     1        VFF(1,1,K),MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,W(1,1,K),
     1        WFF(1,1,K),MFILT)
      ENDDO

      DO K=1,NZ-1
         CALL PDFX_PARA(W(1,1,K),WKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(W(1,1,K),WPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
      ENDDO
      
      DO K=2,NZ
         
         CALL PDFX_PARA(U(1,1,K),UKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),UPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         CALL PDFX_PARA(V(1,1,K),VKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYEND

               IF(K.EQ.2) THEN
CCC                  UZETA(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
CCC     1                 /(2.*DZ(2))
CCC                  VZETA(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
CCC     1                 /(2.*DZ(2))
                  UZETA(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  VZETA(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
CC                  UZETA(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
CC     1                 /(3.*DZ(2))
CC                  VZETA(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
CC     1                 /(3.*DZ(2))
CC                  UZETA(I,J)=(U(I,J,2)-U(I,J,1))/DZ(1)
CC                  VZETA(I,J)=(V(I,J,2)-V(I,J,1))/DZ(1)
CC                  UZETA(I,J)=(U(I,J,3)-U(I,J,1))/(DZ(2)+DZ(1))
CC                  VZETA(I,J)=(V(I,J,3)-V(I,J,1))/(DZ(2)+DZ(1))
                  WZETA(I,J)=(W(I,J,2)-W(I,J,1))/(DZ(2)/2.+DZ(1))
                  WWKSI=(WKSI(I,J,2)+WKSI(I,J,1))/2.0
                  WWPHI=(WPHI(I,J,2)+WPHI(I,J,1))/2.0
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(NZ-2)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ELSE IF(K.EQ.NZ) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ)-W(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WWKSI=WKSI(I,J,NZ-1)
                  WWPHI=WPHI(I,J,NZ-1)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/(DZ(K)/2.+DZ(K-1)/2.)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ENDIF

               S11(I,J,K)=UKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZETA(I,J)
               S12(I,J,K)=0.5*(UPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     &              *UZETA(I,J)+VKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     &              *VZETA(I,J))
               S13(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WWKSI
     &              +(HXR(I,J)-ZZ(K)*EXR(I,J))*WZETA(I,J))
               S22(I,J,K)=VPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZETA(I,J)
               S23(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WWPHI
     &              +(HYR(I,J)-ZZ(K)*EYR(I,J))*WZETA(I,J))
               S33(I,J,K)=HER(I,J)*WZETA(I,J)

            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.2) THEN
                  UZETA(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  VZETA(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
                  WZETA(I,J)=(W(I,J,3)-W(I,J,1))/(DZ(3)/2.+DZ(2)+DZ(1))
                  WKSI2D(I,J)=WKSI(I,J,2)
                  WPHI2D(I,J)=WPHI(I,J,2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ)-W(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WKSI2D(I,J)=WKSI(I,J,NZ-1)
                  WPHI2D(I,J)=WPHI(I,J,NZ-1)
               ELSE IF(K.EQ.(NZ-2)) THEN
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)+DZ(K)
     &                 +DZ(K-1)/2.)
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)/2.+DZ(K)
     &                 +DZ(K-1)/2.)
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ENDIF

               S13W(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WKSI2D(I,J)+
     &              (HXR(I,J)-ZW(K)*EXR(I,J))*WZETA(I,J))
               S23W(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WPHI2D(I,J)+
     &              (HYR(I,J)-ZW(K)*EYR(I,J))*WZETA(I,J))

            ENDDO
         ENDDO

      ENDDO

c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,S11,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,S12,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,S13,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,S22,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,S23,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,S33,NCPU)

C-----END HERE

C---------------------------------------------------
C     CALCULATE TENSORS FOR MODEL COEFFICIENT
C---------------------------------------------------
      
C~~~~~~~~~~~~~~~~~~~~~~~~
C     L_IJ AND M_IJ
C~~~~~~~~~~~~~~~~~~~~~~~~

      K=1
      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,K)=0.0
         ENDDO
      ENDDO

      DO K=2,NZ

         DO I=1,NXMOD
            DO J=1,NYEND
               SS(I,J)=SQRT(2.0*(S11(I,J,K)**2+2.*S12(I,J,K)**2
     &              +2.*S13(I,J,K)**2+S22(I,J,K)**2+2.*S23(I,J,K)**2
     &              +S33(I,J,K)**2))
            ENDDO
         ENDDO

c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SS,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               SS11(I,J)=SS(I,J)*S11(I,J,K)
               SS12(I,J)=SS(I,J)*S12(I,J,K)
               SS13(I,J)=SS(I,J)*S13(I,J,K)
               SS22(I,J)=SS(I,J)*S22(I,J,K)
               SS23(I,J)=SS(I,J)*S23(I,J,K)
               SS33(I,J)=SS(I,J)*S33(I,J,K)
            ENDDO
         ENDDO

c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SS11,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SS12,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SS13,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SS22,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SS23,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SS33,NCPU)
         
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS11,SS11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS12,SS12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS13,SS13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS22,SS22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS23,SS23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS33,SS33F,MFILT)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S11(1,1,K),S11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S12(1,1,K),S12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S13(1,1,K),S13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S22(1,1,K),S22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S23(1,1,K),S23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S33(1,1,K),S33F,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               SSF(I,J)=SQRT(2.0*(S11F(I,J)**2+2.*S12F(I,J)**2
     &              +2.*S13F(I,J)**2+S22F(I,J)**2+2.*S23F(I,J)**2
     &              +S33F(I,J)**2))
            ENDDO
         ENDDO

c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SSF,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               M11(I,J)=2.*DELTA(K)**2*SS11F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S11F(I,J)
               M12(I,J)=2.*DELTA(K)**2*SS12F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S12F(I,J)
               M13(I,J)=2.*DELTA(K)**2*SS13F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S13F(I,J)
               M22(I,J)=2.*DELTA(K)**2*SS22F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S22F(I,J)
               M23(I,J)=2.*DELTA(K)**2*SS23F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S23F(I,J)
               M33(I,J)=2.*DELTA(K)**2*SS33F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S33F(I,J)

               UU11(I,J)=U(I,J,K)*U(I,J,K)
               UU12(I,J)=U(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU13(I,J)=U(I,J,K)*W(I,J,K-1)
               ELSE
                  UU13(I,J)=U(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               UU22(I,J)=V(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU23(I,J)=V(I,J,K)*W(I,J,K-1)
               ELSE
                  UU23(I,J)=V(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               IF(K.EQ.NZ) THEN
                  UU33(I,J)=W(I,J,K-1)*W(I,J,K-1)
               ELSE
                  UU33(I,J)=((W(I,J,K)+W(I,J,K-1))/2.0)**2
               ENDIF
            ENDDO
         ENDDO

c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,M11,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,M12,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,M13,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,M22,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,M23,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,M33,NCPU)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU11,UU11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU12,UU12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU13,UU13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU22,UU22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU23,UU23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU33,UU33F,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.NZ) THEN
                  WF0(I,J)=WF(I,J,NZ-1)
               ELSE
                  WF0(I,J)=(WF(I,J,K)+WF(I,J,K-1))/2.0
               ENDIF
               L11(I,J)=UU11F(I,J)-UF(I,J,K)*UF(I,J,K)
               L12(I,J)=UU12F(I,J)-UF(I,J,K)*VF(I,J,K)
               L13(I,J)=UU13F(I,J)-UF(I,J,K)*WF0(I,J)
               L22(I,J)=UU22F(I,J)-VF(I,J,K)*VF(I,J,K)
               L23(I,J)=UU23F(I,J)-VF(I,J,K)*WF0(I,J)
               L33(I,J)=UU33F(I,J)-WF0(I,J)*WF0(I,J)
            ENDDO
         ENDDO

c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,L11,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,L12,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,L13,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,L22,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,L23,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,L33,NCPU)

         DELTA_T=5.*DT
         IF(ITLASD.GT.1.AND.ITLASD.LE.5) THEN
            GOTO 888
         ELSE IF(ITLASD.EQ.1) THEN
            GOTO 555
         ELSE
            PRINT*, 'INVALID VALUE FOR ITLASD:',ITLASD
            STOP
         ENDIF
         
 555     CONTINUE

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~
C     Q_IJ AND N_JI
C~~~~~~~~~~~~~~~~~~~~~~~~

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS11,SS11FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS12,SS12FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS13,SS13FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS22,SS22FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS23,SS23FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS33,SS33FF,
     1        MFILT)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S11(1,1,K),
     1        S11FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S12(1,1,K),
     1        S12FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S13(1,1,K),
     1        S13FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S22(1,1,K),
     1        S22FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S23(1,1,K),
     1        S23FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S33(1,1,K),
     1        S33FF,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               SSFF(I,J)=SQRT(2.0*(S11FF(I,J)**2+2.*S12FF(I,J)**2
     &              +2.*S13FF(I,J)**2+S22FF(I,J)**2+2.*S23FF(I,J)**2
     &              +S33FF(I,J)**2))
            ENDDO
         ENDDO

c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,SSFF,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               N11(I,J)=2.*DELTA(K)**2*SS11FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S11FF(I,J)
               N12(I,J)=2.*DELTA(K)**2*SS12FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S12FF(I,J)
               N13(I,J)=2.*DELTA(K)**2*SS13FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S13FF(I,J)
               N22(I,J)=2.*DELTA(K)**2*SS22FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S22FF(I,J)
               N23(I,J)=2.*DELTA(K)**2*SS23FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S23FF(I,J)
               N33(I,J)=2.*DELTA(K)**2*SS33FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S33FF(I,J)
            ENDDO
         ENDDO

c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,N11,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,N12,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,N13,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,N22,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,N23,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,N33,NCPU)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU11,UU11FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU12,UU12FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU13,UU13FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU22,UU22FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU23,UU23FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU33,UU33FF,
     1        MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.NZ) THEN
                  WFF0(I,J)=WFF(I,J,NZ-1)
               ELSE
                  WFF0(I,J)=(WFF(I,J,K)+WFF(I,J,K-1))/2.0
               ENDIF
               Q11(I,J)=UU11FF(I,J)-UFF(I,J,K)*UFF(I,J,K)
               Q12(I,J)=UU12FF(I,J)-UFF(I,J,K)*VFF(I,J,K)
               Q13(I,J)=UU13FF(I,J)-UFF(I,J,K)*WFF0(I,J)
               Q22(I,J)=UU22FF(I,J)-VFF(I,J,K)*VFF(I,J,K)
               Q23(I,J)=UU23FF(I,J)-VFF(I,J,K)*WFF0(I,J)
               Q33(I,J)=UU33FF(I,J)-WFF0(I,J)*WFF0(I,J)
            ENDDO
         ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     LAGRANGIAN-AVERAGING COEFFICIENTS
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

         DO J=1,NYEND
            JJ=MYID*NYMAX/NCPU+J
            DO I=1,NXMOD
               TN=1.5*DELTA(K)*(JLM0(I,JJ,K)*JMM0(I,JJ,K))**(-1./8.)
               EPSILON=(DELTA_T/TN)/(1.+DELTA_T/TN)
               TN4=1.5*DELTA(K)*(JQN0(I,JJ,K)*JNN0(I,JJ,K))**(-1./8.)
               EPSILON4=(DELTA_T/TN4)/(1.+DELTA_T/TN4)
CC
               XP=(I-1)*XL/FLOAT(NXMOD)
               YP=(MYID*NYMAX/NCPU+J-1)*YL/FLOAT(NYMOD)
               ZP=ZZ(K)*(HBAR+HH(I,J))-HH(I,J)
CC
               X0=XP-U(I,J,K)*DELTA_T
               IF(X0.LT.0) X0=X0+XL
               IF(X0.GT.XL) X0=X0-XL
               IL=INT(X0/DX)+1
               IR=IL+1
               AX=((IR-1)*DX-X0)/DX
               BX=(X0-(IL-1)*DX)/DX               
               IF(IR.EQ.(NXMOD+1)) IR=1
CC
               Y0=YP-V(I,J,K)*DELTA_T
               IF(Y0.LT.0) Y0=Y0+YL
               IF(Y0.GT.YL) Y0=Y0-YL
               JL=INT(Y0/DY)+1
               JR=JL+1
               AY=((JR-1)*DY-Y0)/DY
               BY=(Y0-(JL-1)*DY)/DY
               IF(JR.EQ.(NYMOD+1)) JR=1
CC
               H0=HHS(IL,JL)*AX*AY+HHS(IR,JL)*BX*AY+HHS(IL,JR)*AX*BY
     1              +HHS(IR,JR)*BX*BY
CC
               IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               ZZ0=ZP-WW*DELTA_T
               ZETA0=(ZZ0+H0)/(HBAR+H0)

               KL=1
               DO KK=2,NZ
                  IF(ZZ(KK-1).LT.ZETA0.AND.ZZ(KK).GT.ZETA0) THEN
                     KL=KK-1
                     KR=KL+1
                     AZ=(ZZ(KR)-ZETA0)/DZ(KL)
                     BZ=(ZETA0-ZZ(KL))/DZ(KL)
                     GOTO 55
                  ENDIF
               ENDDO
 55            CONTINUE

               JMM00(I,J,K)=(JMM0(IL,JL,KL)*AX*AY+JMM0(IR,JL,KL)*BX*AY
     1              +JMM0(IL,JR,KL)*AX*BY+JMM0(IR,JR,KL)*BX*BY)*AZ
     1              +(JMM0(IL,JL,KR)*AX*AY+JMM0(IR,JL,KR)*BX*AY
     1              +JMM0(IL,JR,KR)*AX*BY+JMM0(IR,JR,KR)*BX*BY)*BZ
               JLM00(I,J,K)=(JLM0(IL,JL,KL)*AX*AY+JLM0(IR,JL,KL)*BX*AY
     1              +JLM0(IL,JR,KL)*AX*BY+JLM0(IR,JR,KL)*BX*BY)*AZ
     1              +(JLM0(IL,JL,KR)*AX*AY+JLM0(IR,JL,KR)*BX*AY
     1              +JLM0(IL,JR,KR)*AX*BY+JLM0(IR,JR,KR)*BX*BY)*BZ
               JNN00(I,J,K)=(JNN0(IL,JL,KL)*AX*AY+JNN0(IR,JL,KL)*BX*AY
     1              +JNN0(IL,JR,KL)*AX*BY+JNN0(IR,JR,KL)*BX*BY)*AZ
     1              +(JNN0(IL,JL,KR)*AX*AY+JNN0(IR,JL,KR)*BX*AY
     1              +JNN0(IL,JR,KR)*AX*BY+JNN0(IR,JR,KR)*BX*BY)*BZ
               JQN00(I,J,K)=(JQN0(IL,JL,KL)*AX*AY+JQN0(IR,JL,KL)*BX*AY
     1              +JQN0(IL,JR,KL)*AX*BY+JQN0(IR,JR,KL)*BX*BY)*AZ
     1              +(JQN0(IL,JL,KR)*AX*AY+JQN0(IR,JL,KR)*BX*AY
     1              +JQN0(IL,JR,KR)*AX*BY+JQN0(IR,JR,KR)*BX*BY)*BZ

               IF(ZETA0.LE.0.) THEN
                  JMM00(I,J,K)=JMM0(IL,JL,1)*AX*AY+JMM0(IR,JL,1)*BX*AY
     1                 +JMM0(IL,JR,1)*AX*BY+JMM0(IR,JR,1)*BX*BY
                  JLM00(I,J,K)=JLM0(IL,JL,1)*AX*AY+JLM0(IR,JL,1)*BX*AY
     1                 +JLM0(IL,JR,1)*AX*BY+JLM0(IR,JR,1)*BX*BY
                  JNN00(I,J,K)=JNN0(IL,JL,1)*AX*AY+JNN0(IR,JL,1)*BX*AY
     1                 +JNN0(IL,JR,1)*AX*BY+JNN0(IR,JR,1)*BX*BY
                  JQN00(I,J,K)=JQN0(IL,JL,1)*AX*AY+JQN0(IR,JL,1)*BX*AY
     1                 +JQN0(IL,JR,1)*AX*BY+JQN0(IR,JR,1)*BX*BY
               ENDIF
               IF(ZETA0.GE.1.) THEN
                  JMM00(I,J,K)=JMM0(IL,JL,NZ)*AX*AY+JMM0(IR,JL,NZ)*BX*AY
     1                 +JMM0(IL,JR,NZ)*AX*BY+JMM0(IR,JR,NZ)*BX*BY
                  JLM00(I,J,K)=JLM0(IL,JL,NZ)*AX*AY+JLM0(IR,JL,NZ)*BX*AY
     1                 +JLM0(IL,JR,NZ)*AX*BY+JLM0(IR,JR,NZ)*BX*BY
                  JNN00(I,J,K)=JNN0(IL,JL,NZ)*AX*AY+JNN0(IR,JL,NZ)*BX*AY
     1                 +JNN0(IL,JR,NZ)*AX*BY+JNN0(IR,JR,NZ)*BX*BY
                  JQN00(I,J,K)=JQN0(IL,JL,NZ)*AX*AY+JQN0(IR,JL,NZ)*BX*AY
     1                 +JQN0(IL,JR,NZ)*AX*BY+JQN0(IR,JR,NZ)*BX*BY
               ENDIF
CC
               IF(ABS(TIME-DT-TLASD0).LT.1.E-6) THEN
                  EPSILON=1.
                  EPSILON4=1.
               ENDIF
               JMM(I,J,K)=EPSILON*(M11(I,J)*M11(I,J)+2.*M12(I,J)
     1              *M12(I,J)+2.*M13(I,J)*M13(I,J)+M22(I,J)*M22(I,J)
     1              +2.*M23(I,J)*M23(I,J)+M33(I,J)*M33(I,J))
     1              +(1.-EPSILON)*JMM00(I,J,K)
               JLM(I,J,K)=EPSILON*(M11(I,J)*L11(I,J)+2.*M12(I,J)
     1              *L12(I,J)+2.*M13(I,J)*L13(I,J)+M22(I,J)*L22(I,J)
     1              +2.*M23(I,J)*L23(I,J)+M33(I,J)*L33(I,J))
     1              +(1.-EPSILON)*JLM00(I,J,K)
CCC               IF(JLM(I,J,K).LE.0) JLM(I,J,K)=1.E-32
               IF(JLM(I,J,K).LE.0) JLM(I,J,K)=1.E-16
CC
               JNN(I,J,K)=EPSILON4*(N11(I,J)*N11(I,J)+2.*N12(I,J)
     1              *N12(I,J)+2.*N13(I,J)*N13(I,J)+N22(I,J)*N22(I,J)
     1              +2.*N23(I,J)*N23(I,J)+N33(I,J)*N33(I,J))
     1              +(1.-EPSILON4)*JNN00(I,J,K)
               JQN(I,J,K)=EPSILON4*(N11(I,J)*Q11(I,J)+2.*N12(I,J)
     1              *Q12(I,J)+2.*N13(I,J)*Q13(I,J)+N22(I,J)*Q22(I,J)
     1              +2.*N23(I,J)*Q23(I,J)+N33(I,J)*Q33(I,J))
     1              +(1.-EPSILON4)*JQN00(I,J,K)
CCC               IF(JQN(I,J,K).LE.0) JQN(I,J,K)=1.E-32
               IF(JQN(I,J,K).LE.0) JQN(I,J,K)=1.E-16
               CS_LASD(I,J,K)=(JLM(I,J,K)/JMM(I,J,K))
     1              /MAX(JQN(I,J,K)*JMM(I,J,K)/(JNN(I,J,K)*JLM(I,J,K)),
     1              0.125)
CC
CC               NUT(I,J,K)=CS_LASD(I,J,K)*DELTA(K)**2*SS(I,J)
            ENDDO
         ENDDO

 888     CONTINUE

         DO J=1,NYEND
            DO I=1,NXMOD
               IF(ICSC.EQ.1) THEN
                  IF(K.EQ.2) THEN
                     CS_LASD(I,J,K)=((CS0*DELTA(K))**(-3)+(0.4*(ZZ(K)
     1                    *HBAR+Z0(I,J)))**(-3))**(-2./3.)/DELTA(K)**2
                  ENDIF
               ENDIF
               NUT(I,J,K)=CS_LASD(I,J,K)*DELTA(K)**2*SS(I,J)
            ENDDO
         ENDDO

      ENDDO

C+++
C     FREE-SLIP CONDITION AT BOTTOM
      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,1)=NUT(I,J,2)
         ENDDO
      ENDDO
C+++

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               IF(K.EQ.1) THEN
                  NUTW(I,J,K)=NUT(I,J,K)
               ELSE IF(K.EQ.NZ-1) THEN
                  NUTW(I,J,K)=NUT(I,J,K+1)
               ELSE IF(K.EQ.NZ) THEN
                  NUTW(I,J,K)=NUT(I,J,K)
               ELSE
                  NUTW(I,J,K)=(NUT(I,J,K)+NUT(I,J,K+1))/2.
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            CS_LASD(I,J,1)=0.
            CS_LASD(I,J,NZ+1)=CS_LASD(I,J,NZ)
            JMM(I,J,1)=JMM(I,J,2)
            JMM(I,J,NZ+1)=JMM(I,J,NZ)
            JLM(I,J,1)=JLM(I,J,2)
            JLM(I,J,NZ+1)=JLM(I,J,NZ)
            JNN(I,J,1)=JNN(I,J,2)
            JNN(I,J,NZ+1)=JNN(I,J,NZ)
            JQN(I,J,1)=JQN(I,J,2)
            JQN(I,J,NZ+1)=JQN(I,J,NZ)
         ENDDO
      ENDDO

C~~~~~END HERE

C-----END HERE

C--------------------
C     APPLY BC
C--------------------

      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,NZ+1)=NUT(I,J,NZ-1)
            S11(I,J,NZ+1)=S11(I,J,NZ-1)
            S12(I,J,NZ+1)=S12(I,J,NZ-1)
            S13(I,J,NZ+1)=-S13(I,J,NZ-1)
            S22(I,J,NZ+1)=S22(I,J,NZ-1)
            S23(I,J,NZ+1)=-S23(I,J,NZ-1)
            S33(I,J,NZ+1)=S33(I,J,NZ-1)
         ENDDO
      ENDDO

c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,NUT,NCPU)

C-----END HERE

C----------------------------------------------
C     SAVE COEFFICIENTS FOR NEXT TIMESTEP
C----------------------------------------------

      IF(ITLASD.EQ.1) THEN
      
         DO K=1,NZ+1
            DO J=1,NYMAX
               DO I=1,NXMAX
                  JMM0(I,J,K)=0.
                  JLM0(I,J,K)=0.
                  JNN0(I,J,K)=0.
                  JQN0(I,J,K)=0.
               ENDDO
            ENDDO
            CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,JMM(1,1,K),
     1           JMM0(1,1,K),NCPU)
            CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,JLM(1,1,K),
     1           JLM0(1,1,K),NCPU)
            CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,JNN(1,1,K),
     1           JNN0(1,1,K),NCPU)
            CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,JQN(1,1,K),
     1           JQN0(1,1,K),NCPU)
         ENDDO

      ENDIF

      IF(ITLASD.EQ.5) ITLASD=0

C---------------------------
C     PLANE-AVERAGE CS
C---------------------------
      
      DO K=1,NZ
         CSP(K)=0.
         CSP1=0.
         DO J=1,NYEND
            DO I=1,NXMOD
               CSP1=CSP1+CS_LASD(I,J,K)/FLOAT(NXMOD*NYMOD)
            ENDDO
         ENDDO
         CALL MPI_ALLREDUCE(CSP1,CSP(K),1,MPI_DOUBLE_PRECISION,
     1        MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)
      ENDDO

C-----END HERE

      RETURN
      END

C=====SUBROUTINE GETNUT_LASD END HERE







C=======================================================================
      SUBROUTINE GETNUT_PASD(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1     DZ,ZZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,S13W,S23W,NUT,NUTW,HBAR,
     1     DELTAX,DELTAY,UF,VF,WF,MFILT,CSP,Z0,CSPW)

C     BY DI YANG, FEB 2012
C     IN THIS VERSION
C     USE PLANAR-AVERAGED SCALE-DEPENDENT DYNAMIC MODEL
C     REFERENCE: Bou-Zeid ea (2005), PoF Vol.17, 025105

C---------------------------------------------
C     CALCULATE NU_T AND <NU_T> AND S_IJ
C---------------------------------------------

      IMPLICIT NONE
      INCLUDE "mpif.h"
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTW(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S33(NXMAX,NYMAX/NCPU,*)
      REAL S13W(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)

      REAL DZ(*),ZZ(*),ZW(*)
      REAL HER(NXMAX,*),HXR(NXMAX,*),EXR(NXMAX,*)
      REAL HYR(NXMAX,*),EYR(NXMAX,*)
      REAL PEX,PEY
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL UKSI(NXMAX,NYMAX/NCPU),UPHI(NXMAX,NYMAX/NCPU)
      REAL VKSI(NXMAX,NYMAX/NCPU),VPHI(NXMAX,NYMAX/NCPU)
      REAL WKSI(NXMAX,NYMAX/NCPU,NZMAX),WPHI(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WWKSI,WWPHI
      REAL UF(NXMAX,NYMAX/NCPU,*),VF(NXMAX,NYMAX/NCPU,*)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX),WF0(NXMAX,NYMAX/NCPU)
      REAL UZETA(NXMAX,NYMAX/NCPU),VZETA(NXMAX,NYMAX/NCPU)
      REAL WZETA(NXMAX,NYMAX/NCPU),UKSI2D(NXMAX,NYMAX/NCPU)
      REAL UPHI2D(NXMAX,NYMAX/NCPU),VKSI2D(NXMAX,NYMAX/NCPU)
      REAL VPHI2D(NXMAX,NYMAX/NCPU),WKSI2D(NXMAX,NYMAX/NCPU)
      REAL WPHI2D(NXMAX,NYMAX/NCPU)
      REAL UU11(NXMAX,NYMAX/NCPU),UU12(NXMAX,NYMAX/NCPU)
      REAL UU13(NXMAX,NYMAX/NCPU),UU22(NXMAX,NYMAX/NCPU)
      REAL UU23(NXMAX,NYMAX/NCPU),UU33(NXMAX,NYMAX/NCPU)
      REAL UU11F(NXMAX,NYMAX/NCPU),UU12F(NXMAX,NYMAX/NCPU)
      REAL UU13F(NXMAX,NYMAX/NCPU),UU22F(NXMAX,NYMAX/NCPU)
      REAL UU23F(NXMAX,NYMAX/NCPU),UU33F(NXMAX,NYMAX/NCPU)
      REAL SS(NXMAX,NYMAX/NCPU),SSF(NXMAX,NYMAX/NCPU)
      REAL SS11(NXMAX,NYMAX/NCPU),SS12(NXMAX,NYMAX/NCPU)
      REAL SS13(NXMAX,NYMAX/NCPU),SS22(NXMAX,NYMAX/NCPU)
      REAL SS23(NXMAX,NYMAX/NCPU),SS33(NXMAX,NYMAX/NCPU)
      REAL SS11F(NXMAX,NYMAX/NCPU),SS12F(NXMAX,NYMAX/NCPU)
      REAL SS13F(NXMAX,NYMAX/NCPU),SS22F(NXMAX,NYMAX/NCPU)
      REAL SS23F(NXMAX,NYMAX/NCPU),SS33F(NXMAX,NYMAX/NCPU)
      REAL M11(NXMAX,NYMAX/NCPU),M12(NXMAX,NYMAX/NCPU)
      REAL M13(NXMAX,NYMAX/NCPU),M22(NXMAX,NYMAX/NCPU)
      REAL M23(NXMAX,NYMAX/NCPU),M33(NXMAX,NYMAX/NCPU)
      REAL L11(NXMAX,NYMAX/NCPU),L12(NXMAX,NYMAX/NCPU)
      REAL L13(NXMAX,NYMAX/NCPU),L22(NXMAX,NYMAX/NCPU)
      REAL L23(NXMAX,NYMAX/NCPU),L33(NXMAX,NYMAX/NCPU)
      REAL MM,LM,MM1,LM1,DELTA(NZMAX),DELTAT(NZMAX),DELTATT(NZMAX)

      INTEGER ICSC,IVANDRIEST
      REAL RESTOP,RESBOT,APLUS,CS0
      INTEGER IWAVEBOT
      REAL ZCS0
      REAL CSTMP,MLA(NXMAX,NZMAX),MMA(NXMAX,NZMAX),CSA(NXMAX,NZMAX)

      REAL S11F(NXMAX,NYMAX/NCPU),S12F(NXMAX,NYMAX/NCPU)
      REAL S13F(NXMAX,NYMAX/NCPU),S22F(NXMAX,NYMAX/NCPU)
      REAL S23F(NXMAX,NYMAX/NCPU),S33F(NXMAX,NYMAX/NCPU)

      REAL HBAR

      INTEGER I,J,K,MYID,IERR,NYEND
      INTEGER STATUS(MPI_STATUS_SIZE)

      REAL DELTAX,DELTAY,DZM
      INTEGER MFILT

C----------------------------------------
C     NEW VARIABLES FOR LASD MODEL
C----------------------------------------

      REAL UFF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VFF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WFF(NXMAX,NYMAX/NCPU,NZMAX),WFF0(NXMAX,NYMAX/NCPU)
      REAL UU11FF(NXMAX,NYMAX/NCPU),UU12FF(NXMAX,NYMAX/NCPU)
      REAL UU13FF(NXMAX,NYMAX/NCPU),UU22FF(NXMAX,NYMAX/NCPU)
      REAL UU23FF(NXMAX,NYMAX/NCPU),UU33FF(NXMAX,NYMAX/NCPU)
      REAL SSFF(NXMAX,NYMAX/NCPU)
      REAL SS11FF(NXMAX,NYMAX/NCPU),SS12FF(NXMAX,NYMAX/NCPU)
      REAL SS13FF(NXMAX,NYMAX/NCPU),SS22FF(NXMAX,NYMAX/NCPU)
      REAL SS23FF(NXMAX,NYMAX/NCPU),SS33FF(NXMAX,NYMAX/NCPU)
      REAL S11FF(NXMAX,NYMAX/NCPU),S12FF(NXMAX,NYMAX/NCPU)
      REAL S13FF(NXMAX,NYMAX/NCPU),S22FF(NXMAX,NYMAX/NCPU)
      REAL S23FF(NXMAX,NYMAX/NCPU),S33FF(NXMAX,NYMAX/NCPU)
      REAL Q11(NXMAX,NYMAX/NCPU),Q12(NXMAX,NYMAX/NCPU)
      REAL Q13(NXMAX,NYMAX/NCPU),Q22(NXMAX,NYMAX/NCPU)
      REAL Q23(NXMAX,NYMAX/NCPU),Q33(NXMAX,NYMAX/NCPU)
      REAL N11(NXMAX,NYMAX/NCPU),N12(NXMAX,NYMAX/NCPU)
      REAL N13(NXMAX,NYMAX/NCPU),N22(NXMAX,NYMAX/NCPU)
      REAL N23(NXMAX,NYMAX/NCPU),N33(NXMAX,NYMAX/NCPU)
      REAL CSP(NZMAX)
      REAL NN,QN,NN1,QN1

      REAL Z0(NXMAX,NYMAX/NCPU)

      REAL CSPW(NZMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      IF((MYID+1)*NYMAX/NCPU.LE.NYMOD) THEN
         NYEND=NYMAX/NCPU
      ELSEIF(MYID*NYMAX/NCPU.GT.NYMOD) THEN
         NYEND=0
      ELSE
         NYEND=NYMOD-MYID*NYMAX/NCPU
      ENDIF

C---------------------------------------
C     FILTER SIZE FOR DYNAMIC MODEL
C---------------------------------------

      DZM=HBAR/FLOAT(NZ-2)
CC      DELTA=(DELTAX*DELTAY*DZM)**(1./3.)
CC      DELTAT=(2.*DELTAX*2.*DELTAY*DZM)**(1./3.)
CC      DELTATT=(4.*DELTAX*4.*DELTAY*DZM)**(1./3.)
      DO K=1,NZ
         DELTA(K)=(DELTAX*DELTAY*DZ(K)*HBAR)**(1./3.)
         DELTAT(K)=(2.*DELTAX*2.*DELTAY*DZ(K)*HBAR)**(1./3.)
         DELTATT(K)=(4.*DELTAX*4.*DELTAY*DZ(K)*HBAR)**(1./3.)
CC         DELTA(K)=DELTAX
CC         DELTAT(K)=2.*DELTAX
CC         DELTATT(K)=4.*DELTAX
      ENDDO

C      DELTA=SQRT(DELTAX*DELTAY)
C      DELTAT=2.*DELTA
C      DELTATT=4.*DELTA

C-----END HERE

C-----------------------------------
C     CALCULATE STRAIN TENSOR
C-----------------------------------

      DO K=1,NZ
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,U(1,1,K),
     1        UFF(1,1,K),MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,V(1,1,K),
     1        VFF(1,1,K),MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,W(1,1,K),
     1        WFF(1,1,K),MFILT)
      ENDDO

      DO K=1,NZ-1
         CALL PDFX_PARA(W(1,1,K),WKSI(1,1,K),FTMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)

         CALL PDFY_PARA(W(1,1,K),WPHI(1,1,K),FTMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
      ENDDO

      DO K=2,NZ

         CALL PDFX_PARA(U(1,1,K),UKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)

         CALL PDFY_PARA(U(1,1,K),UPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         CALL PDFX_PARA(V(1,1,K),VKSI,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)

         CALL PDFY_PARA(V(1,1,K),VPHI,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND

               IF(K.EQ.2) THEN
CCC                  UZETA(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
CCC     1                 /(2.*DZ(2))
CCC                  VZETA(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
CCC     1                 /(2.*DZ(2))
                  UZETA(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  VZETA(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
CC                  UZETA(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
CC     1                 /(3.*DZ(2))
CC                  VZETA(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
CC     1                 /(3.*DZ(2))
CC                  UZETA(I,J)=(U(I,J,2)-U(I,J,1))/DZ(1)
CC                  VZETA(I,J)=(V(I,J,2)-V(I,J,1))/DZ(1)
CC                  UZETA(I,J)=(U(I,J,3)-U(I,J,1))/(DZ(2)+DZ(1))
CC                  VZETA(I,J)=(V(I,J,3)-V(I,J,1))/(DZ(2)+DZ(1))
                  WZETA(I,J)=(W(I,J,2)-W(I,J,1))/(DZ(2)/2.+DZ(1))
                  WWKSI=(WKSI(I,J,2)+WKSI(I,J,1))/2.0
                  WWPHI=(WPHI(I,J,2)+WPHI(I,J,1))/2.0
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(NZ-2)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ELSE IF(K.EQ.NZ) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ)-W(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WWKSI=WKSI(I,J,NZ-1)
                  WWPHI=WPHI(I,J,NZ-1)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WZETA(I,J)=(W(I,J,K)-W(I,J,K-1))/(DZ(K)/2.+DZ(K-1)/2.)
                  WWKSI=(WKSI(I,J,K)+WKSI(I,J,K-1))/2.0
                  WWPHI=(WPHI(I,J,K)+WPHI(I,J,K-1))/2.0
               ENDIF

               S11(I,J,K)=UKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZETA(I,J)
               S12(I,J,K)=0.5*(UPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     &              *UZETA(I,J)+VKSI(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     &              *VZETA(I,J))
               S13(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WWKSI
     &              +(HXR(I,J)-ZZ(K)*EXR(I,J))*WZETA(I,J))
               S22(I,J,K)=VPHI(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZETA(I,J)
               S23(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WWPHI
     &              +(HYR(I,J)-ZZ(K)*EYR(I,J))*WZETA(I,J))
               S33(I,J,K)=HER(I,J)*WZETA(I,J)

            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND

               IF(K.EQ.2) THEN
                  UZETA(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  VZETA(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
                  WZETA(I,J)=(W(I,J,3)-W(I,J,1))/(DZ(3)/2.+DZ(2)+DZ(1))
                  WKSI2D(I,J)=WKSI(I,J,2)
                  WPHI2D(I,J)=WPHI(I,J,2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UZETA(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
                  VZETA(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
                  WZETA(I,J)=(W(I,J,NZ)-W(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WKSI2D(I,J)=WKSI(I,J,NZ-1)
                  WPHI2D(I,J)=WPHI(I,J,NZ-1)
               ELSE IF(K.EQ.(NZ-2)) THEN
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)+DZ(K)
     &                 +DZ(K-1)/2.)
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ELSE
                  UZETA(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)
                  VZETA(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)
                  WZETA(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(DZ(K+1)/2.+DZ(K)
     &                 +DZ(K-1)/2.)
                  WKSI2D(I,J)=WKSI(I,J,K)
                  WPHI2D(I,J)=WPHI(I,J,K)
               ENDIF

               S13W(I,J,K)=0.5*(HER(I,J)*UZETA(I,J)+WKSI2D(I,J)+
     &              (HXR(I,J)-ZW(K)*EXR(I,J))*WZETA(I,J))
               S23W(I,J,K)=0.5*(HER(I,J)*VZETA(I,J)+WPHI2D(I,J)+
     &              (HYR(I,J)-ZW(K)*EYR(I,J))*WZETA(I,J))

            ENDDO
         ENDDO

      ENDDO

C-----END HERE

C---------------------------------------------------
C     CALCULATE TENSORS FOR MODEL COEFFICIENT
C---------------------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~
C     L_IJ AND M_IJ
C~~~~~~~~~~~~~~~~~~~~~~~~

CC      K=1
CC      DO I=1,NXMOD
CC         DO J=1,NYEND
CC            NUT(I,J,K)=0.0
CC         ENDDO
CC      ENDDO

      DO K=2,NZ

         DO I=1,NXMOD
            DO J=1,NYEND
               SS(I,J)=SQRT(2.0*(S11(I,J,K)**2+2.*S12(I,J,K)**2
     &              +2.*S13(I,J,K)**2+S22(I,J,K)**2+2.*S23(I,J,K)**2
     &              +S33(I,J,K)**2))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               SS11(I,J)=SS(I,J)*S11(I,J,K)
               SS12(I,J)=SS(I,J)*S12(I,J,K)
               SS13(I,J)=SS(I,J)*S13(I,J,K)
               SS22(I,J)=SS(I,J)*S22(I,J,K)
               SS23(I,J)=SS(I,J)*S23(I,J,K)
               SS33(I,J)=SS(I,J)*S33(I,J,K)
            ENDDO
         ENDDO

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS11,SS11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS12,SS12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS13,SS13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS22,SS22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS23,SS23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,SS33,SS33F,MFILT)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S11(1,1,K),S11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S12(1,1,K),S12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S13(1,1,K),S13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S22(1,1,K),S22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S23(1,1,K),S23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,S33(1,1,K),S33F,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               SSF(I,J)=SQRT(2.0*(S11F(I,J)**2+2.*S12F(I,J)**2
     &              +2.*S13F(I,J)**2+S22F(I,J)**2+2.*S23F(I,J)**2
     &              +S33F(I,J)**2))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               M11(I,J)=2.*DELTA(K)**2*SS11F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S11F(I,J)
               M12(I,J)=2.*DELTA(K)**2*SS12F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S12F(I,J)
               M13(I,J)=2.*DELTA(K)**2*SS13F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S13F(I,J)
               M22(I,J)=2.*DELTA(K)**2*SS22F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S22F(I,J)
               M23(I,J)=2.*DELTA(K)**2*SS23F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S23F(I,J)
               M33(I,J)=2.*DELTA(K)**2*SS33F(I,J)-2.*DELTAT(K)**2
     &              *SSF(I,J)*S33F(I,J)

               UU11(I,J)=U(I,J,K)*U(I,J,K)
               UU12(I,J)=U(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU13(I,J)=U(I,J,K)*W(I,J,K-1)
               ELSE
                  UU13(I,J)=U(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               UU22(I,J)=V(I,J,K)*V(I,J,K)
               IF(K.EQ.NZ) THEN
                  UU23(I,J)=V(I,J,K)*W(I,J,K-1)
               ELSE
                  UU23(I,J)=V(I,J,K)*(W(I,J,K)+W(I,J,K-1))/2.0
               ENDIF
               IF(K.EQ.NZ) THEN
                  UU33(I,J)=W(I,J,K-1)*W(I,J,K-1)
               ELSE
                  UU33(I,J)=((W(I,J,K)+W(I,J,K-1))/2.0)**2
               ENDIF
            ENDDO
         ENDDO

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU11,UU11F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU12,UU12F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU13,UU13F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU22,UU22F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU23,UU23F,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UU33,UU33F,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.NZ) THEN
                  WF0(I,J)=WF(I,J,NZ-1)
               ELSE
                  WF0(I,J)=(WF(I,J,K)+WF(I,J,K-1))/2.0
               ENDIF
               L11(I,J)=UU11F(I,J)-UF(I,J,K)*UF(I,J,K)
               L12(I,J)=UU12F(I,J)-UF(I,J,K)*VF(I,J,K)
               L13(I,J)=UU13F(I,J)-UF(I,J,K)*WF0(I,J)
               L22(I,J)=UU22F(I,J)-VF(I,J,K)*VF(I,J,K)
               L23(I,J)=UU23F(I,J)-VF(I,J,K)*WF0(I,J)
               L33(I,J)=UU33F(I,J)-WF0(I,J)*WF0(I,J)
            ENDDO
         ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~
C     Q_IJ AND N_JI
C~~~~~~~~~~~~~~~~~~~~~~~~

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS11,SS11FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS12,SS12FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS13,SS13FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS22,SS22FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS23,SS23FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,SS33,SS33FF,
     1        MFILT)

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S11(1,1,K),
     1        S11FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S12(1,1,K),
     1        S12FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S13(1,1,K),
     1        S13FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S22(1,1,K),
     1        S22FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S23(1,1,K),
     1        S23FF,MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,S33(1,1,K),
     1        S33FF,MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               SSFF(I,J)=SQRT(2.0*(S11FF(I,J)**2+2.*S12FF(I,J)**2
     &              +2.*S13FF(I,J)**2+S22FF(I,J)**2+2.*S23FF(I,J)**2
     &              +S33FF(I,J)**2))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               N11(I,J)=2.*DELTA(K)**2*SS11FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S11FF(I,J)
               N12(I,J)=2.*DELTA(K)**2*SS12FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S12FF(I,J)
               N13(I,J)=2.*DELTA(K)**2*SS13FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S13FF(I,J)
               N22(I,J)=2.*DELTA(K)**2*SS22FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S22FF(I,J)
               N23(I,J)=2.*DELTA(K)**2*SS23FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S23FF(I,J)
               N33(I,J)=2.*DELTA(K)**2*SS33FF(I,J)-2.*DELTATT(K)**2
     &              *SSFF(I,J)*S33FF(I,J)
            ENDDO
         ENDDO

         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU11,UU11FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU12,UU12FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU13,UU13FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU22,UU22FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU23,UU23FF,
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,2.*DELTAX,2.*DELTAY,UU33,UU33FF,
     1        MFILT)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(K.EQ.NZ) THEN
                  WFF0(I,J)=WFF(I,J,NZ-1)
               ELSE
                  WFF0(I,J)=(WFF(I,J,K)+WFF(I,J,K-1))/2.0
               ENDIF
               Q11(I,J)=UU11FF(I,J)-UFF(I,J,K)*UFF(I,J,K)
               Q12(I,J)=UU12FF(I,J)-UFF(I,J,K)*VFF(I,J,K)
               Q13(I,J)=UU13FF(I,J)-UFF(I,J,K)*WFF0(I,J)
               Q22(I,J)=UU22FF(I,J)-VFF(I,J,K)*VFF(I,J,K)
               Q23(I,J)=UU23FF(I,J)-VFF(I,J,K)*WFF0(I,J)
               Q33(I,J)=UU33FF(I,J)-WFF0(I,J)*WFF0(I,J)
            ENDDO
         ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CALCULATE SGS COEFFICIENT CS
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

         MM1=0.
         LM1=0.
         NN1=0.
         QN1=0.
         MM=0.
         LM=0.
         NN=0.
         QN=0.
         DO I=1,NXMOD
            DO J=1,NYEND
               MM1=MM1+(M11(I,J)*M11(I,J)+2.*M12(I,J)
     1              *M12(I,J)+2.*M13(I,J)*M13(I,J)+M22(I,J)*M22(I,J)
     1              +2.*M23(I,J)*M23(I,J)+M33(I,J)*M33(I,J))
               LM1=LM1+(M11(I,J)*L11(I,J)+2.*M12(I,J)
     1              *L12(I,J)+2.*M13(I,J)*L13(I,J)+M22(I,J)*L22(I,J)
     1              +2.*M23(I,J)*L23(I,J)+M33(I,J)*L33(I,J))
               NN1=NN1+(N11(I,J)*N11(I,J)+2.*N12(I,J)
     1              *N12(I,J)+2.*N13(I,J)*N13(I,J)+N22(I,J)*N22(I,J)
     1              +2.*N23(I,J)*N23(I,J)+N33(I,J)*N33(I,J))
               QN1=QN1+(N11(I,J)*Q11(I,J)+2.*N12(I,J)
     1              *Q12(I,J)+2.*N13(I,J)*Q13(I,J)+N22(I,J)*Q22(I,J)
     1              +2.*N23(I,J)*Q23(I,J)+N33(I,J)*Q33(I,J))
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(LM1,LM,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CALL MPI_ALLREDUCE(MM1,MM,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CALL MPI_ALLREDUCE(NN1,NN,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         CALL MPI_ALLREDUCE(QN1,QN,1,MPI_DOUBLE_PRECISION,
     &        MPI_SUM,MPI_COMM_WORLD,IERR)
         
         CSP(K)=(LM/MM)/(QN*MM/(NN*LM))
         CSPW(K)=CSP(K)

         DO I=1,NXMOD
            DO J=1,NYEND

               IF(IVANDRIEST.EQ.2) THEN
                  CSP(K)=((CS0*DELTA(K))**(-3)+(0.4*(ZZ(K)*HBAR
     1                 +Z0(I,J)))**(-3))**(-2./3.)/DELTA(K)**2
                  CSPW(K)=((CS0*DELTA(K))**(-3)+(0.4*(ZZ(K)*HBAR
     1                 +Z0(I,J)))**(-3))**(-2./3.)/DELTA(K)**2
               ENDIF

               IF(ICSC.EQ.1) THEN
                  IF(CSP(K).LT.0) THEN
                     CSP(K)=((CS0*DELTA(K))**(-3)+(0.4*(ZZ(K)*HBAR
     1                    +Z0(I,J)))**(-3))**(-2./3.)/DELTA(K)**2
                     CSPW(K)=((CS0*DELTA(K))**(-3)+(0.4*(ZZ(K)*HBAR
     1                    +Z0(I,J)))**(-3))**(-2./3.)/DELTA(K)**2
                  ENDIF
               ENDIF

               NUT(I,J,K)=CSP(K)*DELTA(K)**2*SS(I,J)
               
            ENDDO
         ENDDO

      ENDDO

C+++
C     FREE-SLIP CONDITION AT BOTTOM
      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,1)=NUT(I,J,2)
         ENDDO
      ENDDO
C+++

      DO I=1,NXMOD
         DO J=1,NYEND
            NUT(I,J,NZ+1)=NUT(I,J,NZ-1)
            S11(I,J,NZ+1)=S11(I,J,NZ-1)
            S12(I,J,NZ+1)=S12(I,J,NZ-1)
            S13(I,J,NZ+1)=-S13(I,J,NZ-1)
            S22(I,J,NZ+1)=S22(I,J,NZ-1)
            S23(I,J,NZ+1)=-S23(I,J,NZ-1)
            S33(I,J,NZ+1)=S33(I,J,NZ-1)
         ENDDO
      ENDDO

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               IF(K.EQ.1) THEN
                  NUTW(I,J,K)=NUT(I,J,K)
               ELSE IF(K.EQ.NZ-1) THEN
                  NUTW(I,J,K)=NUT(I,J,K+1)
               ELSE IF(K.EQ.NZ) THEN
                  NUTW(I,J,K)=NUT(I,J,K)
               ELSE
                  NUTW(I,J,K)=(NUT(I,J,K-1)+NUT(I,J,K))/2.
               ENDIF
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

      RETURN
      END

C=====SUBROUTINE GETNUT_PASD END HERE







C=========================================================================
      SUBROUTINE COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL HT(NXMAX,*),ET(NXMAX,NYMAX/NCPU,*),ETW(NXMAX,NYMAX/NCPU,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*),HER(NXMAX,*)
      REAL ETMP(NXMAX,NYMAX/NCPU),TMP(NXMAX,NYMAX/NCPU)
      REAL ZZ(*),ZW(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ETMP(I,J)=0.
         ENDDO
      ENDDO

      DO K=1,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=(1-ZZ(K))*HT(I,J)-ZZ(K)*ETMP(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,TMP,NCPU)            
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               ET(I,J,K)=TMP(I,J)*HER(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,ET(1,1,K),NCPU)
      ENDDO

      DO K=2,NZ-2
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=(1-ZW(K))*HT(I,J)-ZW(K)*ETMP(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,TMP,NCPU)
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               ETW(I,J,K)=TMP(I,J)*HER(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,ETW(1,1,K),NCPU)
      ENDDO

      RETURN
      END

C=====SUBROUTINE COEF_ET END HERE







C=====================================================================
      SUBROUTINE FUN_U_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S11,S12,
     1     S13,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),T11(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T11X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11Z(NXMAX,NYMAX/NCPU,NZMAX),T12Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WXZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),UZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)
            T13_2(I,J)=-NUT(I,J,2)*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
            ENDDO
         ENDDO
      ENDDO      

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T11(I,J,NZ+1)=2.*T11(I,J,NZ)-T11(I,J,NZ-1)
CC            T12(I,J,NZ+1)=2.*T12(I,J,NZ)-T12(I,J,NZ-1)
C+++
C     FOR FREE-SLIP CONDITION
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
C+++
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T11,T11Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFXZ_W_PARA_XY(W,WXZ,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(U,UZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=2,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
      DO K=2,NZ
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(-UU(I,J,4)+4.*UU(I,J,3)-3.*UU(I,J,2))
     1                 /(2.*DZ(2))
                  VFZ(I,J)=(-UV(I,J,4)+4.*UV(I,J,3)-3.*UV(I,J,2))
     1                 /(2.*DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
     1                 -W(I,J,1)*U(I,J,1))/(DZ(2)/2.+DZ(1))
                  FZ(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
     1                 /(2.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))-HER(I,J)
     1                 *(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))+NUT(I,J,K)
     1                 *UZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S13(I,J,K)+NUT(I,J,K)*(HER(I,J)*WXZ(I,J,K)
     1                 -HER(I,J)*EXR(I,J)*WZ(I,J,K)+HER(I,J)*(HXR(I,J)
     1                 -ZZ(K)*EXR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-4) HU(I,J,K)=HNEW
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES END HERE







C=====================================================================
      SUBROUTINE FUN_U_LES2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S11,S12,
     1     S13,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW,WW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
CC      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
CC      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU),FT(NXMAX,NYMAX/NCPU)
CC      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),T11(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T11X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11Z(NXMAX,NYMAX/NCPU,NZMAX),T12Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WXZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),UZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
CC            T13_1(I,J)=TAUWX(I,J)
CC            T13_2(I,J)=-NUT(I,J,2)*(T13_2(I,J)+(HXR(I,J)
CC     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
CC     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
CC     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
            T13_1(I,J)=TAUWX(I,J)-(3.*NUT(I,J,2)-NUT(I,J,3))/2.
     1           *(T13_1(I,J)+(HXR(I,J)-ZZ(1)*EXR(I,J))
     1           *(W(I,J,2)-W(I,J,1))/DZ(2))
            T13_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
            ENDDO
         ENDDO
      ENDDO      

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T11(I,J,NZ+1)=2.*T11(I,J,NZ)-T11(I,J,NZ-1)
CC            T12(I,J,NZ+1)=2.*T12(I,J,NZ)-T12(I,J,NZ-1)
C+++
C     FOR FREE-SLIP CONDITION
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
C+++
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T11,T11Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFXZ_W_PARA_XY(W,WXZ,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(U,UZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

CC      DO K=1,NZMAX
CC         DO I=1,NXMOD 
CC            DO J=1,NYMAX/NCPU
CC               UU(I,J,K)=U(I,J,K)*U(I,J,K)
CC               UV(I,J,K)=U(I,J,K)*V(I,J,K)
CC            ENDDO
CC         ENDDO
CC      ENDDO
      
CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
CC     1     TRIGSY,IFAX,UU,NCPU)
CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
CC     1     TRIGSY,IFAX,UV,NCPU)

      DO K=2,NZ
         
         CALL PDFX_PARA(U(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
CC                  FZ(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
CC     1                 /(2.*DZ(2))
                  FZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               UFX(I,J)=U(I,J,K)*(UFX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *FZ(I,J))
               VFY(I,J)=V(I,J,K)*(VFY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *FZ(I,J))
               IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K)+W(I,J,K-1))/2.
               ENDIF
               WFZ(I,J)=WW*HER(I,J)*FZ(I,J)
               FT(I,J)=ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
               
CC               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(-UU(I,J,4)+4.*UU(I,J,3)-3.*UU(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  VFZ(I,J)=(-UV(I,J,4)+4.*UV(I,J,3)-3.*UV(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
CC     1                 -W(I,J,1)*U(I,J,1))/(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
CC     1                 /(2.*DZ(2))
CC               ELSE IF(K.EQ.(NZ-1)) THEN
CC                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
CC                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
CC                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
CC     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
CC                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
CC               ELSE IF(K.EQ.NZ) THEN
CC                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
CC                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
CC                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
CC     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
CC     1                 /DZ(NZ-2)
CC                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
CC               ELSE
CC                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
CC                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
CC                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
CC     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
CC     1                 /(DZ(K)/2.+DZ(K-1)/2.)
CC                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
CC               ENDIF
               
CC            ENDDO
CC         ENDDO
         
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,UFZ,NCPU)
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,VFZ,NCPU)
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,WFZ,NCPU)
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
CC               WFZ(I,J)=WFZ(I,J)*HER(I,J)
CC            ENDDO
CC         ENDDO
         
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,WFZ,NCPU)
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
CC               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
CC     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
CC     1              +ET(I,J,K)*FZ(I,J)
CC            ENDDO
CC         ENDDO
         
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
CC               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))-HER(I,J)
     1                 *(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))+NUT(I,J,K)
     1                 *UZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S13(I,J,K)+NUT(I,J,K)*(HER(I,J)*WXZ(I,J,K)
     1                 -HER(I,J)*EXR(I,J)*WZ(I,J,K)+HER(I,J)*(HXR(I,J)
     1                 -ZZ(K)*EXR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-6) HU(I,J,K)=HNEW
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES2 END HERE








C=====================================================================
      SUBROUTINE FUN_U_LES3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S11,S12,
     1     S13,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW,WW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU),FT(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),T11(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T11X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11Z(NXMAX,NYMAX/NCPU,NZMAX),T12Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WXZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),UZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)
            T13_2(I,J)=-NUT(I,J,2)*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
            ENDDO
         ENDDO
      ENDDO      

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T11,T11Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFXZ_W_PARA_XY(W,WXZ,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(U,UZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=2,NZ
         
         CALL PDFX_PARA(U(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
                  FZ(I,J)=((U(I,J,3)+U(I,J,2))/2.-U(I,J,1))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               UFX(I,J)=U(I,J,K)*(UFX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *FZ(I,J))
               VFY(I,J)=V(I,J,K)*(VFY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *FZ(I,J))
               IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K)+W(I,J,K-1))/2.
               ENDIF
               WFZ(I,J)=WW*HER(I,J)*FZ(I,J)
               FT(I,J)=ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA(T11(1,1,K),T11X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))-HER(I,J)
     1                 *(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))+NUT(I,J,K)
     1                 *UZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S13(I,J,K)+NUT(I,J,K)*(HER(I,J)*WXZ(I,J,K)
     1                 -HER(I,J)*EXR(I,J)*WZ(I,J,K)+HER(I,J)*(HXR(I,J)
     1                 -ZZ(K)*EXR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-6) HU(I,J,K)=HNEW
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES3 END HERE








C=====================================================================
      SUBROUTINE FUN_U_LES4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S11,S12,
     1     S13,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),T11(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T11X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11Z(NXMAX,NYMAX/NCPU,NZMAX),T12Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WXZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),UZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)
            T13_2(I,J)=-NUT(I,J,2)*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_2,NCPU)

C-----END HERE

CC      DO K=2,NZ
      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)

      CALL PDFZ_U_PARA_XY_WALLMODEL(T11,T11Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFXZ_W_PARA_XY(W,WXZ,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(U,UZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=2,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
CC      DO K=2,NZ
      DO K=2,NZ-1
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(-UU(I,J,4)+4.*UU(I,J,3)-3.*UU(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  VFZ(I,J)=(-UV(I,J,4)+4.*UV(I,J,3)-3.*UV(I,J,2))
CC     1                 /(2.*DZ(2))
                  UFZ(I,J)=(UU(I,J,3)-UU(I,J,2))/DZ(2)
                  VFZ(I,J)=(UV(I,J,3)-UV(I,J,2))/DZ(2)
                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
     1                 -W(I,J,1)*(-U(I,J,3)+3.*U(I,J,2))/2.)
     1                 /(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
CC     1                 /(2.*DZ(2))
                  FZ(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))-HER(I,J)
     1                 *(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))+NUT(I,J,K)
     1                 *UZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S13(I,J,K)+NUT(I,J,K)*(HER(I,J)*WXZ(I,J,K)
     1                 -HER(I,J)*EXR(I,J)*WZ(I,J,K)+HER(I,J)*(HXR(I,J)
     1                 -ZZ(K)*EXR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-4) HU(I,J,K)=HNEW
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES4 END HERE








C=====================================================================
      SUBROUTINE FUN_U_LES5(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S11,S12,
     1     S13,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS
C     FIRST ORDER SCHEME NEAR BOTTOM

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),T11(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T11X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11Z(NXMAX,NYMAX/NCPU,NZMAX),T12Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WXZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),UZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)
            T13_2(I,J)=-NUT(I,J,2)*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
            ENDDO
         ENDDO
      ENDDO      

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T11,T11Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFXZ_W_PARA_XY(W,WXZ,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(U,UZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=2,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
      DO K=2,NZ
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(UU(I,J,3)-UU(I,J,2))/DZ(2)
                  VFZ(I,J)=(UV(I,J,3)-UV(I,J,2))/DZ(2)
                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)
     1                 -(W(I,J,2)+W(I,J,1))/2.*U(I,J,2))/DZ(2)
                  FZ(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))-HER(I,J)
     1                 *(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T11X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T11Z(I,J,K))-(T12Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T12Z(I,J,K))+NUT(I,J,K)
     1                 *UZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S13(I,J,K)+NUT(I,J,K)*(HER(I,J)*WXZ(I,J,K)
     1                 -HER(I,J)*EXR(I,J)*WZ(I,J,K)+HER(I,J)*(HXR(I,J)
     1                 -ZZ(K)*EXR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-4) HU(I,J,K)=HNEW
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES5 END HERE








C=====================================================================
      SUBROUTINE FUN_U_LES6(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,S12,S13W,NUT,
     1     NUTW,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL T11(NXMAX,NYMAX/NCPU,NZMAX),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11X(NXMAX,NYMAX/NCPU),T12Y(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),S13W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)
            T13_2(I,J)=-NUT(I,J,2)*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_2,NCPU)

C-----END HERE

CC      DO K=2,NZ
      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)

CC      CALL PDFZ_U_PARA_XY_WALLMODEL(T11,T11Z,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFXZ_W_PARA_XY(W,WXZ,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
CC     1     NXMAX,NYMAX,NCPU,NZ,DZ)
CC      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ2_U_PARA_XY_WALLMODEL(U,UZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=2,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
CC      DO K=2,NZ
      DO K=2,NZ-1
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(-UU(I,J,4)+4.*UU(I,J,3)-3.*UU(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  VFZ(I,J)=(-UV(I,J,4)+4.*UV(I,J,3)-3.*UV(I,J,2))
CC     1                 /(2.*DZ(2))
                  UFZ(I,J)=(UU(I,J,3)-UU(I,J,2))/DZ(2)
                  VFZ(I,J)=(UV(I,J,3)-UV(I,J,2))/DZ(2)
                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
     1                 -W(I,J,1)*(-U(I,J,3)+3.*U(I,J,2))/2.)
     1                 /(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))
CC     1                 /(2.*DZ(2))
                  FZ(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,3)-T11(I,J,2))/DZ(2)
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
     1                 +HER(I,J)*(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K)-T11(I,J,K-1))/(2.*DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K)-T12(I,J,K-1))/(2.*DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))/DZ(K-1)
               ELSE
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K+1)-T11(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K+1)-T12(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))
     1                 /(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-4) HU(I,J,K)=HNEW
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES6 END HERE







C=====================================================================
      SUBROUTINE FUN_U_LES7(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,S12,S13W,NUT,
     1     NUTW,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL T11(NXMAX,NYMAX/NCPU,NZMAX),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11X(NXMAX,NYMAX/NCPU),T12Y(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),S13W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)

      REAL NUTX(NXMAX,NYMAX/NCPU),NUTY(NXMAX,NYMAX/NCPU)
      REAL NUTZ(NXMAX,NYMAX/NCPU)
      REAL UX(NXMAX,NYMAX/NCPU),UY(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU),VX(NXMAX,NYMAX/NCPU)
      REAL VZ(NXMAX,NYMAX/NCPU)
      REAL WX(NXMAX,NYMAX/NCPU),WW(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU)
      REAL LAPU(NXMAX,NYMAX/NCPU,NZMAX)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)
            T13_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*HER(I,J)
     1           *(U(I,J,3)-U(I,J,2))/DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_1,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_2,NCPU)

C-----END HERE

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
      DO K=2,NZ-1
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(UU(I,J,3)-UU(I,J,2))/DZ(2)
CC                  VFZ(I,J)=(UV(I,J,3)-UV(I,J,2))/DZ(2)
CC                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
CC     1                 -W(I,J,1)*(-U(I,J,3)+3.*U(I,J,2))/2.)
CC     1                 /(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  UFZ(I,J)=(UU(I,J,3)+3.*UU(I,J,2)-4.*UU(I,J,1))
     1                 /(3.*DZ(2))
                  VFZ(I,J)=(UV(I,J,3)+3.*UV(I,J,2)-4.*UV(I,J,1))
     1                 /(3.*DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
     1                 -W(I,J,1)*U(I,J,1))/(DZ(2)/2.+DZ(1))
                  FZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(NUT(1,1,K),NUTX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(NUT(1,1,K),NUTY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
                  NUTZ(I,J)=(NUT(I,J,3)-NUT(I,J,2))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  NUTZ(I,J)=(NUT(I,J,K)-NUT(I,J,K-1))/(2.*DZ(K-1))
               ELSE
                  NUTZ(I,J)=(NUT(I,J,K+1)-NUT(I,J,K-1))
     1                 /(DZ(K-1)+DZ(K))
               ENDIF
               NUTX(I,J)=NUTX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*NUTZ(I,J)
               NUTY(I,J)=NUTY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*NUTZ(I,J)
               NUTZ(I,J)=HER(I,J)*NUTZ(I,J)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA(U(1,1,K),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(U(1,1,K),UY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         CALL PDFX_PARA(V(1,1,K),VX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WW(I,J)=(W(I,J,K)+W(I,J,K-1))/2.
               IF(K.EQ.2) THEN
                  VZ(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K)
               ELSE IF(K.EQ.NZ-1) THEN
                  VZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K-1)
               ELSE
                  VZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO

         CALL PDFX_PARA(WW,WX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               UX(I,J)=UX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*FZ(I,J)
               UY(I,J)=UY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*FZ(I,J)
               UZ(I,J)=HER(I,J)*FZ(I,J)
               VX(I,J)=VX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*VZ(I,J)
               WX(I,J)=WX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*WZ(I,J)
            ENDDO
         ENDDO

         CALL LAP_U_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1        ZZ,WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,
     1        HER,NUT,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
                  TSGS(I,J)=-2.*NUTX(I,J)*UX(I,J)-NUTY(I,J)*(UY(I,J)
     1                 +VX(I,J))-NUTZ(I,J)*WX(I,J)-LAPU(I,J,2)
     1                 +HER(I,J)*(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE
                  TSGS(I,J)=-2.*NUTX(I,J)*UX(I,J)-NUTY(I,J)*(UY(I,J)
     1                 +VX(I,J))-NUTZ(I,J)*(UZ(I,J)+WX(I,J))
     1                 -LAPU(I,J,K)
               ENDIF
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-4) HU(I,J,K)=HNEW
C               hu(i,j,k)=hnew
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES7 END HERE








C=====================================================================
      SUBROUTINE FUN_U_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,S12,S13W,NUT,
     1     NUTW,TAUWX)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL T11(NXMAX,NYMAX/NCPU,NZMAX),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11X(NXMAX,NYMAX/NCPU),T12Y(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),S13W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,1),T13_1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)-(3.*NUT(I,J,2)-NUT(I,J,3))/2.
     1           *(T13_1(I,J)+(HXR(I,J)-ZZ(1)*EXR(I,J))
     1           *(W(I,J,2)-W(I,J,1))/DZ(2))
            T13_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_1,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_2,NCPU)

C-----END HERE

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
CC      DO K=2,NZ
      DO K=2,NZ-1
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(UU(I,J,3)+3.*UU(I,J,2)-4.*UU(I,J,1))
     1                 /(3.*DZ(2))
                  VFZ(I,J)=(UV(I,J,3)+3.*UV(I,J,2)-4.*UV(I,J,1))
     1                 /(3.*DZ(2))
CC                  UFZ(I,J)=(UU(I,J,3)-UU(I,J,1))/(DZ(1)+DZ(2))
CC                  VFZ(I,J)=(UV(I,J,3)-UV(I,J,1))/(DZ(1)+DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
     1                 -W(I,J,1)*U(I,J,1))/(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(U(I,J,3)-U(I,J,1))/(DZ(1)+DZ(2))
                  FZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,3)-T11(I,J,2))/DZ(2)
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
     1                 +HER(I,J)*(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K)-T11(I,J,K-1))/(2.*DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K)-T12(I,J,K-1))/(2.*DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))/DZ(K-1)
               ELSE
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K+1)-T11(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K+1)-T12(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))
     1                 /(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-6) HU(I,J,K)=HNEW
C               hu(i,j,k)=hnew
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES8 END HERE







C=======================================================================
      SUBROUTINE FUN_V_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S12,S22,S23,
     1     TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22(NXMAX,NYMAX/NCPU,NZMAX),T12X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),T22Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WYZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),VZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)
            T23_2(I,J)=-NUT(I,J,2)*(T23_2(I,J)+(HYR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T12(I,J,NZ+1)=2.*T12(I,J,NZ)-T12(I,J,NZ-1)
CC            T22(I,J,NZ+1)=2.*T22(I,J,NZ)-T22(I,J,NZ-1)
C+++
C     FOR FREE-SLIP CONDITION
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
C+++
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T22,T22Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFYZ_W_PARA_XY(W,WYZ,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(V,VZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               VU(I,J,K)=V(I,J,K)*U(I,J,K)
               VV(I,J,K)=V(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VV,NCPU)
      
      DO K=2,NZ
         
         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(-VU(I,J,4)+4.*VU(I,J,3)-3.*VU(I,J,2))
     1                 /(2.*DZ(2))
                  VFZ(I,J)=(-VV(I,J,4)+4.*VV(I,J,3)-3.*VV(I,J,2))
     1                 /(2.*DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
     1                 -W(I,J,1)*V(I,J,1))/(DZ(2)/2.+DZ(1))
                  FZ(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
     1                 /(2.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T12(1,1,K),T12X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))-HER(I,J)
     1                 *(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))+NUT(I,J,K)
     1                 *VZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S23(I,J,K)+NUT(I,J,K)*(HER(I,J)*WYZ(I,J,K)
     1                 -HER(I,J)*EYR(I,J)*WZ(I,J,K)+HER(I,J)*(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-4) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES END HERE








C=======================================================================
      SUBROUTINE FUN_V_LES2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S12,S22,S23,
     1     TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW,WW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
CC      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
CC      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU),FT(NXMAX,NYMAX/NCPU)
CC      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22(NXMAX,NYMAX/NCPU,NZMAX),T12X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),T22Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WYZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),VZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
CC            T23_1(I,J)=TAUWY(I,J)
CC            T23_2(I,J)=-NUT(I,J,2)*(T23_2(I,J)+(HYR(I,J)
CC     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
CC     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
CC     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
            T23_1(I,J)=TAUWY(I,J)-(3.*NUT(I,J,2)-NUT(I,J,3))/2.
     1           *(T23_1(I,J)+(HYR(I,J)-ZZ(1)*EYR(I,J))
     1           *(W(I,J,2)-W(I,J,1))/DZ(2))
            T23_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*(T23_2(I,J)+(HYR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T12(I,J,NZ+1)=2.*T12(I,J,NZ)-T12(I,J,NZ-1)
CC            T22(I,J,NZ+1)=2.*T22(I,J,NZ)-T22(I,J,NZ-1)
C+++
C     FOR FREE-SLIP CONDITION
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
C+++
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T22,T22Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFYZ_W_PARA_XY(W,WYZ,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(V,VZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

CC      DO K=1,NZMAX
CC         DO I=1,NXMOD 
CC            DO J=1,NYMAX/NCPU
CC               VU(I,J,K)=V(I,J,K)*U(I,J,K)
CC               VV(I,J,K)=V(I,J,K)*V(I,J,K)
CC            ENDDO
CC         ENDDO
CC      ENDDO
      
CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
CC     1     TRIGSY,IFAX,VU,NCPU)
CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
CC     1     TRIGSY,IFAX,VV,NCPU)
      
      DO K=2,NZ
         
         CALL PDFX_PARA(V(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
CC                  FZ(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
CC     1                 /(2.*DZ(2))
                  FZ(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               UFX(I,J)=U(I,J,K)*(UFX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *FZ(I,J))
               VFY(I,J)=V(I,J,K)*(VFY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *FZ(I,J))
               IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K)+W(I,J,K-1))/2.
               ENDIF
               WFZ(I,J)=WW*HER(I,J)*FZ(I,J)
               FT(I,J)=ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
               
CC               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(-VU(I,J,4)+4.*VU(I,J,3)-3.*VU(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  VFZ(I,J)=(-VV(I,J,4)+4.*VV(I,J,3)-3.*VV(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
CC     1                 -W(I,J,1)*V(I,J,1))/(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
CC     1                 /(2.*DZ(2))
CC               ELSE IF(K.EQ.(NZ-1)) THEN
CC                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
CC                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
CC                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
CC     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
CC                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
CC               ELSE IF(K.EQ.NZ) THEN
CC                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
CC                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
CC                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
CC     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
CC     1                 /DZ(NZ-2)
CC                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
CC               ELSE
CC                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
CC                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
CC                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
CC     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
CC     1                 /(DZ(K)/2.+DZ(K-1)/2.)
CC                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
CC               ENDIF
               
CC            ENDDO
CC         ENDDO
         
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,UFZ,NCPU)
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,VFZ,NCPU)
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,WFZ,NCPU)
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
CC               WFZ(I,J)=WFZ(I,J)*HER(I,J)
CC            ENDDO
CC         ENDDO
         
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,WFZ,NCPU)
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
CC               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
CC     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
CC     1              +ET(I,J,K)*FZ(I,J)
CC            ENDDO
CC         ENDDO
         
CC         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T12(1,1,K),T12X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
CC               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))-HER(I,J)
     1                 *(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))+NUT(I,J,K)
     1                 *VZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S23(I,J,K)+NUT(I,J,K)*(HER(I,J)*WYZ(I,J,K)
     1                 -HER(I,J)*EYR(I,J)*WZ(I,J,K)+HER(I,J)*(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-6) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES2 END HERE







C=======================================================================
      SUBROUTINE FUN_V_LES3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S12,S22,S23,
     1     TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW,WW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU),FT(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22(NXMAX,NYMAX/NCPU,NZMAX),T12X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),T22Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WYZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),VZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)
            T23_2(I,J)=-NUT(I,J,2)*(T23_2(I,J)+(HYR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T22,T22Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFYZ_W_PARA_XY(W,WYZ,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(V,VZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=2,NZ
         
         CALL PDFX_PARA(V(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
                  FZ(I,J)=((V(I,J,3)+V(I,J,2))/2.-V(I,J,1))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               UFX(I,J)=U(I,J,K)*(UFX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *FZ(I,J))
               VFY(I,J)=V(I,J,K)*(VFY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *FZ(I,J))
               IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K)+W(I,J,K-1))/2.
               ENDIF
               WFZ(I,J)=WW*HER(I,J)*FZ(I,J)
               FT(I,J)=ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA(T12(1,1,K),T12X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))-HER(I,J)
     1                 *(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))+NUT(I,J,K)
     1                 *VZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S23(I,J,K)+NUT(I,J,K)*(HER(I,J)*WYZ(I,J,K)
     1                 -HER(I,J)*EYR(I,J)*WZ(I,J,K)+HER(I,J)*(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-6) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES3 END HERE








C=======================================================================
      SUBROUTINE FUN_V_LES4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S12,S22,S23,
     1     TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22(NXMAX,NYMAX/NCPU,NZMAX),T12X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),T22Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WYZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),VZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)
            T23_2(I,J)=-NUT(I,J,2)*(T23_2(I,J)+(HYR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T23_2,NCPU)

C-----END HERE

CC      DO K=2,NZ
      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T22,NCPU)

      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T22,T22Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFYZ_W_PARA_XY(W,WYZ,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(V,VZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               VU(I,J,K)=V(I,J,K)*U(I,J,K)
               VV(I,J,K)=V(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VV,NCPU)
      
CC      DO K=2,NZ
      DO K=2,NZ-1
         
         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(-VU(I,J,4)+4.*VU(I,J,3)-3.*VU(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  VFZ(I,J)=(-VV(I,J,4)+4.*VV(I,J,3)-3.*VV(I,J,2))
CC     1                 /(2.*DZ(2))
                  UFZ(I,J)=(VU(I,J,3)-VU(I,J,2))/DZ(2)
                  VFZ(I,J)=(VV(I,J,3)-VV(I,J,2))/DZ(2)
                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
     1                 -W(I,J,1)*(-V(I,J,3)+3.*V(I,J,2))/2.)
     1                 /(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
CC     1                 /(2.*DZ(2))
                  FZ(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T12(1,1,K),T12X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))-HER(I,J)
     1                 *(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))+NUT(I,J,K)
     1                 *VZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S23(I,J,K)+NUT(I,J,K)*(HER(I,J)*WYZ(I,J,K)
     1                 -HER(I,J)*EYR(I,J)*WZ(I,J,K)+HER(I,J)*(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-4) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES4 END HERE








C=======================================================================
      SUBROUTINE FUN_V_LES5(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S12,S22,S23,
     1     TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS
C     FIRST ORDER SCHEME NEAR BOTTOM

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTA(*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22(NXMAX,NYMAX/NCPU,NZMAX),T12X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12Z(NXMAX,NYMAX/NCPU,NZMAX),T22Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T22Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ(NXMAX,NYMAX/NCPU,NZMAX),WYZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX),VZ2(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)
            T23_2(I,J)=-NUT(I,J,2)*(T23_2(I,J)+(HYR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

C-----END HERE

      DO K=2,NZ
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
         ENDDO
      ENDDO
      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(T22,T22Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFYZ_W_PARA_XY(W,WYZ,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU,NZ,DZ)
      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_U_PARA_XY_WALLMODEL(V,VZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               VU(I,J,K)=V(I,J,K)*U(I,J,K)
               VV(I,J,K)=V(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VV,NCPU)
      
      DO K=2,NZ
         
         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(VU(I,J,3)-VU(I,J,2))/DZ(2)
                  VFZ(I,J)=(VV(I,J,3)-VV(I,J,2))/DZ(2)
                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)
     1                 -(W(I,J,2)+W(I,J,1))/2.*V(I,J,2))/DZ(2)
                  FZ(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T12(1,1,K),T12X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               IF(K.EQ.2) THEN
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))-HER(I,J)
     1                 *(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE
                  HNEW=HNEW-(T12X(I,J,K)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *T12Z(I,J,K))-(T22Y(I,J,K)+(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*T22Z(I,J,K))+NUT(I,J,K)
     1                 *VZ2(I,J,K)*HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)
     1                 *2.*S23(I,J,K)+NUT(I,J,K)*(HER(I,J)*WYZ(I,J,K)
     1                 -HER(I,J)*EYR(I,J)*WZ(I,J,K)+HER(I,J)*(HYR(I,J)
     1                 -ZZ(K)*EYR(I,J))*WZ2(I,J,K))
               ENDIF
               IF(ABS(TIME-DT).LE.1.E-4) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES5 END HERE







C=======================================================================
      SUBROUTINE FUN_V_LES6(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12X(NXMAX,NYMAX/NCPU),T22Y(NXMAX,NYMAX/NCPU)
      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      REAL T23W(NXMAX,NYMAX/NCPU,NZMAX),S23W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)
            T23_2(I,J)=-NUT(I,J,2)*(T23_2(I,J)+(HYR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T23_2,NCPU)

C-----END HERE

CC      DO K=2,NZ
      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T22,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)

CC      CALL PDFZ_U_PARA_XY_WALLMODEL(T12,T12Z,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ_U_PARA_XY_WALLMODEL(T22,T22Z,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ_U_PARA_XY_WALLMODEL(NUT,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ_W_PARA_XY(W,WZ,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFYZ_W_PARA_XY(W,WYZ,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
CC     1     NXMAX,NYMAX,NCPU,NZ,DZ)
CC      CALL PDFZ2_W_PARA_XY(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ2_U_PARA_XY_WALLMODEL(V,VZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               VU(I,J,K)=V(I,J,K)*U(I,J,K)
               VV(I,J,K)=V(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VV,NCPU)
      
CC      DO K=2,NZ
      DO K=2,NZ-1
         
         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(-VU(I,J,4)+4.*VU(I,J,3)-3.*VU(I,J,2))
CC     1                 /(2.*DZ(2))
CC                  VFZ(I,J)=(-VV(I,J,4)+4.*VV(I,J,3)-3.*VV(I,J,2))
CC     1                 /(2.*DZ(2))
                  UFZ(I,J)=(VU(I,J,3)-VU(I,J,2))/DZ(2)
                  VFZ(I,J)=(VV(I,J,3)-VV(I,J,2))/DZ(2)
                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
     1                 -W(I,J,1)*(-V(I,J,3)+3.*V(I,J,2))/2.)
     1                 /(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))
CC     1                 /(2.*DZ(2))
                  FZ(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T12(1,1,K),T12X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,3)-T22(I,J,2))/DZ(2)
     1                 +HER(I,J)*(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,K)-T12(I,J,K-1))/(2.*DZ(K-1))
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,K)-T22(I,J,K-1))/(2.*DZ(K-1))
     1                 +HER(I,J)*(T23W(I,J,K)-T23W(I,J,K-1))/DZ(K-1)
               ELSE
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,K+1)-T12(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,K+1)-T22(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +HER(I,J)*(T23W(I,J,K)-T23W(I,J,K-1))
     1                 /(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-4) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES6 END HERE








C=======================================================================
      SUBROUTINE FUN_V_LES7(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12X(NXMAX,NYMAX/NCPU),T22Y(NXMAX,NYMAX/NCPU)
      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      REAL T23W(NXMAX,NYMAX/NCPU,NZMAX),S23W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)

      REAL NUTX(NXMAX,NYMAX/NCPU),NUTY(NXMAX,NYMAX/NCPU)
      REAL NUTZ(NXMAX,NYMAX/NCPU)
      REAL VX(NXMAX,NYMAX/NCPU),VY(NXMAX,NYMAX/NCPU)
      REAL VZ(NXMAX,NYMAX/NCPU),UY(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU)
      REAL WY(NXMAX,NYMAX/NCPU),WW(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU)
      REAL LAPV(NXMAX,NYMAX/NCPU,NZMAX)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)
            T23_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*+HER(I,J)
     1           *(V(I,J,3)-V(I,J,2))/DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T23_1,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T23_2,NCPU)

C-----END HERE

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T22,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               VU(I,J,K)=V(I,J,K)*U(I,J,K)
               VV(I,J,K)=V(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VV,NCPU)
      
      DO K=2,NZ-1
         
         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
CC                  UFZ(I,J)=(VU(I,J,3)-VU(I,J,2))/DZ(2)
CC                  VFZ(I,J)=(VV(I,J,3)-VV(I,J,2))/DZ(2)
CC                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
CC     1                 -W(I,J,1)*(-V(I,J,3)+3.*V(I,J,2))/2.)
CC     1                 /(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
                  UFZ(I,J)=(VU(I,J,3)+3.*VU(I,J,2)-4.*VU(I,J,1))
     1                 /(3.*DZ(2))
                  VFZ(I,J)=(VV(I,J,3)+3.*VV(I,J,2)-4.*VV(I,J,1))
     1                 /(3.*DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
     1                 -W(I,J,1)*V(I,J,1))/(DZ(2)/2.+DZ(1))
                  FZ(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(NUT(1,1,K),NUTX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(NUT(1,1,K),NUTY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
                  NUTZ(I,J)=(NUT(I,J,3)-NUT(I,J,2))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  NUTZ(I,J)=(NUT(I,J,K)-NUT(I,J,K-1))/(2.*DZ(K-1))
               ELSE
                  NUTZ(I,J)=(NUT(I,J,K+1)-NUT(I,J,K-1))
     1                 /(DZ(K-1)+DZ(K))
               ENDIF
               NUTX(I,J)=NUTX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*NUTZ(I,J)
               NUTY(I,J)=NUTY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*NUTZ(I,J)
               NUTZ(I,J)=HER(I,J)*NUTZ(I,J)
            ENDDO
         ENDDO

         CALL PDFX_PARA(V(1,1,K),VX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(U(1,1,K),UY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WW(I,J)=(W(I,J,K)+W(I,J,K-1))/2.
               IF(K.EQ.2) THEN
                  UZ(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K)
               ELSE IF(K.EQ.NZ-1) THEN
                  UZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K-1)
               ELSE
                  UZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO

         CALL PDFY_PARA(WW,WY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               VX(I,J)=VX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*FZ(I,J)
               VY(I,J)=VY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*FZ(I,J)
               VZ(I,J)=HER(I,J)*FZ(I,J)
               UY(I,J)=UY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*UZ(I,J)
               WY(I,J)=WY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*WZ(I,J)
            ENDDO
         ENDDO

         CALL LAP_U_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1        ZZ,WORK,TRIGSX,TRIGSY,IFAX,V,LAPV,HBAR,EXR,EYR,HXR,HYR,
     1        HER,NUT,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
                  TSGS(I,J)=-NUTX(I,J)*(UY(I,J)+VX(I,J))-2.*NUTY(I,J)
     1                 *VY(I,J)-NUTZ(I,J)*WY(I,J)-LAPV(I,J,2)
     1                 +HER(I,J)*(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE
                  TSGS(I,J)=-NUTX(I,J)*(UY(I,J)+VX(I,J))-2.*NUTY(I,J)
     1                 *VY(I,J)-NUTZ(I,J)*(VZ(I,J)+WY(I,J))-LAPV(I,J,K)
               ENDIF
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-4) HV(I,J,K)=HNEW
C               hv(i,j,k)=hnew
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES7 END HERE








C=======================================================================
      SUBROUTINE FUN_V_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12X(NXMAX,NYMAX/NCPU),T22Y(NXMAX,NYMAX/NCPU)
      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      REAL T23W(NXMAX,NYMAX/NCPU,NZMAX),S23W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,1),T23_1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)-(3.*NUT(I,J,2)-NUT(I,J,3))/2.
     1           *(T23_1(I,J)+(HYR(I,J)-ZZ(1)*EYR(I,J))
     1           *(W(I,J,2)-W(I,J,1))/DZ(2))
            T23_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*(T23_2(I,J)+(HYR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T23_1,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T23_2,NCPU)

C-----END HERE

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T22,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               VU(I,J,K)=V(I,J,K)*U(I,J,K)
               VV(I,J,K)=V(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VV,NCPU)
      
CC      DO K=2,NZ
      DO K=2,NZ-1
         
         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(VU(I,J,3)+3.*VU(I,J,2)-4.*VU(I,J,1))
     1                 /(3.*DZ(2))
                  VFZ(I,J)=(VV(I,J,3)+3.*VV(I,J,2)-4.*VV(I,J,1))
     1                 /(3.*DZ(2))
CC                  UFZ(I,J)=(VU(I,J,3)-VU(I,J,1))/(DZ(1)+DZ(2))
CC                  VFZ(I,J)=(VV(I,J,3)-VV(I,J,1))/(DZ(1)+DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
     1                 -W(I,J,1)*V(I,J,1))/(DZ(2)/2.+DZ(1))
CC                  FZ(I,J)=(V(I,J,3)-V(I,J,1))/(DZ(1)+DZ(2))
                  FZ(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T12(1,1,K),T12X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,3)-T22(I,J,2))/DZ(2)
     1                 +HER(I,J)*(T23_2(I,J)-T23_1(I,J))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,K)-T12(I,J,K-1))/(2.*DZ(K-1))
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,K)-T22(I,J,K-1))/(2.*DZ(K-1))
     1                 +HER(I,J)*(T23W(I,J,K)-T23W(I,J,K-1))/DZ(K-1)
               ELSE
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,K+1)-T12(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,K+1)-T22(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +HER(I,J)*(T23W(I,J,K)-T23W(I,J,K-1))
     1                 /(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-6) HV(I,J,K)=HNEW
C               hv(i,j,k)=hnew
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES8 END HERE







C=======================================================================
      SUBROUTINE FUN_V_LES8_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,
     1     TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

C     BY DI YANG, JUNE 2012

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S12(NXMAX,NYMAX/NCPU,*),S22(NXMAX,NYMAX/NCPU,*)
      REAL T12(NXMAX,NYMAX/NCPU,NZMAX),T22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T12X(NXMAX,NYMAX/NCPU),T22Y(NXMAX,NYMAX/NCPU)
      REAL TAUWY(NXMAX,*)
      REAL T23_1(NXMAX,NYMAX/NCPU),T23_2(NXMAX,NYMAX/NCPU)
      REAL T23W(NXMAX,NYMAX/NCPU,NZMAX),S23W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)

      REAL WW,FT(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFY_PARA(W(1,1,1),T23_1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
c$$$      CALL PDFY_PARA(W(1,1,2),T23_2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
c$$$     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T23_1(I,J)=TAUWY(I,J)-NUT(I,J,1)
     1           *(T23_1(I,J)+(HYR(I,J)-ZZ(1)*EYR(I,J))
     1           *(W(I,J,2)-W(I,J,1))/DZ(2))
c$$$            T23_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*(T23_2(I,J)+(HYR(I,J)
c$$$     1           -(ZZ(2)+DZ(2)/2.)*EYR(I,J))
c$$$     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
c$$$     1           +HER(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T23_1,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
c$$$     1     IFAX,T23_2,NCPU)

C-----END HERE

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T22(I,J,K)=-2.*NUT(I,J,K)*S22(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T22(I,J,NZ+1)=T22(I,J,NZ-1)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T22,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)

c$$$      DO K=1,NZMAX
c$$$         DO I=1,NXMOD 
c$$$            DO J=1,NYMAX/NCPU
c$$$               VU(I,J,K)=V(I,J,K)*U(I,J,K)
c$$$               VV(I,J,K)=V(I,J,K)*V(I,J,K)
c$$$            ENDDO
c$$$         ENDDO
c$$$      ENDDO
c$$$      
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,VU,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,VV,NCPU)
c$$$      
c$$$CC      DO K=2,NZ
c$$$      DO K=2,NZ-1
c$$$         
c$$$         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
c$$$     1        NXMAX,NYMAX,NCPU)
c$$$         
c$$$         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
c$$$     1        NYMOD,NXMAX,NYMAX,NCPU)
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               
c$$$               IF(K.EQ.2) THEN
c$$$                  UFZ(I,J)=(VU(I,J,3)+3.*VU(I,J,2)-4.*VU(I,J,1))
c$$$     1                 /(3.*DZ(2))
c$$$                  VFZ(I,J)=(VV(I,J,3)+3.*VV(I,J,2)-4.*VV(I,J,1))
c$$$     1                 /(3.*DZ(2))
c$$$CC                  UFZ(I,J)=(VU(I,J,3)-VU(I,J,1))/(DZ(1)+DZ(2))
c$$$CC                  VFZ(I,J)=(VV(I,J,3)-VV(I,J,1))/(DZ(1)+DZ(2))
c$$$                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
c$$$     1                 -W(I,J,1)*V(I,J,1))/(DZ(2)/2.+DZ(1))
c$$$CC                  FZ(I,J)=(V(I,J,3)-V(I,J,1))/(DZ(1)+DZ(2))
c$$$                  FZ(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
c$$$     1                 /(3.*DZ(2))
c$$$               ELSE IF(K.EQ.(NZ-1)) THEN
c$$$                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
c$$$                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
c$$$                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
c$$$     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
c$$$                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
c$$$               ELSE IF(K.EQ.NZ) THEN
c$$$                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
c$$$                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
c$$$                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
c$$$     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
c$$$     1                 /DZ(NZ-2)
c$$$                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
c$$$               ELSE
c$$$                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
c$$$                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
c$$$                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
c$$$     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
c$$$     1                 /(DZ(K)/2.+DZ(K-1)/2.)
c$$$                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
c$$$               ENDIF
c$$$               
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,UFZ,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,VFZ,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,WFZ,NCPU)
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               WFZ(I,J)=WFZ(I,J)*HER(I,J)
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,WFZ,NCPU)
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
c$$$     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
c$$$     1              +ET(I,J,K)*FZ(I,J)
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,NL,NCPU)

      DO K=2,NZ-1
         
         CALL PDFX_PARA(V(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(V(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
CC                  FZ(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
CC     1                 /(3.*DZ(2))
                  FZ(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
CC                  FZ(I,J)=(V(I,J,2)-V(I,J,1))/DZ(1)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               UFX(I,J)=U(I,J,K)*(UFX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *FZ(I,J))
               VFY(I,J)=V(I,J,K)*(VFY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *FZ(I,J))
               IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K)+W(I,J,K-1))/2.
               ENDIF
               WFZ(I,J)=WW*HER(I,J)*FZ(I,J)
               FT(I,J)=ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFX,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFY,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,FT,NCPU)

         CALL PDFX_PARA(T12(1,1,K),T12X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T22(1,1,K),T22Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
c$$$                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
c$$$     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
c$$$     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
c$$$     1                 *(T22(I,J,3)-T22(I,J,2))/DZ(2)
c$$$     1                 +HER(I,J)*(T23_2(I,J)-T23_1(I,J))/DZ(2)
c$$$                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
c$$$     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
c$$$     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
c$$$     1                 *(T22(I,J,3)-T22(I,J,2))/DZ(2)
c$$$     1                 +HER(I,J)*(T23W(I,J,2)-T23_1(I,J))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,K)-T12(I,J,K-1))/(2.*DZ(K-1))
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,K)-T22(I,J,K-1))/(2.*DZ(K-1))
     1                 +HER(I,J)*(T23W(I,J,K)-T23W(I,J,K-1))/DZ(K-1)
               ELSE
                  TSGS(I,J)=T12X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T12(I,J,K+1)-T12(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +T22Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T22(I,J,K+1)-T22(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +HER(I,J)*(T23W(I,J,K)-T23W(I,J,K-1))
     1                 /(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
c$$$               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-6) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V_LES8_V2 END HERE







C========================================================================
      SUBROUTINE FUN_W_COUETTE_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,
     1     ZW,TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,
     1     HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,NUTW,NUTWA,
     1     S13W,S23W,S33W)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FW(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WU(NXMAX,NYMAX/NCPU,NZMAX),WV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      REAL ETW(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),NUTWA(*)
      REAL S13W(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)
      REAL S33W(NXMAX,NYMAX/NCPU,*),T13W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T23W(NXMAX,NYMAX/NCPU,NZMAX),T13X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T13Z(NXMAX,NYMAX/NCPU,NZMAX),T23Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T23Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX)

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)
      
      CALL PDFZ_W_PARA_Z(T13W,T13Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_Z(T23W,T23Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_Z(NUTW,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_W_PARA_Z(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO K=2,NZ-2
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               WU(I,J,K)=W(I,J,K)*(U(I,J,K)+U(I,J,K+1))/2.
               WV(I,J,K)=W(I,J,K)*(V(I,J,K)+V(I,J,K+1))/2.
            ENDDO
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WV,NCPU)
      
      DO K=2,NZ-2
         
         CALL PDFX_PARA(WU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(WV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
                  UFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*U(I,J,2))/DZ(2)
                  VFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*V(I,J,2))/DZ(2)
                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))**2/4.-(W(I,J,2)+
     1                 W(I,J,1))**2/4.)/DZ(2)
               ELSE IF(K.EQ.NZ-2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(NZ-2)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(NZ-2)
               ELSE
                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
     1                 +W(I,J,K-1))/2.)/DZ(K)
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(K)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(K)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(K)
               ENDIF
               
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZW(K)*EYR(I,J))*VFZ(I,J)
     1              +ETW(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

         CALL PDFX_PARA(T13W(1,1,K),T13X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T23W(1,1,K),T23Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               HNEW=HNEW-(T13X(I,J,K)+(HXR(I,J)-ZW(K)*EXR(I,J))
     1              *T13Z(I,J,K))-(T23Y(I,J,K)+(HYR(I,J)-ZW(K)*EYR(I,J))
     1              *T23Z(I,J,K))+2.*NUTW(I,J,K)*WZ2(I,J,K)
     1              *HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)*2.*S33W(I,J,K)
               IF(ABS(TIME-DT).LE.1.E-4) HW(I,J,K)=HNEW
               FW(I,J,K)=(3.*HNEW-HW(I,J,K))/2.
               HW(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_W_COUETTE_LES END HERE






C========================================================================
      SUBROUTINE FUN_W_LES2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,NUTW,NUTWA,S13W,S23W,
     1     S33W)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FW(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
CC      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
CC      REAL WU(NXMAX,NYMAX/NCPU,NZMAX),WV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU),FT(NXMAX,NYMAX/NCPU)
CC      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      REAL ETW(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),NUTWA(*)
      REAL S13W(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)
      REAL S33W(NXMAX,NYMAX/NCPU,*),T13W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T23W(NXMAX,NYMAX/NCPU,NZMAX),T13X(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T13Z(NXMAX,NYMAX/NCPU,NZMAX),T23Y(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T23Z(NXMAX,NYMAX/NCPU,NZMAX),NUTZ(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WZ2(NXMAX,NYMAX/NCPU,NZMAX)

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T13W(I,J,NZ)=2.*T13W(I,J,NZ-1)-T13W(I,J,NZ-2)
CC            T23W(I,J,NZ)=2.*T23W(I,J,NZ-1)-T23W(I,J,NZ-2)
C+++
C     FOR FREE-SLIP CONDITION
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
C+++
         ENDDO
      ENDDO
      CALL PDFZ_W_PARA_Z(T13W,T13Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_Z(T23W,T23Z,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ_W_PARA_Z(NUTW,NUTZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      CALL PDFZ2_W_PARA_Z(W,WZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

CC      DO K=2,NZ-2
CC         DO I=1,NXMOD 
CC            DO J=1,NYMAX/NCPU
CC               WU(I,J,K)=W(I,J,K)*(U(I,J,K)+U(I,J,K+1))/2.
CC               WV(I,J,K)=W(I,J,K)*(V(I,J,K)+V(I,J,K+1))/2.
CC            ENDDO
CC         ENDDO
CC      ENDDO

CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
CC     1     TRIGSY,IFAX,WU,NCPU)
CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
CC     1     TRIGSY,IFAX,WV,NCPU)
      
      DO K=2,NZ-2
         
         CALL PDFX_PARA(W(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(W(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
               ELSE IF(K.EQ.NZ-2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
               ELSE
                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
     1                 +W(I,J,K-1))/2.)/DZ(K)
               ENDIF
               UFX(I,J)=(U(I,J,K)+U(I,J,K+1))/2.
     1              *(UFX(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))*FZ(I,J))
               VFY(I,J)=(V(I,J,K)+V(I,J,K+1))/2.
     1              *(VFY(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))*FZ(I,J))
               WFZ(I,J)=W(I,J,K)*HER(I,J)*FZ(I,J)
               FT(I,J)=ETW(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
               
CC               IF(K.EQ.2) THEN
CC                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
CC                  UFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)-(W(I,J,2)
CC     1                 +W(I,J,1))/2.*U(I,J,2))/DZ(2)
CC                  VFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)-(W(I,J,2)
CC     1                 +W(I,J,1))/2.*V(I,J,2))/DZ(2)
CC                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))**2/4.-(W(I,J,2)+
CC     1                 W(I,J,1))**2/4.)/DZ(2)
CC               ELSE IF(K.EQ.NZ-2) THEN
CC                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
CC                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
CC     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(NZ-2)
CC                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
CC     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(NZ-2)
CC                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
CC     1                 W(I,J,K-1))**2/4.)/DZ(NZ-2)
CC               ELSE
CC                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
CC     1                 +W(I,J,K-1))/2.)/DZ(K)
CC                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
CC     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(K)
CC                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
CC     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(K)
CC                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
CC     1                 W(I,J,K-1))**2/4.)/DZ(K)
CC               ENDIF
               
CC            ENDDO
CC         ENDDO
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
CC               WFZ(I,J)=WFZ(I,J)*HER(I,J)
CC            ENDDO
CC         ENDDO
         
CC         DO I=1,NXMOD
CC            DO J=1,NYMAX/NCPU
CC               NL(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*UFZ(I,J)
CC     1              +(HYR(I,J)-ZW(K)*EYR(I,J))*VFZ(I,J)
CC     1              +ETW(I,J,K)*FZ(I,J)
CC            ENDDO
CC         ENDDO

         CALL PDFX_PARA(T13W(1,1,K),T13X(1,1,K),ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T23W(1,1,K),T23Y(1,1,K),ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
CC               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)
               HNEW=HNEW-(T13X(I,J,K)+(HXR(I,J)-ZW(K)*EXR(I,J))
     1              *T13Z(I,J,K))-(T23Y(I,J,K)+(HYR(I,J)-ZW(K)*EYR(I,J))
     1              *T23Z(I,J,K))+2.*NUTW(I,J,K)*WZ2(I,J,K)
     1              *HER(I,J)**2+NUTZ(I,J,K)*HER(I,J)*2.*S33W(I,J,K)
               IF(ABS(TIME-DT).LE.1.E-4) HW(I,J,K)=HNEW
               FW(I,J,K)=(3.*HNEW-HW(I,J,K))/2.
               HW(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_W_LES2 END HERE









C========================================================================
      SUBROUTINE FUN_W_LES6(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FW(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WU(NXMAX,NYMAX/NCPU,NZMAX),WV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      REAL ETW(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTW(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S13W(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)
      REAL S33(NXMAX,NYMAX/NCPU,*)
      REAL T13(NXMAX,NYMAX/NCPU,NZMAX),T23(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T33(NXMAX,NYMAX/NCPU,NZMAX),TSGS(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),T23W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T13X(NXMAX,NYMAX/NCPU),T23Y(NXMAX,NYMAX/NCPU)

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T13(I,J,K)=-2.*NUT(I,J,K)*S13(I,J,K)
               T23(I,J,K)=-2.*NUT(I,J,K)*S23(I,J,K)
               T33(I,J,K)=-2.*NUT(I,J,K)*S33(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T33,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)
      
      DO K=2,NZ-2
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               WU(I,J,K)=W(I,J,K)*(U(I,J,K)+U(I,J,K+1))/2.
               WV(I,J,K)=W(I,J,K)*(V(I,J,K)+V(I,J,K+1))/2.
            ENDDO
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WV,NCPU)
      
      DO K=2,NZ-2
         
         CALL PDFX_PARA(WU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(WV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
                  UFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*U(I,J,2))/DZ(2)
                  VFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*V(I,J,2))/DZ(2)
                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))**2/4.-(W(I,J,2)+
     1                 W(I,J,1))**2/4.)/DZ(2)
               ELSE IF(K.EQ.NZ-2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(NZ-2)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(NZ-2)
               ELSE
                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
     1                 +W(I,J,K-1))/2.)/DZ(K)
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(K)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(K)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(K)
               ENDIF
               
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZW(K)*EYR(I,J))*VFZ(I,J)
     1              +ETW(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

         CALL PDFX_PARA(T13W(1,1,K),T13X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T23W(1,1,K),T23Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               TSGS(I,J)=T13X(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))
     1              *(T13(I,J,K+1)-T13(I,J,K))/DZ(K)
     1              +T23Y(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))
     1              *(T23(I,J,K+1)-T23(I,J,K))/DZ(K)
     1              +HER(I,J)*(T33(I,J,K+1)-T33(I,J,K))/DZ(K)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-4) HW(I,J,K)=HNEW
               FW(I,J,K)=(3.*HNEW-HW(I,J,K))/2.
               HW(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_W_LES6 END HERE






C========================================================================
      SUBROUTINE FUN_W_LES7(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FW(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WU(NXMAX,NYMAX/NCPU,NZMAX),WV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      REAL ETW(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTW(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S13W(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)
      REAL S33(NXMAX,NYMAX/NCPU,*)
      REAL T13(NXMAX,NYMAX/NCPU,NZMAX),T23(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T33(NXMAX,NYMAX/NCPU,NZMAX),TSGS(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),T23W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T13X(NXMAX,NYMAX/NCPU),T23Y(NXMAX,NYMAX/NCPU)

      REAL NUTX(NXMAX,NYMAX/NCPU),NUTY(NXMAX,NYMAX/NCPU)
      REAL NUTZ(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU),VZ(NXMAX,NYMAX/NCPU)
      REAL WX(NXMAX,NYMAX/NCPU),WY(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU),LAPW(NXMAX,NYMAX/NCPU,NZMAX)

      DO K=2,NZ-2
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               WU(I,J,K)=W(I,J,K)*(U(I,J,K)+U(I,J,K+1))/2.
               WV(I,J,K)=W(I,J,K)*(V(I,J,K)+V(I,J,K+1))/2.
            ENDDO
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WV,NCPU)
      
      DO K=2,NZ-2
         
         CALL PDFX_PARA(WU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(WV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
                  UFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*U(I,J,2))/DZ(2)
                  VFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*V(I,J,2))/DZ(2)
                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))**2/4.-(W(I,J,2)+
     1                 W(I,J,1))**2/4.)/DZ(2)
               ELSE IF(K.EQ.NZ-2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(NZ-2)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(NZ-2)
               ELSE
                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
     1                 +W(I,J,K-1))/2.)/DZ(K)
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(K)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(K)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(K)
               ENDIF
               
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZW(K)*EYR(I,J))*VFZ(I,J)
     1              +ETW(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

         CALL PDFX_PARA(NUTW(1,1,K),NUTX,FTMP,WORK,TRIGSX,IFAX,PEX,
     1        NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(NUTW(1,1,K),NUTY,FTMP,WORK,TRIGSY,IFAX,PEY,
     1        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NUTZ(I,J)=(NUT(I,J,K+1)-NUT(I,J,K))/DZ(K)
               NUTX(I,J)=NUTX(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))*NUTZ(I,J)
               NUTY(I,J)=NUTY(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))*NUTZ(I,J)
               NUTZ(I,J)=HER(I,J)*NUTZ(I,J)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA(W(1,1,K),WX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(W(1,1,K),WY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WX(I,J)=WX(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))*FZ(I,J)
               WY(I,J)=WY(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))*FZ(I,J)
               WZ(I,J)=FZ(I,J)*HER(I,J)
               UZ(I,J)=(U(I,J,K+1)-U(I,J,K))/DZ(K)*HER(I,J)
               VZ(I,J)=(V(I,J,K+1)-V(I,J,K))/DZ(K)*HER(I,J)
            ENDDO
         ENDDO

         CALL LAP_W_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1        DZ,ZW,WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,
     1        HER,NUTW,NCPU)
         
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               TSGS(I,J)=-NUTX(I,J)*(UZ(I,J)+WX(I,J))-NUTY(I,J)
     1              *(VZ(I,J)+WY(I,J))-2.*NUTZ(I,J)*WZ(I,J)
     1              -LAPW(I,J,K)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-4) HW(I,J,K)=HNEW
C               hw(i,j,k)=hnew
               FW(I,J,K)=(3.*HNEW-HW(I,J,K))/2.
               HW(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_W_LES7 END HERE







C========================================================================
      SUBROUTINE FUN_W_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FW(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WU(NXMAX,NYMAX/NCPU,NZMAX),WV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      REAL ETW(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTW(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S13W(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)
      REAL S33(NXMAX,NYMAX/NCPU,*)
      REAL T13(NXMAX,NYMAX/NCPU,NZMAX),T23(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T33(NXMAX,NYMAX/NCPU,NZMAX),TSGS(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),T23W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T13X(NXMAX,NYMAX/NCPU),T23Y(NXMAX,NYMAX/NCPU)

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T13(I,J,K)=-2.*NUT(I,J,K)*S13(I,J,K)
               T23(I,J,K)=-2.*NUT(I,J,K)*S23(I,J,K)
               T33(I,J,K)=-2.*NUT(I,J,K)*S33(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T33,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)
      
      DO K=2,NZ-2
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               WU(I,J,K)=W(I,J,K)*(U(I,J,K)+U(I,J,K+1))/2.
               WV(I,J,K)=W(I,J,K)*(V(I,J,K)+V(I,J,K+1))/2.
            ENDDO
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WV,NCPU)
      
      DO K=2,NZ-2
         
         CALL PDFX_PARA(WU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(WV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
                  UFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*U(I,J,2))/DZ(2)
                  VFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*V(I,J,2))/DZ(2)
                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))**2/4.-(W(I,J,2)+
     1                 W(I,J,1))**2/4.)/DZ(2)
               ELSE IF(K.EQ.NZ-2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(NZ-2)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(NZ-2)
               ELSE
                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
     1                 +W(I,J,K-1))/2.)/DZ(K)
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(K)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(K)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(K)
               ENDIF
               
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZW(K)*EYR(I,J))*VFZ(I,J)
     1              +ETW(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

         CALL PDFX_PARA(T13W(1,1,K),T13X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T23W(1,1,K),T23Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               TSGS(I,J)=T13X(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))
     1              *(T13(I,J,K+1)-T13(I,J,K))/DZ(K)
     1              +T23Y(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))
     1              *(T23(I,J,K+1)-T23(I,J,K))/DZ(K)
     1              +HER(I,J)*(T33(I,J,K+1)-T33(I,J,K))/DZ(K)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-6) HW(I,J,K)=HNEW
C               hw(i,j,k)=hnew
               FW(I,J,K)=(3.*HNEW-HW(I,J,K))/2.
               HW(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_W_LES8 END HERE







C========================================================================
      SUBROUTINE FUN_W_LES8_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,
     1     TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,
     1     S13W,S23W,NUT,NUTW)

C     BY DI YANG, JUNE 2012

C     FOR LES
C     IGNORE VISCOUS TERMS
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FW(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WU(NXMAX,NYMAX/NCPU,NZMAX),WV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      REAL ETW(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*),NUTW(NXMAX,NYMAX/NCPU,*)
      REAL S13(NXMAX,NYMAX/NCPU,*),S13W(NXMAX,NYMAX/NCPU,*)
      REAL S23(NXMAX,NYMAX/NCPU,*),S23W(NXMAX,NYMAX/NCPU,*)
      REAL S33(NXMAX,NYMAX/NCPU,*)
      REAL T13(NXMAX,NYMAX/NCPU,NZMAX),T23(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T33(NXMAX,NYMAX/NCPU,NZMAX),TSGS(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),T23W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T13X(NXMAX,NYMAX/NCPU),T23Y(NXMAX,NYMAX/NCPU)

      REAL WW,FT(NXMAX,NYMAX/NCPU)

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T13(I,J,K)=-2.*NUT(I,J,K)*S13(I,J,K)
               T23(I,J,K)=-2.*NUT(I,J,K)*S23(I,J,K)
               T33(I,J,K)=-2.*NUT(I,J,K)*S33(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
               T23W(I,J,K)=-2.*NUTW(I,J,K)*S23W(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
            T23W(I,J,NZ)=-T23W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T33,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T23W,NCPU)
      
c$$$      DO K=2,NZ-2
c$$$         DO I=1,NXMOD 
c$$$            DO J=1,NYMAX/NCPU
c$$$               WU(I,J,K)=W(I,J,K)*(U(I,J,K)+U(I,J,K+1))/2.
c$$$               WV(I,J,K)=W(I,J,K)*(V(I,J,K)+V(I,J,K+1))/2.
c$$$            ENDDO
c$$$         ENDDO
c$$$      ENDDO
c$$$
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,WU,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,WV,NCPU)
c$$$      
c$$$      DO K=2,NZ-2
c$$$         
c$$$         CALL PDFX_PARA(WU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
c$$$     1        NXMAX,NYMAX,NCPU)
c$$$         
c$$$         CALL PDFY_PARA(WV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
c$$$     1        NYMOD,NXMAX,NYMAX,NCPU)
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               
c$$$               IF(K.EQ.2) THEN
c$$$                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
c$$$                  UFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)-(W(I,J,2)
c$$$     1                 +W(I,J,1))/2.*U(I,J,2))/DZ(2)
c$$$                  VFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)-(W(I,J,2)
c$$$     1                 +W(I,J,1))/2.*V(I,J,2))/DZ(2)
c$$$                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))**2/4.-(W(I,J,2)+
c$$$     1                 W(I,J,1))**2/4.)/DZ(2)
c$$$               ELSE IF(K.EQ.NZ-2) THEN
c$$$                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
c$$$                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
c$$$     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(NZ-2)
c$$$                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
c$$$     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(NZ-2)
c$$$                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
c$$$     1                 W(I,J,K-1))**2/4.)/DZ(NZ-2)
c$$$               ELSE
c$$$                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
c$$$     1                 +W(I,J,K-1))/2.)/DZ(K)
c$$$                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
c$$$     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(K)
c$$$                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
c$$$     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(K)
c$$$                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
c$$$     1                 W(I,J,K-1))**2/4.)/DZ(K)
c$$$               ENDIF
c$$$               
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               WFZ(I,J)=WFZ(I,J)*HER(I,J)
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               NL(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*UFZ(I,J)
c$$$     1              +(HYR(I,J)-ZW(K)*EYR(I,J))*VFZ(I,J)
c$$$     1              +ETW(I,J,K)*FZ(I,J)
c$$$            ENDDO
c$$$         ENDDO

      DO K=2,NZ-2
         
         CALL PDFX_PARA(W(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(W(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
               ELSE IF(K.EQ.NZ-2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
               ELSE
                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
     1                 +W(I,J,K-1))/2.)/DZ(K)
               ENDIF
               UFX(I,J)=(U(I,J,K)+U(I,J,K+1))/2.
     1              *(UFX(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))*FZ(I,J))
               VFY(I,J)=(V(I,J,K)+V(I,J,K+1))/2.
     1              *(VFY(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))*FZ(I,J))
               WFZ(I,J)=W(I,J,K)*HER(I,J)*FZ(I,J)
               FT(I,J)=ETW(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFX,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFY,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,FT,NCPU)

         CALL PDFX_PARA(T13W(1,1,K),T13X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T23W(1,1,K),T23Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
         
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               TSGS(I,J)=T13X(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))
     1              *(T13(I,J,K+1)-T13(I,J,K))/DZ(K)
     1              +T23Y(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))
     1              *(T23(I,J,K+1)-T23(I,J,K))/DZ(K)
     1              +HER(I,J)*(T33(I,J,K+1)-T33(I,J,K))/DZ(K)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
c$$$               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-6) HW(I,J,K)=HNEW
               FW(I,J,K)=(3.*HNEW-HW(I,J,K))/2.
               HW(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_W_LES8_V2 END HERE







C========================================================================
      SUBROUTINE LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1     TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,A,AF,MFILT)

C     BY DI YANG, DEC 2010

      IMPLICIT NONE

      INCLUDE "mpif.h"
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU,MFILT
      
      INTEGER I,J,MYID,IERR,KX,KY

      REAL A(NXMAX,*),AF(NXMAX,*)
      REAL AT(NXMAX,NYMAX/NCPU),B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      REAL PI,PEX,PEY,CKX,CKY,DELTAX,DELTAY

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)

C--------------------------------
C     INITIALIZE VARIALBES
C--------------------------------

      PI=ACOS(-1.)
      CKX=PI/(2.*DELTAX)
      CKY=PI/(2.*DELTAY)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            AF(I,J)=A(I,J)
         ENDDO
      ENDDO
      
C-----END HERE

C--------------------------------------------
C     APPLY FILTERING IN SPECTRAL SPACE
C--------------------------------------------

C     MFILT
C     =1: GAUSSIAN FILTER
C     =2: SHARP SPECTRAL CUTOFF FILTER

      CALL FFTX_PARA(AF,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,-1)

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD+2
            KX=(I-1)/2
            IF(MFILT.EQ.1) THEN
               AF(I,J)=AF(I,J)*EXP(-(PEX*KX*2.*DELTAX)**2/24.)
            ELSE IF(MFILT.EQ.2) THEN
               IF(KX*PEX.GT.CKX) AF(I,J)=0.
            ELSE
               PRINT*, 'Invalid MFILT:',MFILT
            ENDIF
         ENDDO
      ENDDO

      CALL MPE_2DTRANS(AF,AT,B,NXMAX,NYMAX/NCPU,NCPU)

      CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,NCPU,-1)

      DO J=1,NXMAX/NCPU
         DO I=1,NYMOD+2
            KY=(I-1)/2
            IF(MFILT.EQ.1) THEN
               B(I,J)=B(I,J)*EXP(-(PEY*KY*2.*DELTAY)**2/24.)
            ELSE IF(MFILT.EQ.2) THEN
               IF(KY*PEY.GT.CKY) B(I,J)=0.
            ELSE
               PRINT*, 'Invalid MFILT:',MFILT
            ENDIF
         ENDDO
      ENDDO
      
C--------------------------------
C     RFFT TO PHYSICAL SPACE
C--------------------------------

      CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,NCPU,1)

      CALL MPE_2DTRANS(B,BT,AF,NYMAX,NXMAX/NCPU,NCPU)
      
      CALL FFTX_PARA(AF,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,1)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE LESFILTERING END HERE







C=========================================================================
C     SUBROUTINES FOR LES FILTERING START HERE
C=========================================================================
      SUBROUTINE LESFILTER(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,WORK,
     &     IFAX,TRIGSX,TRIGSY,DELTA,PEX,PEY,A,AF)
      IMPLICIT NONE
      INCLUDE "mpif.h"
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,NCPU
      REAL A(NXMAX,NYMAX/NCPU),AF(NXMAX,NYMAX/NCPU)
      REAL PEX,PEY
      REAL DELTA,PFILTER,KMIN
C      PARAMETER(DELTA=0.2)
      INTEGER ISGN
      INTEGER IGAUSS,ICUT
      PARAMETER(IGAUSS=0)
      INTEGER I,J,K,MYID,IERR,KX,KY
      REAL KMINX,KMINY

      REAL WORK(*)
      REAL TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(19)

      REAL PI

      PI=ACOS(-1.)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            AF(I,J)=A(I,J)
         ENDDO
      ENDDO

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)

      ISGN=-1
      CALL FFTXY_PARA(AF,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     &     NYMAX,NCPU,ISGN)

      IF(IGAUSS.EQ.1) THEN
         DO I=1,NXMAX
            DO J=1,NYMAX/NCPU
               KX=(I-1)/2
               KY=(J+MYID*NYMAX/NCPU-1)/2
C               KMINX=2.*ACOS(-1.)/NXMOD
C               KMINY=2.*ACOS(-1.)/NYMOD
               PFILTER=EXP(-DELTA**2/24.*((PEX*KX)**2+(PEY*KY)**2))
               AF(I,J)=AF(I,J)*PFILTER
            ENDDO
         ENDDO
      ENDIF

      IF(IGAUSS.EQ.0) THEN
         DO I=1,NXMAX
            DO J=1,NYMAX/NCPU
               KX=(I-1)/2
               KY=(J+MYID*NYMAX/NCPU-1)/2
               IF(SQRT((PEX*KX)**2+(PEY*KY)**2).GT.PI/DELTA) THEN
                  AF(I,J)=0.
               ENDIF
            ENDDO
         ENDDO
      ENDIF

      ISGN=1
      CALL FFTXY_PARA(AF,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     &     NYMAX,NCPU,ISGN)

      END
C----------------------------------------------------------------
      SUBROUTINE PDFZ_U_PARA_XY(A,AZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AZ(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            K=1
            AZ(I,J,K)=(A(I,J,2)-A(I,J,1))/DZ(1)
            K=2
            AZ(I,J,K)=(A(I,J,3)+3.*A(I,J,2)-4.*A(I,J,1))/(3.*DZ(2))
            DO K=3,NZ-2
               AZ(I,J,K)=(A(I,J,K+1)-A(I,J,K-1))/(DZ(K)+DZ(K-1))
            ENDDO
            K=NZ-1
            AZ(I,J,K)=(A(I,J,NZ+1)-A(I,J,NZ-2))/(2.*DZ(NZ-2))
            K=NZ
            AZ(I,J,K)=(A(I,J,NZ+1)-A(I,J,NZ-1))/DZ(NZ-2)
         ENDDO
      ENDDO

      END

C-----------------------------------------------------------------
      SUBROUTINE PDFZ_W_PARA_XY(A,AZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AZ(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            K=1
            AZ(I,J,K)=(A(I,J,2)-A(I,J,1))/(DZ(1)+DZ(2)/2.)
            K=2
            AZ(I,J,K)=(A(I,J,2)-A(I,J,1))/(DZ(1)+DZ(2)/2.)
            DO K=3,NZ-2
               AZ(I,J,K)=(A(I,J,K)-A(I,J,K-1))/(DZ(K)/2.+DZ(K-1)/2.)
            ENDDO
            K=NZ-1
            AZ(I,J,K)=(A(I,J,K)-A(I,J,K-1))/(DZ(K)+DZ(K-1)/2.)
            K=NZ
CC            AZ(I,J,K)=(A(I,J,NZ-1)-A(I,J,NZ-2))/(DZ(NZ-2))
            AZ(I,J,K)=(A(I,J,NZ)-A(I,J,NZ-2))/(2.*DZ(NZ-2))
         ENDDO
      ENDDO

      END

C-----------------------------------------------------------------
      SUBROUTINE PDFZ_W_PARA_Z(A,AZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AZ(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            K=1
            AZ(I,J,K)=(A(I,J,2)-A(I,J,1))/(DZ(1)+DZ(2)/2.)
            K=2
            AZ(I,J,K)=(A(I,J,3)-A(I,J,1))/(2.*DZ(2))
            DO K=3,NZ-3
               AZ(I,J,K)=((A(I,J,K+1)*DZ(K)+A(I,J,K)*DZ(K+1))/(DZ(K+1)+
     &              DZ(K))-(A(I,J,K)*DZ(K-1)+A(I,J,K-1)*DZ(K))/(DZ(K)+
     &              DZ(K-1)))/DZ(K)
            ENDDO
            K=NZ-2
            AZ(I,J,K)=(A(I,J,NZ-1)-A(I,J,NZ-3))/(2.*DZ(NZ-2))
            K=NZ-1
CC            AZ(I,J,K)=(A(I,J,NZ-1)-A(I,J,NZ-2))/DZ(NZ-2)
            AZ(I,J,K)=(A(I,J,NZ)-A(I,J,NZ-2))/(2.*DZ(NZ-2))
         ENDDO
      ENDDO

      END

C-----------------------------------------------------------------
      SUBROUTINE PDFZ2_U_PARA_XY(A,AZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AZ2(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            K=1
            AZ2(I,J,1)=(A(I,J,3)-3.*A(I,J,2)+2.*A(I,J,1))/
     &           (3.*(DZ(2)/2.)**2)
            DO K=2,NZ
               IF(K.EQ.2) THEN
                  AZ2(I,J,K)=(-A(I,J,4)+10.*A(I,J,3)-25.*A(I,J,2)+16.*
     &                 A(I,J,1))/(5.*DZ(2)**2)
               ELSEIF(K.EQ.NZ-1) THEN
                  AZ2(I,J,K)=(A(I,J,NZ+1)-2.*A(I,J,NZ-1)+A(I,J,NZ-2))/
     &                 (DZ(NZ-2)**2)
               ELSEIF(K.EQ.NZ) THEN
                  AZ2(I,J,K)=(4.*A(I,J,NZ+1)-8.*A(I,J,NZ)+4.*
     &                 A(I,J,NZ-1))/(DZ(NZ-2)**2)
               ELSE
                  AZ2(I,J,K)=((A(I,J,K+1)-A(I,J,K))/DZ(K)-(A(I,J,K)-
     &                 A(I,J,K-1))/DZ(K-1))/(DZ(K)/2.+DZ(K-1)/2.)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      END
C-----------------------------------------------------------------
      SUBROUTINE PDFZ2_W_PARA_XY(A,AZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*)
      REAL AZ2(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K

CC      CALL PDFZ_W_PARA_Z(A,AZ,NXMAX,NYMAX,NZ,NCPU,DZ)
CC      CALL PDFZ_W_PARA_XY(AZ,AZ2,NXMAX,NYMAX,NZ,NCPU,DZ)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            K=1
            AZ2(I,J,K)=(A(I,J,3)-2.*A(I,J,2)+A(I,J,1))/DZ(2)**2
            K=2
            AZ2(I,J,K)=(A(I,J,3)-2.*A(I,J,2)+A(I,J,1))/DZ(2)**2
            DO K=3,NZ-3
               AZ2(I,J,K)=((A(I,J,K+1)-A(I,J,K))/(DZ(K)/2.+DZ(K+1)/2.)
     1              -(A(I,J,K-1)-A(I,J,K-2))/(DZ(K-2)/2.+DZ(K-1)/2.))
     1              /(DZ(K-1)+DZ(K))
            ENDDO
            K=NZ-2
            AZ2(I,J,K)=((A(I,J,NZ-1)-A(I,J,NZ-2))/DZ(NZ-2)
     1           -(A(I,J,NZ-3)-A(I,J,NZ-4))/(DZ(NZ-4)/2.+DZ(NZ-3)/2.))
     1           /(DZ(NZ-3)+DZ(NZ-2))
            K=NZ-1
            AZ2(I,J,K)=((A(I,J,NZ)-A(I,J,NZ-1))/DZ(NZ-2)
     1           -(A(I,J,NZ-2)-A(I,J,NZ-3))/(DZ(NZ-3)/2.+DZ(NZ-2)/2.))
     1           /(2.*DZ(NZ-2))
            K=NZ
            AZ2(I,J,K)=(A(I,J,NZ)-2.*A(I,J,NZ-1)+A(I,J,NZ-2))
     1           /DZ(NZ-2)**2
         ENDDO
      ENDDO

      END

C-----------------------------------------------------------------
      SUBROUTINE PDFZ2_W_PARA_Z(A,AZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*)
      REAL AZ2(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            K=1
            AZ2(I,J,K)=(A(I,J,3)-2.*A(I,J,2)+A(I,J,1))/(DZ(2)**2)
            DO K=2,NZ-2
               IF(K.EQ.2)THEN
                  AZ2(I,J,K)=((A(I,J,3)-A(I,J,2))/(DZ(3)/2.+DZ(2)/2.)-
     &                 (A(I,J,2)-A(I,J,1))/DZ(2))/DZ(2)
               ELSEIF(K.EQ.NZ-2) THEN
                  AZ2(I,J,K)=((A(I,J,NZ-1)-A(I,J,NZ-2))/DZ(NZ-2)-
     &                 (A(I,J,NZ-2)-A(I,J,NZ-3))/(DZ(NZ-2)/2.+DZ(NZ-3)
     &                 /2.))/DZ(NZ-2)
               ELSE
                  AZ2(I,J,K)=((A(I,J,K+1)-A(I,J,K))/(DZ(K)/2.+DZ(K+1)
     &                 /2.)-(A(I,J,K)-A(I,J,K-1))/(DZ(K)/2.+DZ(K-1)/2.))
     &                 /DZ(K)
               ENDIF
            ENDDO
            K=NZ-1
            AZ2(I,J,K)=(A(I,J,K+1)-2.*A(I,J,K)+A(I,J,K-1))/(DZ(NZ-2)**2)
         ENDDO
      ENDDO

      END

C-------------------------------------------------------------
      SUBROUTINE PDFXZ_W_PARA_XY(A,AXZ,ATMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     &     NXMAX,NYMAX,NCPU,NZ,DZ)
      IMPLICIT NONE

      INTEGER NXMOD,NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AX(NXMAX,NYMAX/NCPU,NZ),PEX,DZ(*)
      REAL AXZ(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,*),WORK(*)
      REAL TRIGSX(*)
      INTEGER IFAX(*)
      INTEGER K

CC      DO K=1,NZ-1
      DO K=1,NZ
         CALL PDFX_PARA(A(1,1,K),AX(1,1,K),ATMP,WORK,TRIGSX,IFAX,PEX,
     &        NXMOD,NXMAX,NYMAX,NCPU)
      ENDDO

      CALL PDFZ_W_PARA_XY(AX,AXZ,NXMAX,NYMAX,NZ,NCPU,DZ)

      END

C-------------------------------------------------------------
      SUBROUTINE PDFYZ_W_PARA_XY(A,AYZ,ATMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     &     NYMOD,NXMAX,NYMAX,NCPU,NZ,DZ)
      IMPLICIT NONE

      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AY(NXMAX,NYMAX/NCPU,NZ),PEY,DZ(*)
      REAL AYZ(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,*),WORK(*)
      REAL TRIGSY(*)
      INTEGER IFAX(*)
      INTEGER K

CC      DO K=1,NZ-1
      DO K=1,NZ
         CALL PDFY_PARA(A(1,1,K),AY(1,1,K),ATMP,WORK,TRIGSY,IFAX,PEY,
     &        NXMOD,NYMOD,NXMAX,NYMAX,NCPU)
      ENDDO

      CALL PDFZ_W_PARA_XY(AY,AYZ,NXMAX,NYMAX,NZ,NCPU,DZ)

      END

C=====SUBROUTINES FOR LES FILTERING END HERE








C======================================================================
      SUBROUTINE PDFZ_U_PARA_XY_WALLMODEL(A,AZ,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AZ(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            K=2
CC            AZ(I,J,K)=(-A(I,J,4)+4.*A(I,J,3)-3.*A(I,J,2))/(2.*DZ(2))
            AZ(I,J,K)=(A(I,J,3)-A(I,J,2))/DZ(2)
            DO K=3,NZ-2
               AZ(I,J,K)=(A(I,J,K+1)-A(I,J,K-1))/(DZ(K)+DZ(K-1))
            ENDDO
            K=NZ-1
            AZ(I,J,K)=(A(I,J,NZ+1)-A(I,J,NZ-2))/(2.*DZ(NZ-2))
            K=NZ
            AZ(I,J,K)=(A(I,J,NZ+1)-A(I,J,NZ-1))/DZ(NZ-2)
         ENDDO
      ENDDO

      RETURN
      END

C=====SUBROUTINE PDFZ_U_PARA_XY_WALLMODEL END HERE








C==========================================================================
      SUBROUTINE PDFZ2_U_PARA_XY_WALLMODEL(A,AZ2,NXMAX,NYMAX,NZ,NCPU,DZ)
      IMPLICIT NONE
      INTEGER NXMAX,NYMAX,NCPU,NZ
      REAL A(NXMAX,NYMAX/NCPU,*),AZ2(NXMAX,NYMAX/NCPU,*)
      REAL DZ(*)
      INTEGER I,J,K

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            DO K=2,NZ
               IF(K.EQ.2) THEN
CC                  AZ2(I,J,K)=(-A(I,J,5)+4.*A(I,J,4)-5.*A(I,J,3)+2.*
CC     &                 A(I,J,2))/(DZ(2)**2)
                  AZ2(I,J,K)=(A(I,J,4)-2.*A(I,J,3)+A(I,J,2))/DZ(2)**2
               ELSEIF(K.EQ.NZ-1) THEN
                  AZ2(I,J,K)=(A(I,J,NZ+1)-2.*A(I,J,NZ-1)+A(I,J,NZ-2))/
     &                 (DZ(NZ-2)**2)
               ELSEIF(K.EQ.NZ) THEN
                  AZ2(I,J,K)=(4.*A(I,J,NZ+1)-8.*A(I,J,NZ)+4.*
     &                 A(I,J,NZ-1))/(DZ(NZ-2)**2)
               ELSE
                  AZ2(I,J,K)=((A(I,J,K+1)-A(I,J,K))/DZ(K)-(A(I,J,K)-
     &                 A(I,J,K-1))/DZ(K-1))/(DZ(K)/2.+DZ(K-1)/2.)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END

C=====SUBROUTINE PDFZ2_U_PARA_XY_WALLMODEL END HERE







C=======================================================================
      SUBROUTINE VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,
     1     W,FU,FV,FW,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NCPU
      REAL DT

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL U(NXMAX,NYMAX/NCPU,*),FU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),FV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),FW(NXMAX,NYMAX/NCPU,*)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            DO K=2,NZ
            DO K=2,NZ-1
               U(I,J,K)=U(I,J,K)+FU(I,J,K)*DT
               V(I,J,K)=V(I,J,K)+FV(I,J,K)*DT
               IF(K.GT.(NZ-2)) GOTO 10
               W(I,J,K)=W(I,J,K)+FW(I,J,K)*DT
 10            CONTINUE
            ENDDO
         ENDDO
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE VELOCITY_PREDICTION END HERE







C=========================================================================
      SUBROUTINE PRESSURE_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,
     1     ZZ,PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,
     1     EYR,HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K,II
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,ITMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL PEX,PEY,DT,HBAR,ERLIM,OLD,ER1,ER2,ERR,ER_ALL,OME
      REAL TIMEWAVY,TIME
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),SIGMA(NXMAX,NYMAX/NCPU,NZMAX)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL UB(NXMAX,NYMAX/NCPU),UT(NXMAX,NYMAX/NCPU)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL VB(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WB(NXMAX,NYMAX/NCPU),WT(NXMAX,NYMAX/NCPU)
      REAL EPS(NXMAX,NYMAX/NCPU,NZMAX)
      REAL ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL AL(NZMAX),AO(NZMAX),AR(NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      CALL SOURCE_S_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,DT,
     1     WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,HBAR,HX,HY,
     1     EXR,EYR,HXR,HYR,HER,UB,VB,WB,UT,VT,WT,NCPU)

      DO 100 II=1,ITMAX

         CALL SOURCE_E_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1        TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  OLD=PP(I,J,K)
                  PP(I,J,K)=SIGMA(I,J,K)+EPS(I,J,K)
                  EPS(I,J,K)=OLD
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,PP,
     1        AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)
         
         IF(TIME.LT.TIMEWAVY) GOTO 999

         ER1=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=PP(I,J,K)-EPS(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER1)) ER1=ERR
               ENDDO
            ENDDO
         ENDDO
         
         CALL SOURCE_E_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1        TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  EPS(I,J,K)=EPS(I,J,K)+SIGMA(I,J,K)
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,
     1        EPS,AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

         ER2=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=EPS(I,J,K)-PP(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER2)) ER2=ERR
               ENDDO
            ENDDO
         ENDDO
         
         IF(NYEND.EQ.0) THEN
            OME=0.
            ER2=0.
            GOTO 888
         ENDIF

         if(abs(er2)+abs(er1).eq.0) then
            print*, 'error at |er2+er1|'
            stop
         endif

         OME=ABS(ER2)/(ABS(ER2)+ABS(ER1))
         
 888     CONTINUE

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  PP(I,J,K)=EPS(I,J,K)-OME*(EPS(I,J,K)-PP(I,J,K))
               ENDDO
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(ABS(ER2),ER_ALL,1,MPI_DOUBLE_PRECISION,
     1        MPI_MAX,MPI_COMM_WORLD,IERR)
         IF(MYID.EQ.0) WRITE(*,*) II,ER2,ERLIM
         IF(ABS(ER_ALL).LT.ERLIM) GOTO 999
         
 100  CONTINUE
      
 999  CONTINUE

      RETURN
      END

C=====SUBROUTINE PRESSURE_G END HERE








C=========================================================================
      SUBROUTINE PRESSURE_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,
     1     NZMAX,PEX,PEY,DZ,ZZ,PP,DT,HBAR,U,V,W,WB,ETA,EX,EY,HX,HY,EXR,
     1     EYR,HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K,II
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,ITMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL PEX,PEY,DT,HBAR,ERLIM,OLD,ER1,ER2,ERR,ER_ALL,OME
      REAL TIMEWAVY,TIME
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),SIGMA(NXMAX,NYMAX/NCPU,NZMAX)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EPS(NXMAX,NYMAX/NCPU,NZMAX)
      REAL ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL AL(NZMAX),AO(NZMAX),AR(NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      CALL SOURCE_S_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,
     1     PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,HBAR,HX,
     1     HY,EXR,EYR,HXR,HYR,HER,WB,NCPU)

      DO 100 II=1,ITMAX

         CALL SOURCE_E_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1        DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1        HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  OLD=PP(I,J,K)
                  PP(I,J,K)=SIGMA(I,J,K)+EPS(I,J,K)
                  EPS(I,J,K)=OLD
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,PP,
     1        AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)
         
         IF(TIME.LT.TIMEWAVY) GOTO 999

         ER1=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=PP(I,J,K)-EPS(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER1)) ER1=ERR
               ENDDO
            ENDDO
         ENDDO
         
         CALL SOURCE_E_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1        DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1        HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  EPS(I,J,K)=EPS(I,J,K)+SIGMA(I,J,K)
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,
     1        EPS,AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

         ER2=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=EPS(I,J,K)-PP(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER2)) ER2=ERR
               ENDDO
            ENDDO
         ENDDO
         
         IF(NYEND.EQ.0) THEN
            OME=0.
            ER2=0.
            GOTO 888
         ENDIF

         if(abs(er2)+abs(er1).eq.0) then
            print*, 'error at |er2+er1|'
            stop
         endif

         OME=ABS(ER2)/(ABS(ER2)+ABS(ER1))
         
 888     CONTINUE

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  PP(I,J,K)=EPS(I,J,K)-OME*(EPS(I,J,K)-PP(I,J,K))
               ENDDO
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(ABS(ER2),ER_ALL,1,MPI_DOUBLE_PRECISION,
     1        MPI_MAX,MPI_COMM_WORLD,IERR)
         IF(MYID.EQ.0) WRITE(*,*) II,ER2,ERLIM
         IF(ABS(ER_ALL).LT.ERLIM) GOTO 999
         
 100  CONTINUE
      
 999  CONTINUE

      RETURN
      END

C=====SUBROUTINE PRESSURE_LES_WALLMODEL END HERE








C=========================================================================
      SUBROUTINE PRESSURE_LES_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,
     1     NZMAX,PEX,PEY,DZ,ZZ,PP,DT,HBAR,U,V,W,UB,VB,WB,ETA,EX,EY,HX,
     1     HY,EXR,EYR,HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,
     1     TIMEWAVY,TIME,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K,II
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,ITMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL PEX,PEY,DT,HBAR,ERLIM,OLD,ER1,ER2,ERR,ER_ALL,OME
      REAL TIMEWAVY,TIME
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),SIGMA(NXMAX,NYMAX/NCPU,NZMAX)
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EPS(NXMAX,NYMAX/NCPU,NZMAX)
      REAL ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL AL(NZMAX),AO(NZMAX),AR(NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      CALL SOURCE_S_LES_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,
     1     PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,HBAR,HX,
     1     HY,EXR,EYR,HXR,HYR,HER,UB,VB,WB,NCPU)

      DO 100 II=1,ITMAX

         CALL SOURCE_E_LES_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1        PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1        HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  OLD=PP(I,J,K)
                  PP(I,J,K)=SIGMA(I,J,K)+EPS(I,J,K)
                  EPS(I,J,K)=OLD
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,PP,
     1        AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)
         
         IF(TIME.LT.TIMEWAVY) GOTO 999

         ER1=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=PP(I,J,K)-EPS(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER1)) ER1=ERR
               ENDDO
            ENDDO
         ENDDO
         
         CALL SOURCE_E_LES_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1        PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1        HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  EPS(I,J,K)=EPS(I,J,K)+SIGMA(I,J,K)
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,
     1        EPS,AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

         ER2=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=EPS(I,J,K)-PP(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER2)) ER2=ERR
               ENDDO
            ENDDO
         ENDDO
         
         IF(NYEND.EQ.0) THEN
            OME=0.
            ER2=0.
            GOTO 888
         ENDIF

         if(abs(er2)+abs(er1).eq.0) then
            print*, 'error at |er2+er1|'
            stop
         endif

         OME=ABS(ER2)/(ABS(ER2)+ABS(ER1))
         
 888     CONTINUE

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  PP(I,J,K)=EPS(I,J,K)-OME*(EPS(I,J,K)-PP(I,J,K))
               ENDDO
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(ABS(ER2),ER_ALL,1,MPI_DOUBLE_PRECISION,
     1        MPI_MAX,MPI_COMM_WORLD,IERR)
         IF(MYID.EQ.0) WRITE(*,*) II,ER2,ERLIM
         IF(ABS(ER_ALL).LT.ERLIM) GOTO 999
         
 100  CONTINUE
      
 999  CONTINUE

      RETURN
      END

C=====SUBROUTINE PRESSURE_LES_WALLMODEL2 END HERE







C=========================================================================
      SUBROUTINE PRESSURE_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,
     1     NZMAX,PEX,PEY,DZ,ZZ,PP,DT,HBAR,U,V,W,WB,ETA,EX,EY,HX,HY,EXR,
     1     EYR,HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K,II
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,ITMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL PEX,PEY,DT,HBAR,ERLIM,OLD,ER1,ER2,ERR,ER_ALL,OME
      REAL TIMEWAVY,TIME
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),SIGMA(NXMAX,NYMAX/NCPU,NZMAX)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EPS(NXMAX,NYMAX/NCPU,NZMAX)
      REAL ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL AL(NZMAX),AO(NZMAX),AR(NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      CALL SOURCE_S_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,
     1     PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,HBAR,HX,
     1     HY,EXR,EYR,HXR,HYR,HER,WB,NCPU)

      DO 100 II=1,ITMAX

         CALL SOURCE_E_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1        PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1        HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  OLD=PP(I,J,K)
                  PP(I,J,K)=SIGMA(I,J,K)+EPS(I,J,K)
                  EPS(I,J,K)=OLD
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,PP,
     1        AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)
         
         IF(TIME.LT.TIMEWAVY) GOTO 999

         ER1=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=PP(I,J,K)-EPS(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER1)) ER1=ERR
               ENDDO
            ENDDO
         ENDDO
         
         CALL SOURCE_E_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1        PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1        HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  EPS(I,J,K)=EPS(I,J,K)+SIGMA(I,J,K)
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,
     1        EPS,AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

         ER2=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=EPS(I,J,K)-PP(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER2)) ER2=ERR
               ENDDO
            ENDDO
         ENDDO
         
         IF(NYEND.EQ.0) THEN
            OME=0.
            ER2=0.
            GOTO 888
         ENDIF

         if(abs(er2)+abs(er1).eq.0) then
            print*, 'error at |er2+er1|'
            stop
         endif

         OME=ABS(ER2)/(ABS(ER2)+ABS(ER1))
         
 888     CONTINUE

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  PP(I,J,K)=EPS(I,J,K)-OME*(EPS(I,J,K)-PP(I,J,K))
               ENDDO
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(ABS(ER2),ER_ALL,1,MPI_DOUBLE_PRECISION,
     1        MPI_MAX,MPI_COMM_WORLD,IERR)
         IF(MYID.EQ.0) WRITE(*,*) II,ER2,ERLIM
         IF(ABS(ER_ALL).LT.ERLIM) GOTO 999
         
 100  CONTINUE
      
 999  CONTINUE

      RETURN
      END

C=====SUBROUTINE PRESSURE_LES_WALLMODEL3 END HERE







C=========================================================================
      SUBROUTINE PRESSURE_LES_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,
     1     NZMAX,PEX,PEY,DZ,ZZ,PP,DT,HBAR,U,V,W,UB,VB,WB,ETA,EX,EY,HX,
     1     HY,EXR,EYR,HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,
     1     TIMEWAVY,TIME,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K,II
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,ITMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL PEX,PEY,DT,HBAR,ERLIM,OLD,ER1,ER2,ERR,ER_ALL,OME
      REAL TIMEWAVY,TIME
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),SIGMA(NXMAX,NYMAX/NCPU,NZMAX)
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EPS(NXMAX,NYMAX/NCPU,NZMAX)
      REAL ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL AL(NZMAX),AO(NZMAX),AR(NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      CALL SOURCE_S_LES_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,
     1     PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,HBAR,HX,
     1     HY,EXR,EYR,HXR,HYR,HER,UB,VB,WB,NCPU)

      DO 100 II=1,ITMAX

         CALL SOURCE_E_LES_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1        PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1        HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  OLD=PP(I,J,K)
                  PP(I,J,K)=SIGMA(I,J,K)+EPS(I,J,K)
                  EPS(I,J,K)=OLD
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,PP,
     1        AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)
         
         IF(TIME.LT.TIMEWAVY) GOTO 999

         ER1=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=PP(I,J,K)-EPS(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER1)) ER1=ERR
               ENDDO
            ENDDO
         ENDDO
         
         CALL SOURCE_E_LES_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1        PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1        HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  EPS(I,J,K)=EPS(I,J,K)+SIGMA(I,J,K)
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,
     1        EPS,AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

         ER2=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=EPS(I,J,K)-PP(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER2)) ER2=ERR
               ENDDO
            ENDDO
         ENDDO
         
         IF(NYEND.EQ.0) THEN
            OME=0.
            ER2=0.
            GOTO 888
         ENDIF

         if(abs(er2)+abs(er1).eq.0) then
            print*, 'error at |er2+er1|'
            stop
         endif

         OME=ABS(ER2)/(ABS(ER2)+ABS(ER1))
         
 888     CONTINUE

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  PP(I,J,K)=EPS(I,J,K)-OME*(EPS(I,J,K)-PP(I,J,K))
               ENDDO
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(ABS(ER2),ER_ALL,1,MPI_DOUBLE_PRECISION,
     1        MPI_MAX,MPI_COMM_WORLD,IERR)
         IF(MYID.EQ.0) WRITE(*,*) II,ER2,ERLIM
         IF(ABS(ER_ALL).LT.ERLIM) GOTO 999
         
 100  CONTINUE
      
 999  CONTINUE

      RETURN
      END

C=====SUBROUTINE PRESSURE_LES_WALLMODEL4 END HERE







C=========================================================================
            SUBROUTINE TRID(C,D,E,LDT,N,B,LDS)
C  (Emulator of SCLIB TRID From PSC)
      INTEGER N
      REAL C(LDT,1),D(LDT,1),E(LDT,1),B(LDS,1)
C
C  TRID GIVEN A GENERAL TRIDIAGONAL MATRIX AND A RIGHT HAND
C  SIDE WILL FIND THE SOLUTION.  This is a bastard version of the
C  LINPACK routine SGTSL, modified to emulate the Cray SCILIB routine TRID.
C
C     ON ENTRY
C
C        N       INTEGER
C                IS THE ORDER OF THE TRIDIAGONAL MATRIX.
C
C        C       REAL(LDT,N)
C                IS THE SUBDIAGONAL OF THE TRIDIAGONAL MATRIX.
C                C(2) THROUGH C(N) SHOULD CONTAIN THE SUBDIAGONAL.
C                ON OUTPUT C IS DESTROYED.
C
C        D       REAL(LDT,N)
C                IS THE DIAGONAL OF THE TRIDIAGONAL MATRIX.
C                ON OUTPUT D IS DESTROYED.
C
C        E       REAL(LDT,N)
C                IS THE SUPERDIAGONAL OF THE TRIDIAGONAL MATRIX.
C                E(1) THROUGH E(N-1) SHOULD CONTAIN THE SUPERDIAGONAL.
C                ON OUTPUT E IS DESTROYED.
C
C        B       REAL(LDS,N)
C                IS THE RIGHT HAND SIDE VECTOR.
C
C     ON RETURN
C
C        B       IS THE SOLUTION VECTOR.
C
C     LINPACK. THIS VERSION DATED 08/14/78 .
C     JACK DONGARRA, ARGONNE NATIONAL LABORATORY.
C
C     NO EXTERNALS
C     FORTRAN ABS
C
C     INTERNAL VARIABLES
C
      INTEGER K,KB,KP1,NM1,NM2
      REAL T
C     BEGIN BLOCK PERMITTING ...EXITS TO 100
C
         C(1,1) = D(1,1)
         NM1 = N - 1
         IF (NM1 .LT. 1) GO TO 40
            D(1,1) = E(1,1)
            E(1,1) = 0.0E0
            E(1,N) = 0.0E0
C
            DO 30 K = 1, NM1
               KP1 = K + 1
C
C              FIND THE LARGEST OF THE TWO ROWS
C
               IF (ABS(C(1,KP1)) .LT. ABS(C(1,K))) GO TO 10
C
C                 INTERCHANGE ROW
C
                  T = C(1,KP1)
                  C(1,KP1) = C(1,K)
                  C(1,K) = T
                  T = D(1,KP1)
                  D(1,KP1) = D(1,K)
                  D(1,K) = T
                  T = E(1,KP1)
                  E(1,KP1) = E(1,K)
                  E(1,K) = T
                  T = B(1,KP1)
                  B(1,KP1) = B(1,K)
                  B(1,K) = T
   10          CONTINUE
C
C              ZERO ELEMENTS
C
               IF (C(1,K) .NE. 0.0E0) GO TO 20
C     ............EXIT
                  GO TO 100
   20          CONTINUE
               T = -C(1,KP1)/C(1,K)
               C(1,KP1) = D(1,KP1) + T*D(1,K)
               D(1,KP1) = E(1,KP1) + T*E(1,K)
               E(1,KP1) = 0.0E0
               B(1,KP1) = B(1,KP1) + T*B(1,K)
   30       CONTINUE
   40    CONTINUE
         IF (C(1,N) .NE. 0.0E0) GO TO 50
         GO TO 90
   50    CONTINUE
C
C           BACK SOLVE
C
            NM2 = N - 2
            B(1,N) = B(1,N)/C(1,N)
            IF (N .EQ. 1) GO TO 80
               B(1,NM1) = (B(1,NM1) - D(1,NM1)*B(1,N))/C(1,NM1)
               IF (NM2 .LT. 1) GO TO 70
               DO 60 KB = 1, NM2
                  K = NM2 - KB + 1
                  B(1,K) = 
     *            (B(1,K) - D(1,K)*B(1,K+1) - E(1,K)*B(1,K+2))/C(1,K)
   60          CONTINUE
   70          CONTINUE
   80       CONTINUE
   90    CONTINUE
  100 CONTINUE
C
      RETURN
      END

C=====SUBROUTINE TRID END HERE







C========================================================================
      SUBROUTINE SOURCE_S_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,DT,
     1     WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,HBAR,HX,HY,
     1     EXR,EYR,HXR,HYR,HER,UB,VB,WB,UT,VT,WT,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,DT,HBAR,TR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL SIGMA(NXMAX,NYMAX/NCPU,*),ETA(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UB(NXMAX,NYMAX/NCPU),UT(NXMAX,NYMAX/NCPU)
      REAL VB(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WB(NXMAX,NYMAX/NCPU),WT(NXMAX,NYMAX/NCPU)
C     UB,VB,WB ARE THE BOTTOM VELOCITY AT N+1 TIME STEP
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),FTMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL PDFX_PARA(U(1,1,2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(2)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(2)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
c$$$            T3(I,J)=T3(I,J)*(U(I,J,3)+3.*U(I,J,2)-4.*UB(I,J))/3./DZ(2)
c$$$            T4(I,J)=T4(I,J)*(V(I,J,3)+3.*V(I,J,2)-4.*VB(I,J))/3./DZ(2)
            T3(I,J)=T3(I,J)*(U(I,J,2)-UB(I,J))/DZ(1)
            T4(I,J)=T4(I,J)*(V(I,J,2)-VB(I,J))/DZ(1)
            T5(I,J)=(W(I,J,2)-WB(I,J))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      TR=1./DT

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,2)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(3)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(3)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,4)-U(I,J,2))/DZ(2)/2.
            T4(I,J)=T4(I,J)*(V(I,J,4)-V(I,J,2))/DZ(2)/2.
            T5(I,J)=(W(I,J,3)-W(I,J,2))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,3)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC
      
      DO 100 K=4,NZ-3

         CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
               T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
               T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
               T5(I,J)=2.*(W(I,J,K)-W(I,J,K-1))*HER(I,J)/(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
            ENDDO
         ENDDO 
        
 100  CONTINUE
      
CC

      K=NZ-2

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/DZ(K)/2.
            T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/DZ(K)/2.
            T5(I,J)=(W(I,J,K)-W(I,J,K-1))*HER(I,J)/DZ(K)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO
      
CC

      K=NZ-1

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T3(I,J)=T3(I,J)*(4.*UT(I,J)-3.*U(I,J,K)-U(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
CC            T4(I,J)=T4(I,J)*(4.*VT(I,J)-3.*V(I,J,K)-V(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
            T3(I,J)=T3(I,J)*(U(I,J,K)-U(I,J,K-1))/(2.*DZ(NZ-2))
            T4(I,J)=T4(I,J)*(V(I,J,K)-V(I,J,K-1))/(2.*DZ(NZ-2))
            T5(I,J)=(WT(I,J)-W(I,J,K-1))*HER(I,J)/DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,SIGMA,NCPU)
      
      RETURN
      END

C=====SUBROUTINE SOURCE_S_G END HERE







C========================================================================
      SUBROUTINE SOURCE_S_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,
     1     ZZ,PEX,PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,
     1     HBAR,HX,HY,EXR,EYR,HXR,HYR,HER,WB,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,DT,HBAR,TR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL SIGMA(NXMAX,NYMAX/NCPU,*),ETA(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),FTMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL PDFX_PARA(U(1,1,2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(2)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(2)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))/2./DZ(2)
            T4(I,J)=T4(I,J)*(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))/2./DZ(2)
            T5(I,J)=(W(I,J,2)-WB(I,J))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      TR=1./DT

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,2)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(3)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(3)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,4)-U(I,J,2))/DZ(2)/2.
            T4(I,J)=T4(I,J)*(V(I,J,4)-V(I,J,2))/DZ(2)/2.
            T5(I,J)=(W(I,J,3)-W(I,J,2))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,3)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC
      
      DO 100 K=4,NZ-3

         CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
               T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
               T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
               T5(I,J)=2.*(W(I,J,K)-W(I,J,K-1))*HER(I,J)/(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
            ENDDO
         ENDDO 
        
 100  CONTINUE
      
CC

      K=NZ-2

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/DZ(K)/2.
            T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/DZ(K)/2.
            T5(I,J)=(W(I,J,K)-W(I,J,K-1))*HER(I,J)/DZ(K)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO
      
CC

      K=NZ-1

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T3(I,J)=T3(I,J)*(4.*U(I,J,K+1)-3.*U(I,J,K)-U(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
CC            T4(I,J)=T4(I,J)*(4.*V(I,J,K+1)-3.*V(I,J,K)-V(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
            T3(I,J)=T3(I,J)*(U(I,J,K)-U(I,J,K-1))/(2.*DZ(NZ-2))
            T4(I,J)=T4(I,J)*(V(I,J,K)-V(I,J,K-1))/(2.*DZ(NZ-2))
            T5(I,J)=(0.-W(I,J,K-1))*HER(I,J)/DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,SIGMA,NCPU)
      
      RETURN
      END

C=====SUBROUTINE SOURCE_S_LES_WALLMODEL END HERE







C========================================================================
      SUBROUTINE SOURCE_S_LES_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,
     1     ZZ,PEX,PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,
     1     HBAR,HX,HY,EXR,EYR,HXR,HYR,HER,UB,VB,WB,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,DT,HBAR,TR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL SIGMA(NXMAX,NYMAX/NCPU,*),ETA(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),FTMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL PDFX_PARA(U(1,1,2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(2)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(2)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*((U(I,J,3)+U(I,J,2))/2.-UB(I,J))/DZ(2)
            T4(I,J)=T4(I,J)*((V(I,J,3)+V(I,J,2))/2.-VB(I,J))/DZ(2)
            T5(I,J)=(W(I,J,2)-WB(I,J))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      TR=1./DT

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,2)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(3)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(3)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,4)-U(I,J,2))/DZ(2)/2.
            T4(I,J)=T4(I,J)*(V(I,J,4)-V(I,J,2))/DZ(2)/2.
            T5(I,J)=(W(I,J,3)-W(I,J,2))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,3)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC
      
      DO 100 K=4,NZ-3

         CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
               T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
               T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
               T5(I,J)=2.*(W(I,J,K)-W(I,J,K-1))*HER(I,J)/(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
            ENDDO
         ENDDO 
        
 100  CONTINUE
      
CC

      K=NZ-2

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/DZ(K)/2.
            T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/DZ(K)/2.
            T5(I,J)=(W(I,J,K)-W(I,J,K-1))*HER(I,J)/DZ(K)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO
      
CC

      K=NZ-1

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T3(I,J)=T3(I,J)*(4.*U(I,J,K+1)-3.*U(I,J,K)-U(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
CC            T4(I,J)=T4(I,J)*(4.*V(I,J,K+1)-3.*V(I,J,K)-V(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
            T3(I,J)=T3(I,J)*(U(I,J,K)-U(I,J,K-1))/(2.*DZ(NZ-2))
            T4(I,J)=T4(I,J)*(V(I,J,K)-V(I,J,K-1))/(2.*DZ(NZ-2))
            T5(I,J)=(0.-W(I,J,K-1))*HER(I,J)/DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,SIGMA,NCPU)
      
      RETURN
      END

C=====SUBROUTINE SOURCE_S_LES_WALLMODEL2 END HERE








C========================================================================
      SUBROUTINE SOURCE_S_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,
     1     ZZ,PEX,PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,
     1     HBAR,HX,HY,EXR,EYR,HXR,HYR,HER,WB,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,DT,HBAR,TR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL SIGMA(NXMAX,NYMAX/NCPU,*),ETA(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),FTMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL PDFX_PARA(U(1,1,2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(2)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(2)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2)
            T4(I,J)=T4(I,J)*(V(I,J,3)-V(I,J,2))/DZ(2)
            T5(I,J)=(W(I,J,2)-WB(I,J))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      TR=1./DT

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,2)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(3)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(3)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,4)-U(I,J,2))/DZ(2)/2.
            T4(I,J)=T4(I,J)*(V(I,J,4)-V(I,J,2))/DZ(2)/2.
            T5(I,J)=(W(I,J,3)-W(I,J,2))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,3)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC
      
      DO 100 K=4,NZ-3

         CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
               T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
               T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
               T5(I,J)=2.*(W(I,J,K)-W(I,J,K-1))*HER(I,J)/(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
            ENDDO
         ENDDO 
        
 100  CONTINUE
      
CC

      K=NZ-2

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/DZ(K)/2.
            T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/DZ(K)/2.
            T5(I,J)=(W(I,J,K)-W(I,J,K-1))*HER(I,J)/DZ(K)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO
      
CC

      K=NZ-1

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T3(I,J)=T3(I,J)*(4.*U(I,J,K+1)-3.*U(I,J,K)-U(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
CC            T4(I,J)=T4(I,J)*(4.*V(I,J,K+1)-3.*V(I,J,K)-V(I,J,K-1))
CC     1           /DZ(NZ-2)/3.
            T3(I,J)=T3(I,J)*(U(I,J,K)-U(I,J,K-1))/(2.*DZ(NZ-2))
            T4(I,J)=T4(I,J)*(V(I,J,K)-V(I,J,K-1))/(2.*DZ(NZ-2))
            T5(I,J)=(0.-W(I,J,K-1))*HER(I,J)/DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,SIGMA,NCPU)
      
      RETURN
      END

C=====SUBROUTINE SOURCE_S_LES_WALLMODEL3 END HERE







C========================================================================
      SUBROUTINE SOURCE_S_LES_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,
     1     ZZ,PEX,PEY,DT,WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,
     1     HBAR,HX,HY,EXR,EYR,HXR,HYR,HER,UB,VB,WB,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,DT,HBAR,TR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL SIGMA(NXMAX,NYMAX/NCPU,*),ETA(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),FTMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL PDFX_PARA(U(1,1,2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(2)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(2)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,3)-UB(I,J))/(DZ(1)+DZ(2))
            T4(I,J)=T4(I,J)*(V(I,J,3)-VB(I,J))/(DZ(1)+DZ(2))
            T5(I,J)=(W(I,J,2)-WB(I,J))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      TR=1./DT

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,2)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(3)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(3)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,4)-U(I,J,2))/DZ(2)/2.
            T4(I,J)=T4(I,J)*(V(I,J,4)-V(I,J,2))/DZ(2)/2.
            T5(I,J)=(W(I,J,3)-W(I,J,2))*HER(I,J)/DZ(2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,3)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

CC
      
      DO 100 K=4,NZ-3

         CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
               T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
               T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
               T5(I,J)=2.*(W(I,J,K)-W(I,J,K-1))*HER(I,J)/(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
            ENDDO
         ENDDO 
        
 100  CONTINUE
      
CC

      K=NZ-2

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,K+1)-U(I,J,K-1))/DZ(K)/2.
            T4(I,J)=T4(I,J)*(V(I,J,K+1)-V(I,J,K-1))/DZ(K)/2.
            T5(I,J)=(W(I,J,K)-W(I,J,K-1))*HER(I,J)/DZ(K)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO
      
CC

      K=NZ-1

      CALL PDFX_PARA(U(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=HXR(I,J)-ZZ(K)*EXR(I,J)
            T4(I,J)=HYR(I,J)-ZZ(K)*EYR(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=T3(I,J)*(U(I,J,K)-U(I,J,K-1))/(2.*DZ(NZ-2))
            T4(I,J)=T4(I,J)*(V(I,J,K)-V(I,J,K-1))/(2.*DZ(NZ-2))
            T5(I,J)=(0.-W(I,J,K-1))*HER(I,J)/DZ(NZ-2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            SIGMA(I,J,K)=TR*(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,SIGMA,NCPU)
      
      RETURN
      END

C=====SUBROUTINE SOURCE_S_LES_WALLMODEL4 END HERE







C========================================================================
      SUBROUTINE SOURCE_E_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL SOURCE_E_G_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL SOURCE_E_G_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-3
         CALL SOURCE_E_G_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL SOURCE_E_G_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
C+++
C     FOR PLANE DRIVEN COUETTE FLOW
CC      CALL SOURCE_E_G_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
CC     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

C     FOR USTOP DRIVEN COUETTE FLOW
      CALL SOURCE_E_G_NZ1_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)
C+++
      
      RETURN
      END
      
C-------------------------------------------------------------------------
      SUBROUTINE SOURCE_E_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C     THIS SUBROUTINE IS FOR PRESSURE DRIVEN LES WIND FREE-SLIP TOP

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL SOURCE_E_G_2_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

      CALL SOURCE_E_G_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-3
         CALL SOURCE_E_G_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL SOURCE_E_G_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      CALL SOURCE_E_G_NZ1_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)
      
      RETURN
      END

C-------------------------------------------------------------------------
      SUBROUTINE SOURCE_E_LES_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C     THIS SUBROUTINE IS FOR PRESSURE DRIVEN LES WIND FREE-SLIP TOP

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL SOURCE_E_G_2_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

      CALL SOURCE_E_G_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-3
         CALL SOURCE_E_G_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL SOURCE_E_G_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      CALL SOURCE_E_G_NZ1_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)
      
      RETURN
      END

C-------------------------------------------------------------------------
      SUBROUTINE SOURCE_E_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C     THIS SUBROUTINE IS FOR PRESSURE DRIVEN LES WIND FREE-SLIP TOP

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL SOURCE_E_G_2_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

      CALL SOURCE_E_G_3_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

      DO K=4,NZ-3
         CALL SOURCE_E_G_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL SOURCE_E_G_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      CALL SOURCE_E_G_NZ1_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)
      
      RETURN
      END

C-------------------------------------------------------------------------
      SUBROUTINE SOURCE_E_LES_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C     THIS SUBROUTINE IS FOR PRESSURE DRIVEN LES WIND FREE-SLIP TOP

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL SOURCE_E_G_2_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

      CALL SOURCE_E_G_3_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

      DO K=4,NZ-3
         CALL SOURCE_E_G_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL SOURCE_E_G_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      CALL SOURCE_E_G_NZ1_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)
      
      RETURN
      END

C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)       

      CALL PDFY_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
c$$$            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
c$$$     1           -3.*PP(I,J,2))/2./DZ(2)
c$$$            T5(I,J)=(T1(I,J)+3.*T2(I,J)+T3(I,J)+3.*T4(I,J))/3./DZ(2)
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T5(I,J)=(T2(I,J)+T4(I,J))/DZ(1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
c$$$            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
c$$$     1           -3.*PP(I,J,2))/2./DZ(2)
c$$$            T4(I,J)=(T1(I,J)+3.*T2(I,J)+T3(I,J)+3.*T4(I,J))/3./DZ(2)
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T4(I,J)=(T2(I,J)+T4(I,J))/DZ(1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
c$$$            T1(I,J)=(-PP(I,J,4)+4.*PP(I,J,3)-3.*PP(I,J,2))/2./DZ(2)
            T1(I,J)=(PP(I,J,3)-PP(I,J,2))/DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
     1           -HER(I,J)*T1(I,J)
            EPS(I,J,2)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,2),NCPU)

      RETURN
      END


C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_2_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),T6(NXMAX,NYMAX/NCPU)
      REAL T7(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)       

      CALL PDFY_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HYR(I,J)-ZZ(4)*EYR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T5(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T6(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T7(I,J)=(-T1(I,J)+4.*T2(I,J)-3.*T3(I,J)-T4(I,J)+4.*T5(I,J)
     1           -3.*T6(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T7,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T7(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T7(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,3),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T3,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(4)*EXR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T5(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T6(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T6(I,J)=(-T1(I,J)+4.*T2(I,J)-3.*T3(I,J)-T4(I,J)+4.*T5(I,J)
     1           -3.*T6(I,J))/2./DZ(2)  
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T6,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T6(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T6(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(-PP(I,J,4)+4.*PP(I,J,3)-3.*PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
     1           -HER(I,J)*T1(I,J)
            EPS(I,J,2)=T1(I,J)-T2(I,J)-T3(I,J)-T6(I,J)-T7(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,2),NCPU)

      RETURN
      END

C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_2_WALLMODEL2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)       

      CALL PDFY_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T5(I,J)=(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T4(I,J)=(T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J))/2./DZ(2)  
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(-PP(I,J,4)+4.*PP(I,J,3)-3.*PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
     1           -HER(I,J)*T1(I,J)
            EPS(I,J,2)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,2),NCPU)

      RETURN
      END


C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_2_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)       

      CALL PDFY_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/DZ(2)  
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,3)-PP(I,J,2))/DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
     1           -HER(I,J)*T1(I,J)
            EPS(I,J,2)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,2),NCPU)

      RETURN
      END


C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_2_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)       

      CALL PDFY_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
CC      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
CC     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
CC            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(PP(I,J,3)-PP(I,J,2))
CC     1           /DZ(2)
CC            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/DZ(2)
            T5(I,J)=(T1(I,J)+T3(I,J))/(DZ(1)+DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
CC      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
CC     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
CC            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(PP(I,J,3)-PP(I,J,2))
CC     1           /DZ(2)
CC            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/DZ(2)
            T4(I,J)=(T1(I,J)+T3(I,J))/(DZ(1)+DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,3)-PP(I,J,2))/DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
     1           -HER(I,J)*T1(I,J)
            EPS(I,J,2)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,2),NCPU)

      RETURN
      END

C------------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR) 
      
      CALL PDFY_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(4)*EYR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
c$$$            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
c$$$     1           -3.*PP(I,J,2))/2./DZ(2)
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)           
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(4)*EXR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
c$$$            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
c$$$     1           -3.*PP(I,J,2))/2./DZ(2)
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)           
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,4)-PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,4)-2.*PP(I,J,3)+PP(I,J,2))
     1           /(DZ(2))**2
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,4)-2.*PP(I,J,3)+PP(I,J,2))
     1           /DZ(2)**2-HER(I,J)*T1(I,J)
            EPS(I,J,3)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,3),NCPU)
      
      RETURN
      END

C------------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_3_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU

      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(4)*EYR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(4)*EXR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(PP(I,J,3)-PP(I,J,2))
     1           /DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,4)-PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,4)-2.*PP(I,J,3)+PP(I,J,2))
     1           /(DZ(2))**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,4)-2.*PP(I,J,3)+PP(I,J,2))
     1           /DZ(2)**2-HER(I,J)*T1(I,J)
            EPS(I,J,3)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,3),NCPU)

      RETURN
      END

C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR) 
      
      CALL PDFY_PARA(PP(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(K+1)*EYR(I,J))*(PP(I,J,K+2)-PP(I,J,K))
     1           /(DZ(K)+DZ(K+1))
            T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /(DZ(K-2)+DZ(K-1))
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(K+1)*EXR(I,J))*(PP(I,J,K+2)-PP(I,J,K))
     1           /(DZ(K)+DZ(K+1))
            T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /(DZ(K-2)+DZ(K-1))
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K)) 
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,K+1)-PP(I,J,K-1))/(DZ(K-1)+DZ(K))
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO
      
      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*((PP(I,J,K+1)-PP(I,J,K))/DZ(K)-(PP(I,J,K)
     1           -PP(I,J,K-1))/DZ(K-1))*2./(DZ(K-1)+DZ(K))
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*((PP(I,J,K+1)-PP(I,J,K))/DZ(K)-(PP(I,J,K)
     1           -PP(I,J,K-1))/DZ(K-1))*2./(DZ(K-1)+DZ(K))-HER(I,J)
     1           *T1(I,J)
            EPS(I,J,K)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,K),NCPU)
      
      RETURN
      END

C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR) 
      
      CALL PDFY_PARA(PP(1,1,NZ-1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,NZ-3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(NZ-1)*EYR(I,J))*(3.*PP(I,J,NZ-1)
     1           -4.*PP(I,J,NZ-2)+PP(I,J,NZ-3))/2./DZ(NZ-2)
            T4(I,J)=(HYR(I,J)-ZZ(NZ-3)*EYR(I,J))*(PP(I,J,NZ-2)
     1           -PP(I,J,NZ-4))/(DZ(NZ-4)+DZ(NZ-3))
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(NZ-2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,NZ-1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,NZ-3),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(NZ-1)*EXR(I,J))*(3.*PP(I,J,NZ-1)
     1           -4.*PP(I,J,NZ-2)+PP(I,J,NZ-3))/2./DZ(NZ-2)
            T4(I,J)=(HXR(I,J)-ZZ(NZ-3)*EXR(I,J))*(PP(I,J,NZ-2)
     1           -PP(I,J,NZ-4))/(DZ(NZ-4)+DZ(NZ-3))
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(NZ-2)           
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(NZ-2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,NZ-1)-PP(I,J,NZ-3))/2./DZ(NZ-2)
            T2(I,J)=(HXR(I,J)-ZZ(NZ-2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(NZ-2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,NZ-1)-2.*PP(I,J,NZ-2)+PP(I,J,NZ-3))
     1           /DZ(NZ-2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=1./HBAR**2*(PP(I,J,NZ-1)-2.*PP(I,J,NZ-2)
     1           +PP(I,J,NZ-3))/DZ(NZ-2)**2-HER(I,J)*T1(I,J)
            EPS(I,J,NZ-2)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,NZ-2),NCPU)
      
      RETURN
      END 

C-----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR) 
      
      K=NZ-1
      
      CALL PDFY_PARA(PP(1,1,K),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*(3.*PP(I,J,K)
     1           -4.*PP(I,J,K-1)+PP(I,J,K-2))/2./DZ(K-1)
            T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /2./DZ(K-1)
            T5(I,J)=-(3.*T1(I,J)+T2(I,J)+3.*T3(I,J)+T4(I,J))/3./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*(3.*PP(I,J,K)
     1           -4.*PP(I,J,K-1)+PP(I,J,K-2))/2./DZ(K-1)
            T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /2./DZ(K-1)
            T4(I,J)=-(3.*T1(I,J)+T2(I,J)+3.*T3(I,J)+T4(I,J))/3./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(3.*PP(I,J,K)-4.*PP(I,J,K-1)+PP(I,J,K-2))/2./DZ(K-1)
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1)**2
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=-1./HBAR**2*(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1)**2
     1           +HER(I,J)*T1(I,J)
            EPS(I,J,K)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,K),NCPU)

      RETURN
      END


C--------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_NZ1_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C     THIS SUBROUTINE IS FOR USTOP DRIVEN COUETTE FLOW
      
      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NCPU
      REAL PEX,PEY,HBAR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),T6(NXMAX,NYMAX/NCPU)
      REAL T7(NXMAX,NYMAX/NCPU),PT(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      K=NZ-1
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            PT(I,J)=(35.*PP(I,J,K)-35.*PP(I,J,K-1)+21.*PP(I,J,K-2)
     1           -5.*PP(I,J,K-3))/16.
         ENDDO
      ENDDO
      
      CALL PDFY_PARA(PT,T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,K-1),T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HYR(I,J)-ZZ(K+1)*EYR(I,J))*(2.*PP(I,J,K)
     1           -3.*PP(I,J,K-1)+PP(I,J,K-2))/DZ(K-1)
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*(3.*PP(I,J,K)
     1           -4.*PP(I,J,K-1)+PP(I,J,K-2))/2./DZ(K-1)
            T6(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /2./DZ(K-1)
            T7(I,J)=(4.*T1(I,J)-3.*T2(I,J)-T3(I,J)+4.*T4(I,J)-3.*T5(I,J)
     1           -T6(I,J))/3./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T7,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T7(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T7(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PT,T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,K),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,K-1),T3,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K+1)*EXR(I,J))*(2.*PP(I,J,K)
     1           -3.*PP(I,J,K-1)+PP(I,J,K-2))/DZ(K-1)
            T5(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*(3.*PP(I,J,K)
     1           -4.*PP(I,J,K-1)+PP(I,J,K-2))/2./DZ(K-1)
            T6(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /2./DZ(K-1)
            T6(I,J)=(4.*T1(I,J)-3.*T2(I,J)-T3(I,J)+4.*T4(I,J)-3.*T5(I,J)
     1           -T6(I,J))/3./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T6,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T6(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T6(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(3.*PP(I,J,K)-4.*PP(I,J,K-1)+PP(I,J,K-2))/2./DZ(K-1)
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1)**2
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=-1./HBAR**2*(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1)**2
     1           +HER(I,J)*T1(I,J)
            EPS(I,J,K)=T1(I,J)-T2(I,J)-T3(I,J)-T6(I,J)-T7(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,K),NCPU)
      
      RETURN
      END

C----------------------------------------------------------------------
      SUBROUTINE SOURCE_E_G_NZ1_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,
     1     PEX,PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,
     1     HXR,HYR,HER,NCPU)

C     THIS SUBROUTINE IS FOR LES WITH FREE-SLIP TOP BOUNDARY
      
      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NCPU
      REAL PEX,PEY,HBAR
      
      REAL EPS(NXMAX,NYMAX/NCPU,*),PP(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      K=NZ-1

      CALL PDFY_PARA(PP(1,1,K),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*(PP(I,J,K)-PP(I,J,K-1))
     1           /(2.*DZ(K-1))
            T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /(2.*DZ(K-1))
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(2.*DZ(K-1))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*(PP(I,J,K)-PP(I,J,K-1))
     1           /(2.*DZ(K-1))
            T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(PP(I,J,K)-PP(I,J,K-2))
     1           /(2.*DZ(K-1))
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(2.*DZ(K-1))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,K)-PP(I,J,K-1))/2./DZ(K-1)
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1)**2
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=-1./HBAR**2*(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1)**2
     1           +HER(I,J)*T1(I,J)
            EPS(I,J,K)=T1(I,J)-T2(I,J)-T3(I,J)-T4(I,J)-T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,EPS(1,1,K),NCPU)
      
      RETURN
      END

C=====SUBROUTINE SOURCE_E_G END HERE






C=====================================================================
      SUBROUTINE POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,
     1     PEY,SIGMA,AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

      IMPLICIT NONE
      
      INTEGER M,L,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER NZ2,INC,MODEX,MODEY

      REAL PEX,PEY,HBAR
      REAL AX,AY,C

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR 
      
      REAL SIGMA(NXMAX,NYMAX/NCPU,*)
      REAL AL(*),AO(*),AR(*),WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*)
      REAL SA
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO K=2,NZ-1
         CALL FFTXY_PARA(SIGMA(1,1,K),WORK,TRIGSX,TRIGSY,IFAX,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU,-1)
      ENDDO

      NZ2=NZ-2
      INC=NXMAX*NYMAX/NCPU
      DO M=1,NYMAX/NCPU
         MODEY=(MYID*NYMAX/NCPU+M-1)/2
         AY=PEY*MODEY
         DO L=1,NXMOD+2
            MODEX=(L-1)/2
            AX=PEX*MODEX
            C=-AX**2-AY**2
            SA=0.0
            
            SIGMA(L,M,2)=SIGMA(L,M,2)*HBAR**2*DZ(2)
            AL(2)=0.
            AO(2)=C*HBAR**2*DZ(2)-1./DZ(2)
            AR(2)=1./DZ(2)

            SIGMA(L,M,3)=SIGMA(L,M,3)*HBAR**2*DZ(2)
            AL(3)=1./DZ(2)
            AO(3)=C*HBAR**2*DZ(2)-2./DZ(2)
            AR(3)=1./DZ(2)
            
            DO K=4,NZ-3
               SIGMA(L,M,K)=SIGMA(L,M,K)*HBAR**2*(DZ(K-1)+DZ(K))/2.
               AL(K)=1./DZ(K-1)
               AO(K)=C*HBAR**2*(DZ(K)+DZ(K-1))/2.-(1./DZ(K-1)+1./DZ(K))
               AR(K)=1./DZ(K)
            ENDDO

            SIGMA(L,M,NZ-2)=SIGMA(L,M,NZ-2)*HBAR**2*DZ(NZ-2)
            AL(NZ-2)=1./DZ(NZ-2)
            AO(NZ-2)=C*HBAR**2*DZ(NZ-2)-2./DZ(NZ-2)
            AR(NZ-2)=1./DZ(NZ-2)
            
            SIGMA(L,M,NZ-1)=SIGMA(L,M,NZ-1)*HBAR**2*DZ(NZ-2)
            AL(NZ-1)=1./DZ(NZ-2)
            AO(NZ-1)=C*HBAR**2*DZ(NZ-2)-1./DZ(NZ-2)
            AR(NZ-1)=0.

            IF(MODEX.EQ.0.AND.MODEY.EQ.0) THEN

C+++
c     for flat free-slip case: sa=0
               DO K=2,NZ-1
                  SA=SA+SIGMA(L,M,K)
               ENDDO
               SA=SA/NZ2
               DO K=2,NZ-1
                  SIGMA(L,M,K)=SIGMA(L,M,K)-SA
               ENDDO
cc               MMM=MYID*NYMAX/NCPU+M
cc               IF(L.EQ.1.AND.MMM.EQ.1) THEN
cc                  PRINT*, "MYID=",MYID
cc                  PRINT*, 'L=',L,', M=',MMM,', DIF=',SA
cc               ENDIF
C+++
               
               SIGMA(L,M,2)=0.
               AL(2)=0.
               AO(2)=1.
               AR(2)=0.

            ENDIF

            CALL TRID(AL(2),AO(2),AR(2),1,NZ2,SIGMA(L,M,2),INC)

         ENDDO
      ENDDO
      
      DO K=2,NZ-1
         CALL FFTXY_PARA(SIGMA(1,1,K),WORK,TRIGSX,TRIGSY,IFAX,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU,1)
      ENDDO

      RETURN
      END

C=====SUBROUTINE POISSON_UU END HERE








C=========================================================================
      SUBROUTINE TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,
     1     UZFS,VZFS,W,HBAR,NUTA,USTOP,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NCPU
      
      REAL HBAR,RE,USTOP

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*)
      REAL UZFS(NXMAX,*),VZFS(NXMAX,*),W(NXMAX,NYMAX/NCPU,*)
      REAL NUTA(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CC      IF(NUTA(NZ).LT.1.E-10) THEN
CC         PRINT*, 'NUTA(NZ)=',NUTA(NZ)
CC         STOP
CC      ENDIF
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ETA0(I,J)=0.
            ETA(I,J)=ETA0(I,J)+HH(I,J)
CC            UZFS(I,J)=(ETA(I,J)+HBAR)*USTOP**2/NUTA(NZ)
            UZFS(I,J)=0.
            VZFS(I,J)=0.
            W(I,J,NZ-1)=0.
         ENDDO
      ENDDO

      RETURN
      END

C=====SUBROUTINE TOP_FS_LES_HOS END HERE







C=====================================================================
      SUBROUTINE VOLUME_LNR1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER IMAX,JMAX,KMAX
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL PEX,PEY,TIME,DIVMAX,DIV_ALL,DU,DV,DW

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UX(NXMAX,NYMAX/NCPU),VY(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU),VZ(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU),DIV(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DIVMAX=0.
      IMAX=0
      JMAX=0
      KMAX=0

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      DO K=2,NZ-1
         CALL PDFX_PARA(U(1,1,K),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.2) THEN
                  UZ(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))/2./DZ(2)
                  VZ(I,J)=(-V(I,J,4)+4.*V(I,J,3)-3.*V(I,J,2))/2./DZ(2)
                  WZ(I,J)=(W(I,J,2)-W(I,J,1))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
CC                  UZ(I,J)=(4.*U(I,J,K+1)-3.*U(I,J,K)-U(I,J,K-1))
CC     1                 /3./DZ(K-1)
CC                  VZ(I,J)=(4.*V(I,J,K+1)-3.*V(I,J,K)-V(I,J,K-1))
CC     1                 /3./DZ(K-1)
C+++
C     FOR FREE-SLIP CONDITION
                  UZ(I,J)=(U(I,J,NZ-1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZ(I,J)=(V(I,J,NZ-1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
C+++
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K-1)
               ELSE
                  UZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
                  VZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))*2./(DZ(K-1)+DZ(K))
               ENDIF
               
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               DU=UX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZ(I,J)
               DV=VY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZ(I,J)
               DW=HER(I,J)*WZ(I,J)
               DIV(I,J)=DU+DV+DW
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,DIV,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(ABS(DIV(I,J)).GT.DIVMAX) THEN
                  DIVMAX=ABS(DIV(I,J))
                  IMAX=I
                  JMAX=J
                  KMAX=K
               ENDIF
            ENDDO
         ENDDO
      ENDDO
      
      WRITE(95*1000+MYID,905) TIME,DIVMAX,IMAX,JMAX,KMAX
      if(myid.eq.0) then
         WRITE(*,905) TIME,DIVMAX,IMAX,JMAX,KMAX
      endif
 905  FORMAT(F8.3,E11.3,3I4)
      
      RETURN
      END

C=====SUBROUTINE VOLUME_LNR1 END HERE






C======================================================================
      SUBROUTINE VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERFILT)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER IMAX,JMAX,KMAX
      INTEGER NCREQ,JJ1,JJ2,NYEND
      INTEGER KFILT

      REAL PEX,PEY,TIME,DIVMAX,DIV_ALL,DU,DV,DW,ERFILT

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UX(NXMAX,NYMAX/NCPU),VY(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU),VZ(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU),DIV(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DIVMAX=0.
      IMAX=0
      JMAX=0
      KMAX=0
      DIV_ALL=0.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      DO K=2,NZ-1
         CALL PDFX_PARA(U(1,1,K),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.2) THEN
CC                  UZ(I,J)=(-U(I,J,4)+4.*U(I,J,3)-3.*U(I,J,2))/2./DZ(2)
CC                  VZ(I,J)=(-V(I,J,3)+4.*V(I,J,3)-3.*V(I,J,2))/2./DZ(2)
c$$$                  UZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))/3./DZ(2)
c$$$                  VZ(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))/3./DZ(2)
                  UZ(I,J)=(U(I,J,2)-U(I,J,1))/DZ(1)
                  VZ(I,J)=(V(I,J,2)-V(I,J,1))/DZ(1)
                  WZ(I,J)=(W(I,J,2)-W(I,J,1))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
CC                  UZ(I,J)=(4.*U(I,J,K+1)-3.*U(I,J,K)-U(I,J,K-1))
CC     1                 /3./DZ(K-1)
CC                  VZ(I,J)=(4.*V(I,J,K+1)-3.*V(I,J,K)-V(I,J,K-1))
CC     1                 /3./DZ(K-1)
C+++
C     FOR FREE-SLIP CONDITION
                  UZ(I,J)=(U(I,J,NZ-1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZ(I,J)=(V(I,J,NZ-1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
C+++
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K-1)
               ELSE
                  UZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
                  VZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))*2./(DZ(K-1)+DZ(K))
               ENDIF
               
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               DU=UX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZ(I,J)
               DV=VY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZ(I,J)
               DW=HER(I,J)*WZ(I,J)
               DIV(I,J)=DU+DV+DW
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,DIV,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(ABS(DIV(I,J)).GT.DIVMAX) THEN
                  DIVMAX=ABS(DIV(I,J))
                  IMAX=I
                  JMAX=J
                  KMAX=K
               ENDIF
            ENDDO
         ENDDO
      ENDDO
      
      WRITE(95*1000+MYID,905) TIME,DIVMAX,IMAX,JMAX,KMAX
      CALL MPI_ALLREDUCE(DIVMAX,DIV_ALL,1,MPI_DOUBLE_PRECISION,
     1     MPI_MAX,MPI_COMM_WORLD,IERR)
      if(myid.eq.0) then
         WRITE(*,905) TIME,DIV_ALL,IMAX,JMAX,KMAX
      endif
 905  FORMAT(F8.3,E11.3,3I4)

C-----------------------------------------
C     CHECK IF NEED FILTERING OR NOT
C-----------------------------------------     

      IF(DIV_ALL.GT.ERFILT*100) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY BLOWS UP!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         STOP
      ELSE IF(DIV_ALL.GT.ERFILT) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY NEEDS FILTERING!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         KFILT=1
      ENDIF

C-----END HERE
      
      RETURN
      END

C=====SUBROUTINE VOLUME_LNR2 END HERE







C======================================================================
      SUBROUTINE VOLUME_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,
     1     NCPU,TIME,KFILT,ERFILT)

C     THIS SUBROUTINE IS FOR LES
C     WALL MODEL AT BOTTOM
C     FREE-SLIP CONDITION AT TOP
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER IMAX,JMAX,KMAX
      INTEGER NCREQ,JJ1,JJ2,NYEND
      INTEGER KFILT

      REAL PEX,PEY,TIME,DIVMAX,DIV_ALL,DU,DV,DW,ERFILT

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UX(NXMAX,NYMAX/NCPU),VY(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU),VZ(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU),DIV(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DIVMAX=0.
      IMAX=0
      JMAX=0
      KMAX=0
      DIV_ALL=0.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      DO K=2,NZ-1
         CALL PDFX_PARA(U(1,1,K),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.2) THEN
                  UZ(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
                  VZ(I,J)=(V(I,J,3)-V(I,J,2))/DZ(2)
                  WZ(I,J)=(W(I,J,2)-W(I,J,1))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  UZ(I,J)=(U(I,J,NZ-1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZ(I,J)=(V(I,J,NZ-1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K-1)
               ELSE
                  UZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
                  VZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))*2./(DZ(K-1)+DZ(K))
               ENDIF
               
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               DU=UX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZ(I,J)
               DV=VY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZ(I,J)
               DW=HER(I,J)*WZ(I,J)
               DIV(I,J)=DU+DV+DW
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,DIV,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(ABS(DIV(I,J)).GT.DIVMAX) THEN
                  DIVMAX=ABS(DIV(I,J))
                  IMAX=I
                  JMAX=J
                  KMAX=K
               ENDIF
            ENDDO
         ENDDO
      ENDDO
      
      WRITE(95*1000+MYID,905) TIME,DIVMAX,IMAX,JMAX,KMAX
      CALL MPI_ALLREDUCE(DIVMAX,DIV_ALL,1,MPI_DOUBLE_PRECISION,
     1     MPI_MAX,MPI_COMM_WORLD,IERR)
      if(myid.eq.0) then
         WRITE(*,905) TIME,DIV_ALL,IMAX,JMAX,KMAX
      endif
 905  FORMAT(F8.3,E11.3,3I4)

C-----------------------------------------
C     CHECK IF NEED FILTERING OR NOT
C-----------------------------------------     

      IF(DIV_ALL.GT.ERFILT*100) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY BLOWS UP!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         STOP
      ELSE IF(DIV_ALL.GT.ERFILT) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY NEEDS FILTERING!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         KFILT=1
      ENDIF

C-----END HERE
      
      RETURN
      END

C=====SUBROUTINE VOLUME_LES_WALLMODEL3 END HERE








C======================================================================
      SUBROUTINE VOLUME_LES_WALLMODEL4(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,
     1     NCPU,TIME,KFILT,ERFILT)

C     THIS SUBROUTINE IS FOR LES
C     WALL MODEL AT BOTTOM
C     FREE-SLIP CONDITION AT TOP
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER IMAX,JMAX,KMAX
      INTEGER NCREQ,JJ1,JJ2,NYEND
      INTEGER KFILT

      REAL PEX,PEY,TIME,DIVMAX,DIV_ALL,DU,DV,DW,ERFILT

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UX(NXMAX,NYMAX/NCPU),VY(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU),VZ(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU),DIV(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DIVMAX=0.
      IMAX=0
      JMAX=0
      KMAX=0
      DIV_ALL=0.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      DO K=2,NZ-1
         CALL PDFX_PARA(U(1,1,K),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.2) THEN
                  UZ(I,J)=(U(I,J,3)-U(I,J,1))/(DZ(1)+DZ(2))
                  VZ(I,J)=(V(I,J,3)-V(I,J,1))/(DZ(1)+DZ(2))
                  WZ(I,J)=(W(I,J,2)-W(I,J,1))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  UZ(I,J)=(U(I,J,NZ-1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZ(I,J)=(V(I,J,NZ-1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K-1)
               ELSE
                  UZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
                  VZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))*2./(DZ(K-1)+DZ(K))
               ENDIF
               
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               DU=UX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZ(I,J)
               DV=VY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZ(I,J)
               DW=HER(I,J)*WZ(I,J)
               DIV(I,J)=DU+DV+DW
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,DIV,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(ABS(DIV(I,J)).GT.DIVMAX) THEN
                  DIVMAX=ABS(DIV(I,J))
                  IMAX=I
                  JMAX=J
                  KMAX=K
               ENDIF
            ENDDO
         ENDDO
      ENDDO
      
      WRITE(95*1000+MYID,905) TIME,DIVMAX,IMAX,JMAX,KMAX
      CALL MPI_ALLREDUCE(DIVMAX,DIV_ALL,1,MPI_DOUBLE_PRECISION,
     1     MPI_MAX,MPI_COMM_WORLD,IERR)
      if(myid.eq.0) then
         WRITE(*,905) TIME,DIV_ALL,IMAX,JMAX,KMAX
      endif
 905  FORMAT(F8.3,E11.3,3I4)

C-----------------------------------------
C     CHECK IF NEED FILTERING OR NOT
C-----------------------------------------     

      IF(DIV_ALL.GT.ERFILT*100) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY BLOWS UP!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         STOP
      ELSE IF(DIV_ALL.GT.ERFILT) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY NEEDS FILTERING!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         KFILT=1
      ENDIF

C-----END HERE
      
      RETURN
      END

C=====SUBROUTINE VOLUME_LES_WALLMODEL4 END HERE







C======================================================================
      SUBROUTINE VOLUME_LNR2_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,TIME,
     1     KFILT,ERFILT)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER IMAX,JMAX,KMAX
      INTEGER NCREQ,JJ1,JJ2,NYEND
      INTEGER KFILT

      REAL PEX,PEY,TIME,DIVMAX,DIV_ALL,DU,DV,DW,ERFILT

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UX(NXMAX,NYMAX/NCPU),VY(NXMAX,NYMAX/NCPU)
      REAL UZ(NXMAX,NYMAX/NCPU),VZ(NXMAX,NYMAX/NCPU)
      REAL WZ(NXMAX,NYMAX/NCPU),DIV(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DIVMAX=0.
      IMAX=0
      JMAX=0
      KMAX=0
      DIV_ALL=0.

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      DO K=2,NZ-1
         CALL PDFX_PARA(U(1,1,K),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(V(1,1,K),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               
               IF(K.EQ.2) THEN
                  UZ(I,J)=((U(I,J,3)+U(I,J,2))/2.-U(I,J,1))/DZ(2)
                  VZ(I,J)=((V(I,J,3)+V(I,J,2))/2.-V(I,J,1))/DZ(2)
                  WZ(I,J)=(W(I,J,2)-W(I,J,1))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
CC                  UZ(I,J)=(4.*U(I,J,K+1)-3.*U(I,J,K)-U(I,J,K-1))
CC     1                 /3./DZ(K-1)
CC                  VZ(I,J)=(4.*V(I,J,K+1)-3.*V(I,J,K)-V(I,J,K-1))
CC     1                 /3./DZ(K-1)
C+++
C     FOR FREE-SLIP CONDITION
                  UZ(I,J)=(U(I,J,NZ-1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VZ(I,J)=(V(I,J,NZ-1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
C+++
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))/DZ(K-1)
               ELSE
                  UZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
                  VZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K-1)+DZ(K))
                  WZ(I,J)=(W(I,J,K)-W(I,J,K-1))*2./(DZ(K-1)+DZ(K))
               ENDIF
               
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYEND
               DU=UX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))*UZ(I,J)
               DV=VY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VZ(I,J)
               DW=HER(I,J)*WZ(I,J)
               DIV(I,J)=DU+DV+DW
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,DIV,NCPU)

         DO I=1,NXMOD
            DO J=1,NYEND
               IF(ABS(DIV(I,J)).GT.DIVMAX) THEN
                  DIVMAX=ABS(DIV(I,J))
                  IMAX=I
                  JMAX=J
                  KMAX=K
               ENDIF
            ENDDO
         ENDDO
      ENDDO
      
      WRITE(95*1000+MYID,905) TIME,DIVMAX,IMAX,JMAX,KMAX
      CALL MPI_ALLREDUCE(DIVMAX,DIV_ALL,1,MPI_DOUBLE_PRECISION,
     1     MPI_MAX,MPI_COMM_WORLD,IERR)
      if(myid.eq.0) then
         WRITE(*,905) TIME,DIV_ALL,IMAX,JMAX,KMAX
      endif
 905  FORMAT(F8.3,E11.3,3I4)

C-----------------------------------------
C     CHECK IF NEED FILTERING OR NOT
C-----------------------------------------     

      IF(DIV_ALL.GT.ERFILT*100) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY BLOWS UP!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         STOP
      ELSE IF(DIV_ALL.GT.ERFILT) THEN
         IF(MYID.EQ.0) THEN
            PRINT*, "VELOCITY NEEDS FILTERING!"
            PRINT*, "DIVMAX=",DIV_ALL
         ENDIF
         KFILT=1
      ENDIF

C-----END HERE
      
      RETURN
      END

C=====SUBROUTINE VOLUME_LNR2_2 END HERE







C====================================================================
      SUBROUTINE CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
C     THIS SUBROUTINE IS FOR USTOP DRIVEN COUETTE FLOW

      IMPLICIT NONE
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR 

      INTEGER I,J,K
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NCPU
      REAL DT,PEX,PEY,HBAR
      
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL PPX(NXMAX,NYMAX/NCPU),PPY(NXMAX,NYMAX/NCPU)
      REAL PPZ(NXMAX,NYMAX/NCPU)
      REAL PPZW(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
c$$$            PP(I,J,1)=(35.*PP(I,J,2)-35.*PP(I,J,3)+21.*PP(I,J,4)
c$$$     1           -5.*PP(I,J,5))/16.
            PP(I,J,1)=(3.*PP(I,J,2)-PP(I,J,3))/2.
CC            PP(I,J,NZ)=(35.*PP(I,J,NZ-1)-35.*PP(I,J,NZ-2)
CC     1           +21.*PP(I,J,NZ-3)-5.*PP(I,J,NZ-3))/16.
C+++
C     FOR FREE-SLIP CONDITION
            PP(I,J,NZ)=PP(I,J,NZ-1)
C+++
         ENDDO
      ENDDO
      
      DO K=2,NZ
         CALL PDFX_PARA(PP(1,1,K),PPX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(PP(1,1,K),PPY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
c$$$                  PPZ(I,J)=(-PP(I,J,4)+4.*PP(I,J,3)-3.*PP(I,J,2))/2.
c$$$     1                 /DZ(2)
                  PPZ(I,J)=(PP(I,J,3)-PP(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
CC                  PPZ(I,J)=(3.*PP(I,J,NZ-1)-4.*PP(I,J,NZ-2)
CC     1                 +PP(I,J,NZ-3))/2./DZ(NZ-2)
C+++
C     FOR FREE-SLIP CONDITION
                  PPZ(I,J)=(PP(I,J,NZ-1)-PP(I,J,NZ-2))/(2.*DZ(NZ-2))
C+++
               ELSE IF(K.EQ.NZ) THEN
CC                  PPZ(I,J)=(2.*PP(I,J,NZ-1)-3.*PP(I,J,NZ-2)
CC     1                 +PP(I,J,NZ-3))/DZ(NZ-2)
C+++
C     FOR FREE-SLIP CONDITION
                  PPZ(I,J)=0.
C+++
               ELSE
                  PPZ(I,J)=(PP(I,J,K+1)-PP(I,J,K-1))/(DZ(K-1)+DZ(K))
               ENDIF
                  
               PPZW(I,J)=(PP(I,J,K+1)-PP(I,J,K))/DZ(K)
               
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               U(I,J,K)=U(I,J,K)-DT*(PPX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *PPZ(I,J))
               V(I,J,K)=V(I,J,K)-DT*(PPY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *PPZ(I,J))
               
               IF(K.GT.(NZ-2)) GOTO 20
               W(I,J,K)=W(I,J,K)-DT*HER(I,J)*PPZW(I,J)
 20            CONTINUE
               
               IF(K.EQ.NZ-1) W(I,J,K)=0.
               
            ENDDO
         ENDDO
         
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)
      
      RETURN
      END

C=====SUBROUTINE CORRECTION_US END HERE






C====================================================================
      SUBROUTINE CORRECTION_LES_WALLMODEL3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,
     1     DT,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,
     1     EYR,HXR,HYR,HER,NCPU)
      
C     THIS SUBROUTINE IS FOR LES
C     WALL MODEL AT BOTTOM
C     FREE-SLIP CONDITION AT TOP

      IMPLICIT NONE
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR 

      INTEGER I,J,K
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NCPU
      REAL DT,PEX,PEY,HBAR
      
      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL PPX(NXMAX,NYMAX/NCPU),PPY(NXMAX,NYMAX/NCPU)
      REAL PPZ(NXMAX,NYMAX/NCPU)
      REAL PPZW(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            PP(I,J,1)=(35.*PP(I,J,2)-35.*PP(I,J,3)+21.*PP(I,J,4)
CC     1           -5.*PP(I,J,5))/16.
            PP(I,J,1)=(3.*PP(I,J,2)-PP(I,J,3))/2.
            PP(I,J,NZ)=PP(I,J,NZ-1)
         ENDDO
      ENDDO
      
CC      DO K=2,NZ
      DO K=2,NZ-1
         CALL PDFX_PARA(PP(1,1,K),PPX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(PP(1,1,K),PPY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  PPZ(I,J)=(PP(I,J,3)-PP(I,J,2))/DZ(2)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  PPZ(I,J)=(PP(I,J,NZ-1)-PP(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  PPZ(I,J)=0.
               ELSE
                  PPZ(I,J)=(PP(I,J,K+1)-PP(I,J,K-1))/(DZ(K-1)+DZ(K))
               ENDIF
                  
               PPZW(I,J)=(PP(I,J,K+1)-PP(I,J,K))/DZ(K)
               
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               U(I,J,K)=U(I,J,K)-DT*(PPX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *PPZ(I,J))
               V(I,J,K)=V(I,J,K)-DT*(PPY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *PPZ(I,J))
               
               IF(K.GT.(NZ-2)) GOTO 20
               W(I,J,K)=W(I,J,K)-DT*HER(I,J)*PPZW(I,J)
 20            CONTINUE
               
               IF(K.EQ.NZ-1) W(I,J,K)=0.
               
            ENDDO
         ENDDO
         
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)
      
      RETURN
      END

C=====SUBROUTINE CORRECTION_LES_WALLMODEL3 END HERE







C==========================================================================
      SUBROUTINE WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,
     1     PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,
     1     NCPU)

C     WALL LAYER MODEL FOR LES
C     BASED ON MENEVEAU'S DYNAMIC MODEL

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU

      REAL VEL,TT,HBAR,KAPPA,DELTAX,DELTAY,PEX,PEY

      DATA KAPPA/0.4/

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),UF(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VF(NXMAX,NYMAX/NCPU,*)
      REAL Z0(NXMAX,*),ZZ(*)
      REAL TAUWX(NXMAX,*),TAUWY(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL U2(NXMAX,NYMAX/NCPU),V2(NXMAX,NYMAX/NCPU)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      do j=1,nymax/ncpu
         do i=1,nxmod
cc            z0(i,j)=2.*10.0**(-4)
            z0(i,j)=2.0*10.0**(-7)
         enddo
      enddo

CC      CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
CC     1     TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,UF(1,1,2),U2,2)
CC      CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
CC     1     TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,VF(1,1,2),V2,2)

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
CC            VEL=SQRT((U2(I,J)-U(I,J,1))**2+(V2(I,J)-V(I,J,1))**2)
            VEL=SQRT((UF(I,J,2)-U(I,J,1))**2+(VF(I,J,2)-V(I,J,1))**2)
            TT=-(KAPPA/LOG(ZZ(2)*HBAR/Z0(I,J)))**2*VEL
CC            TAUWX(I,J)=TT*(U2(I,J)-U(I,J,1))
CC            TAUWY(I,J)=TT*(V2(I,J)-V(I,J,1))
            TAUWX(I,J)=TT*(UF(I,J,2)-U(I,J,1))
            TAUWY(I,J)=TT*(VF(I,J,2)-V(I,J,1))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,TAUWX,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,TAUWY,NCPU)

      RETURN
      END

C=====SUBROUTINE WALL_MODEL END HERE







C==========================================================================
      SUBROUTINE WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
     1     DELTAY,HH,ETA,NCPU)

C     WALL LAYER MODEL FOR LES
C     BASED ON MENEVEAU'S DYNAMIC MODEL

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU

      REAL VEL,TT,HBAR,KAPPA,DELTAX,DELTAY,PEX,PEY

      REAL Z

      DATA KAPPA/0.4/

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL U(NXMAX,NYMAX/NCPU,*),UF(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VF(NXMAX,NYMAX/NCPU,*)
      REAL Z0(NXMAX,*),ZZ(*)
      REAL TAUWX(NXMAX,*),TAUWY(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL U2(NXMAX,NYMAX/NCPU),V2(NXMAX,NYMAX/NCPU)
      REAL HH(NXMAX,*),ETA(NXMAX,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      do j=1,nymax/ncpu
         do i=1,nxmod
            z0(i,j)=2.0*10.0**(-7)
         enddo
      enddo

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            Z=ZZ(2)*(HBAR+ETA(I,J))-HH(I,J)
            VEL=SQRT((UF(I,J,2)-U(I,J,1))**2+(VF(I,J,2)-V(I,J,1))**2)
            TT=-(KAPPA/LOG((Z+HH(I,J))/Z0(I,J)))**2*VEL
            TAUWX(I,J)=TT*(UF(I,J,2)-U(I,J,1))
            TAUWY(I,J)=TT*(VF(I,J,2)-V(I,J,1))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,TAUWX,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,TAUWY,NCPU)

      RETURN
      END

C=====SUBROUTINE WALL_MODEL_V2 END HERE







C==========================================================================
      SUBROUTINE WALL_MODEL_V3(NXMOD,NYMOD,NXMAX,NYMAX,Z0,ZZ,HBAR,PEX,
     1     PEY,TAUWX,TAUWY,UF,VF,WF,WORK,TRIGSX,TRIGSY,IFAX,HH,HX,HY,
     1     ETA,NCPU)

C     WALL LAYER MODEL FOR LES
C     BASED ON MENEVEAU'S DYNAMIC MODEL

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU

      REAL VEL,TT,HBAR,KAPPA,DELTAX,DELTAY,PEX,PEY
      REAL T1X,T1Z,T2Y,T2Z
C     (T1X,0,T1Z) IS THE STREAMWISE SURFACE TANGENTIAL DIRECTION
C     (0,T2Y,T2Z) IS THE SPANWISE SURFACE TANGENTIAL DIRECTION

      REAL Z

      REAL UTAL,UTALS,VTAL,VTALS

      DATA KAPPA/0.4/

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL UF(NXMAX,NYMAX/NCPU,*),VF(NXMAX,NYMAX/NCPU,*)
      REAL WF(NXMAX,NYMAX/NCPU,*)
      REAL Z0(NXMAX,*),ZZ(*)
      REAL TAUWX(NXMAX,*),TAUWY(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL HH(NXMAX,*),ETA(NXMAX,*),HX(NXMAX,*),HY(NXMAX,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      do j=1,nymax/ncpu
         do i=1,nxmod
            z0(i,j)=1.53E-5
         enddo
      enddo

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T1X=1./SQRT(1+HX(I,J)**2)
            T1Z=-HX(I,J)/SQRT(1+HX(I,J)**2)
            T2Y=1./SQRT(1+HY(I,J)**2)
            T2Z=-HY(I,J)/SQRT(1+HY(I,J)**2)
            UTAL=UF(I,J,2)*T1X+WF(I,J,2)*T1Z
            UTALS=UF(I,J,1)*T1X+WF(I,J,1)*T1Z
            VTAL=VF(I,J,2)*T2Y+WF(I,J,2)*T2Z
            VTALS=VF(I,J,1)*T2Y+WF(I,J,1)*T2Z
            Z=ZZ(2)*(HBAR+ETA(I,J))-HH(I,J)
            VEL=SQRT((UTAL-UTALS)**2+(VTAL-VTALS)**2)
CC            VEL=SQRT(UTAL**2+VTAL**2)
            TT=-(KAPPA/LOG((Z+HH(I,J))/Z0(I,J)))**2*VEL
            TAUWX(I,J)=TT*(UTAL-UTALS)
            TAUWY(I,J)=TT*(VTAL-VTALS)
CC            TAUWX(I,J)=TT*UTAL
CC            TAUWY(I,J)=TT*VTAL
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,TAUWX,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,TAUWY,NCPU)

      RETURN
      END

C=====SUBROUTINE WALL_MODEL_V3 END HERE







C=======================================================================
      SUBROUTINE BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,
     1     VZFS,UB,VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,
     1     EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER NCREQ,NYEND,JJ1,JJ2,ITMAX
      
      REAL PEX,PEY,DT,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*),UX(NXMAX,NYMAX/NCPU)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*),VY(NXMAX,NYMAX/NCPU)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL UZFS(NXMAX,*),VZFS(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*)
      REAL HXR(NXMAX,*),HYR(NXMAX,*),HER(NXMAX,*)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*),FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            U(I,J,1)=UB(I,J)
            V(I,J,1)=VB(I,J)
            W(I,J,1)=WB(I,J)
         ENDDO
      ENDDO

CC      CALL PDFX_PARA(U(1,1,NZ),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
CC     1     NXMAX,NYMAX,NCPU)
CC      CALL PDFY_PARA(V(1,1,NZ),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
CC     1     NYMOD,NXMAX,NYMAX,NCPU)
      
CC      DO I=1,NXMOD
CC         DO J=1,NYMAX/NCPU
CC            UX(I,J)=UX(I,J)+(HXR(I,J)-ZZ(NZ)*EXR(I,J))*UZFS(I,J)
CC            VY(I,J)=VY(I,J)+(HYR(I,J)-ZZ(NZ)*EYR(I,J))*VZFS(I,J)
CC         ENDDO
CC      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            U(I,J,NZ+1)=(12.*DZ(NZ-2)*UZFS(I,J)-U(I,J,NZ-2)+18.
CC     1           *U(I,J,NZ-1)-8.*U(I,J,NZ))/9.
CC            V(I,J,NZ+1)=(12.*DZ(NZ-2)*VZFS(I,J)-V(I,J,NZ-2)+18.
CC     1           *V(I,J,NZ-1)-8.*V(I,J,NZ))/9.
CC            W(I,J,NZ)=(6.*DZ(NZ-2)*(-UX(I,J)-VY(I,J))/HER(I,J)
CC     1           -W(I,J,NZ-3)+6.*W(I,J,NZ-2)-3.*W(I,J,NZ-1))/2.
CC            W(I,J,NZ)=W(I,J,NZ-2)+2.*DZ(NZ-2)*(-UX(I,J)-VY(I,J))
CC     1           /HER(I,J)
C+++
C     FOR FREE-SLIP CONDITION
            U(I,J,NZ+1)=U(I,J,NZ-1)
            V(I,J,NZ+1)=V(I,J,NZ-1)
            U(I,J,NZ)=U(I,J,NZ-1)
            V(I,J,NZ)=V(I,J,NZ-1)
            W(I,J,NZ-1)=0.
            W(I,J,NZ)=-W(I,J,NZ-2)
C+++
         ENDDO
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE BC_LES END HERE







C=======================================================================
      SUBROUTINE BC_LNR(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,
     1     VZFS,UB,VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,
     1     HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER NCREQ,NYEND,JJ1,JJ2,ITMAX
      
      REAL PEX,PEY,DT,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*),UX(NXMAX,NYMAX/NCPU)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*),VY(NXMAX,NYMAX/NCPU)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL UZFS(NXMAX,*),VZFS(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*)
      REAL HXR(NXMAX,*),HYR(NXMAX,*),HER(NXMAX,*)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*),FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            U(I,J,1)=UB(I,J)
            V(I,J,1)=VB(I,J)
            W(I,J,1)=WB(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA(U(1,1,NZ),UX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(V(1,1,NZ),VY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            UX(I,J)=UX(I,J)+(HXR(I,J)-ZZ(NZ)*EXR(I,J))*UZFS(I,J)
            VY(I,J)=VY(I,J)+(HYR(I,J)-ZZ(NZ)*EYR(I,J))*VZFS(I,J)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            U(I,J,NZ+1)=(12.*DZ(NZ-2)*UZFS(I,J)-U(I,J,NZ-2)+18.
     1           *U(I,J,NZ-1)-8.*U(I,J,NZ))/9.
            V(I,J,NZ+1)=(12.*DZ(NZ-2)*VZFS(I,J)-V(I,J,NZ-2)+18.
     1           *V(I,J,NZ-1)-8.*V(I,J,NZ))/9.
            W(I,J,NZ-1)=0.
            W(I,J,NZ)=(6.*DZ(NZ-2)*(-UX(I,J)-VY(I,J))/HER(I,J)
     1           -W(I,J,NZ-3)+6.*W(I,J,NZ-2)-3.*W(I,J,NZ-1))/2.
         ENDDO
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE BC_LNR END HERE








C========================================================================
      SUBROUTINE BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,
     1     HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU,IWAVY
      
      REAL PEX,PEY,TIME,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL TWOPI,DX,DY,X,TIME0,FSIN,FCOS,FEXP,Q0,USBOT,VPHASE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL HH(NXMAX,*),HT(NXMAX,*),HX(NXMAX,*),HY(NXMAX,*),HS(*)
      REAL HXX(NXMAX,*),HYY(NXMAX,*),HXY(NXMAX,*)
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*),US(*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*),WS(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      REAL T1(NXMAX),T2(NXMAX),T3(NXMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      TWOPI=2.*ACOS(-1.)
      DX=TWOPI/PEX/NXMOD
      DY=TWOPI/PEY/NYMOD

      IF(TIME.LT.TIMEWAVY) THEN
         TIME0=0.
      ELSE
         TIME0=TIME-TIMEWAVY
      ENDIF
      
C-------------------------------
C     6 DIFFERENT WAVY WALL
C-------------------------------
C     IWAVY=1: SOLID WAVY WALL

      IF(IWAVY.EQ.1) THEN

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               X=(I-NXMOD/2-1)*DX
               FSIN=SIN(HK*X)
               FCOS=COS(HK*X)
               FEXP=EXP(-TCOEF*TIME0**2)
               
               HH(I,J)=-HA*FSIN*(1.-FEXP)
               HT(I,J)=-HA*FSIN*2.*TCOEF*TIME0*FEXP

               UB(I,J)=0.
               VB(I,J)=0.
               WB(I,J)=-HT(I,J)
            ENDDO
         ENDDO

         GOTO 999

      ENDIF

C     IWAVY=2: VERTICAL MOVING WAVY WALL
      
      IF(IWAVY.EQ.2) THEN

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               X=(I-NXMOD/2-1)*DX
               FSIN=SIN(HK*X-HOMEG*TIME0)
               FCOS=COS(HK*X-HOMEG*TIME0)
               FEXP=EXP(-TCOEF*TIME0**2)
               
               HH(I,J)=-HA*FSIN*(1.-FEXP)
               HT(I,J)=HA*HOMEG*FCOS*(1.-FEXP)
     1              -HA*FSIN*2.*TCOEF*TIME0*FEXP

               UB(I,J)=0.
               VB(I,J)=0.
               WB(I,J)=-HT(I,J)
            ENDDO
         ENDDO
         
         GOTO 999

      ENDIF

C     IWAVY=3: WATER WAVE SURFACE

      IF(IWAVY.EQ.3) THEN

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               X=(I-NXMOD/2-1)*DX
               FSIN=SIN(HK*X-HOMEG*TIME0)
               FCOS=COS(HK*X-HOMEG*TIME0)
               FEXP=EXP(-TCOEF*TIME0**2)
               
               HH(I,J)=-HA*FSIN*(1.-FEXP)
               HT(I,J)=HA*HOMEG*FCOS*(1.-FEXP)
     1              -HA*FSIN*2.*TCOEF*TIME0*FEXP

               UB(I,J)=HA*HOMEG*FSIN*(1.-FEXP)
               VB(I,J)=0.
               WB(I,J)=-HT(I,J)
            ENDDO
         ENDDO
         
         GOTO 999

      ENDIF

C     IWAVY=4: WATER WAVE SURFACE WITH WIND DRIFT

      IF(IWAVY.EQ.4) THEN

         Q0=0.55*USBOT

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               X=(I-NXMOD/2-1)*DX
               FSIN=SIN(HK*X-HOMEG*TIME0)
               FCOS=COS(HK*X-HOMEG*TIME0)
               FEXP=EXP(-TCOEF*TIME0**2)
               
               HH(I,J)=-HA*FSIN*(1.-FEXP)
               HT(I,J)=HA*HOMEG*FCOS*(1.-FEXP)
     1              -HA*FSIN*2.*TCOEF*TIME0*FEXP

               UB(I,J)=HA*HOMEG*FSIN*(1.-FEXP)
               UB(I,J)=UB(I,J)+VPHASE-UB(I,J)
     1              -((VPHASE-UB(I,J))**2-Q0*(2.*VPHASE-Q0))**0.5
               VB(I,J)=0.
               WB(I,J)=-HT(I,J)
            ENDDO
         ENDDO
         
         GOTO 999

      ENDIF

C     IWAVY=5: STOKES WAVE SURFACE

      IF(IWAVY.EQ.5) THEN
         
         CALL PHASE_SHIFT_1D(NXMAX,NXMOD,HS,T1,TIME0,VPHASE,PEX,WORK,
     1        TRIGSX,IFAX,NCPU)
         CALL PHASE_SHIFT_1D(NXMAX,NXMOD,US,T2,TIME0,VPHASE,PEX,WORK,
     1        TRIGSX,IFAX,NCPU)
         CALL PHASE_SHIFT_1D(NXMAX,NXMOD,WS,T3,TIME0,VPHASE,PEX,WORK,
     1        TRIGSX,IFAX,NCPU)

         FEXP=EXP(-TCOEF*TIME0**2)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HH(I,J)=T1(I)*(1.-FEXP)
               UB(I,J)=T2(I)*(1.-FEXP)
               VB(I,J)=0.
               WB(I,J)=T3(I)*(1.-FEXP)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA(HH,HX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1        NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HT(I,J)=-WB(I,J)-UB(I,J)*HX(I,J)
            ENDDO
         ENDDO

         GOTO 999

      ENDIF

C     IWAVY=6: STOKES WAVE SURFACE WITH WIND DRIFT

      IF(IWAVY.EQ.6) THEN

         Q0=0.55*USBOT

         CALL PHASE_SHIFT_1D(NXMAX,NXMOD,HS,T1,TIME0,VPHASE,PEX,WORK,
     1        TRIGSX,IFAX,NCPU)
         CALL PHASE_SHIFT_1D(NXMAX,NXMOD,US,T2,TIME0,VPHASE,PEX,WORK,
     1        TRIGSX,IFAX,NCPU)
         CALL PHASE_SHIFT_1D(NXMAX,NXMOD,WS,T3,TIME0,VPHASE,PEX,WORK,
     1        TRIGSX,IFAX,NCPU)

         FEXP=EXP(-TCOEF*TIME0**2)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HH(I,J)=T1(I)*(1.-FEXP)
               UB(I,J)=T2(I)
               UB(I,J)=UB(I,J)+VPHASE-UB(I,J)
     1              -((VPHASE-UB(I,J))**2-Q0*(2.*VPHASE-Q0))**0.5
               UB(I,J)=UB(I,J)*(1.-FEXP)
               VB(I,J)=0.
               WB(I,J)=T3(I)*(1.-FEXP)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA(HH,HX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1        NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HT(I,J)=-WB(I,J)-UB(I,J)*HX(I,J)
            ENDDO
         ENDDO

         GOTO 999

      ENDIF

 999  CONTINUE

C-----END HERE

C---------------------------------------------------------------------
C     HERE U,V,W AT BOTTOM SHOULD MATCH THE FORMULAS IN SUBROUTINE BC
C---------------------------------------------------------------------

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,UB,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,VB,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,WB,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            U(I,J,1)=UB(I,J)
            V(I,J,1)=VB(I,J)
            W(I,J,1)=WB(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HH,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HT,NCPU)

      CALL PDFX_PARA(HH,HX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFXX_PARA(HH,HXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFY_PARA(HH,HY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(HH,HYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(HX,HXY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      RETURN
      END

C=====SUBROUTINE BOTTOM2 END HERE








C=======================================================================
      SUBROUTINE PHASE_SHIFT_1D(NXMAX,NXMOD,F,FT,DTF,VPHASE,PEX,WORK,
     1     TRIGSX,IFAX,NCPU)

C     SHIFT PERIODIC FUNCTION WITH VPHASE*DTF DOWNSTREAM

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      INTEGER NXMAX,NXMOD,NCPU
      INTEGER I

      REAL DTF,VPHASE,HOMEG,PEX,PMODX

      REAL F(*),FT(*),WORK(*),TRIGSX(*)
      REAL T1(NXMAX)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO I=1,NXMAX
         T1(I)=F(I)
      ENDDO
      
      CALL FFTX_PARA(T1,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NCPU,NCPU,-1)

      FT(1)=T1(1)
      FT(2)=T1(2)
      DO I=3,NXMOD-1,2
         PMODX=PEX*(I-1)/2
         HOMEG=PMODX*VPHASE
         FT(I)=T1(I)*COS(-HOMEG*DTF)-T1(I+1)*SIN(-HOMEG*DTF)
         FT(I+1)=T1(I)*SIN(-HOMEG*DTF)+T1(I+1)*COS(-HOMEG*DTF)
      ENDDO
      FT(NXMOD+1)=T1(NXMOD+1)
      FT(NXMOD+2)=T1(NXMOD+2)
      
      CALL FFTX_PARA(FT,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NCPU,NCPU,1)

      RETURN
      END

C=====SUBROUTINE PHASE_SHIFT_1D END HERE








C========================================================================
      SUBROUTINE BOTTOM_HOS_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,
     1     NXMAXS,NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,
     1     TRIGSY,WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,UBS,
     1     VBS,WBS,ETAB,HX,HY,HXX,HYY,HXY,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU,IWAVY
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL PEX,PEY,TIME,TCOEF,TIMEWAVY,TIME0,FEXP

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL HH(NXMAX,*),HT(NXMAX,*),HX(NXMAX,*),HY(NXMAX,*)
      REAL HXX(NXMAX,*),HYY(NXMAX,*),HXY(NXMAX,*)
      REAL ETAB(NXMAXS,*),ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*),UBS(NXMAXS,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*),VBS(NXMAXS,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*),WBS(NXMAXS,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C----------------------------------------------------
C     REDUCE HOS RESOLUTION TO LES RESOLUTION
C----------------------------------------------------
      
      CALL FILTERING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,ETAB,
     1     ETA,NCPU)
      CALL FILTERING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,UBS,
     1     UB,NCPU)
      CALL FILTERING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,VBS,
     1     VB,NCPU)
      CALL FILTERING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,WBS,
     1     WB,NCPU)

      CALL PDFX_PARA(ETA,EX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFY_PARA(ETA,EY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

C-----END HERE

C------------------------------------
C     APPLY TEMPORAL RELAXATION
C------------------------------------

      IF(TIME.LT.TIMEWAVY) THEN
         TIME0=0.
      ELSE
         TIME0=TIME-TIMEWAVY
      ENDIF
      FEXP=EXP(-TCOEF*TIME0**2)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            HH(I,J)=-ETA(I,J)*(1.-FEXP)
            HT(I,J)=-(WB(I,J)-UB(I,J)*EX(I,J)-VB(I,J)*EY(I,J))*(1.-FEXP)
            HX(I,J)=-EX(I,J)*(1.-FEXP)
            HY(I,J)=-EY(I,J)*(1.-FEXP)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,UB,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,VB,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,WB,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            U(I,J,1)=UB(I,J)*(1.-FEXP)
            V(I,J,1)=VB(I,J)*(1.-FEXP)
            W(I,J,1)=WB(I,J)*(1.-FEXP)
            UB(I,J)=U(I,J,1)
            VB(I,J)=V(I,J,1)
            WB(I,J)=W(I,J,1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HH,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HT,NCPU)

      CALL PDFXX_PARA(HH,HXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFYY_PARA(HH,HYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(HX,HXY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE BOTTOM_HOS_LES END HERE







C========================================================================
      SUBROUTINE BOTTOM_LAND_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,
     1     NXMAXS,NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,
     1     TRIGSY,WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,ETAB,
     1     HX,HY,HXX,HYY,HXY,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU,IWAVY
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL PEX,PEY,TIME,TCOEF,TIMEWAVY,TIME0,FEXP

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL HH(NXMAX,*),HT(NXMAX,*),HX(NXMAX,*),HY(NXMAX,*)
      REAL HXX(NXMAX,*),HYY(NXMAX,*),HXY(NXMAX,*)
      REAL ETAB(NXMAXS,*),ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C----------------------------------------------------
C     REDUCE HOS RESOLUTION TO LES RESOLUTION
C----------------------------------------------------
      
      CALL FILTERING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,ETAB,
     1     ETA,NCPU)

      CALL PDFX_PARA(ETA,EX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFY_PARA(ETA,EY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

C-----END HERE

C------------------------------------
C     APPLY TEMPORAL RELAXATION
C------------------------------------

      IF(TIME.LT.TIMEWAVY) THEN
         TIME0=0.
      ELSE
         TIME0=TIME-TIMEWAVY
      ENDIF
      FEXP=EXP(-TCOEF*TIME0**2)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            HH(I,J)=-ETA(I,J)*(1.-FEXP)
            IF(TIME0.LE.50.) THEN
               HT(I,J)=-ETA(I,J)*2.*TCOEF*TIME0*EXP(-TCOEF*TIME0**2)
            ELSE
               HT(I,J)=0.
            ENDIF
            HX(I,J)=-EX(I,J)*(1.-FEXP)
            HY(I,J)=-EY(I,J)*(1.-FEXP)
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            U(I,J,1)=0.
            V(I,J,1)=0.
            W(I,J,1)=-HT(I,J)
            UB(I,J)=U(I,J,1)
            VB(I,J)=V(I,J,1)
            WB(I,J)=W(I,J,1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HH,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,HT,NCPU)

      CALL PDFXX_PARA(HH,HXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFYY_PARA(HH,HYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(HX,HXY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE BOTTOM_LAND_LES END HERE







C======================================================================
      SUBROUTINE HOS_WAVE_3D(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,
     1     TRIGSX,TRIGSY,PEX,PEY,TIME,DT,WVN,ETA,EX,EY,VPS,VPSX,VPSY,
     1     FETA,FVPS,US,VS,WS,PA,FR2,NCPU)

C     BY DI YANG, 08/2007

C     MAIN SUBROUTINE FOR H.O.S SIMULATION OF 3D WAVE
C     4TH ORDER RUNGE-KUTTA SCHEME IS USED FOR TIME INTEGRATION

      IMPLICIT NONE

      INTEGER IRK
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NPW,NCPU,ISMOOTH2

      REAL PEX,PEY,TIME,DT,FR2

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,*),ETA0(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL VPS(NXMAX,*),VPS0(NXMAX,NYMAX/NCPU)
      REAL VPSX(NXMAX,NYMAX/NCPU),VPSY(NXMAX,NYMAX/NCPU)
      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)
      REAL US(NXMAX,*),VS(NXMAX,*),WS(NXMAX,*)
      REAL PA(NXMAX,*),PA1(NXMAX,NYMAX/NCPU)
      REAL WVN(NXMAX,NYMAX/NCPU,NPW),ZP(NXMAX,NYMAX/NCPU,NPW)
      REAL R(NXMAX,NYMAX/NCPU,NPW)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------------------------
C     SAVE ETA AND VPS AT TIME STEP N
C-------------------------------------------------

      CALL SURF_RK4(NXMOD,NYMOD,NXMAX,NYMAX,ETA,VPS,ETA0,VPS0,
     1     FETA,FVPS,DT,1,NCPU)

C-----END HERE

C------------------------------------------------------------------
C     4TH ORDER RUNGE-KUTTA SCHEME FOR EVOLUTION OF ETA AND VPS
C------------------------------------------------------------------

      CALL RIGH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,1,FR2,NCPU)

      DO 100 IRK=2,4
         
         CALL SURF_RK4(NXMOD,NYMOD,NXMAX,NYMAX,ETA,VPS,ETA0,VPS0,
     1        FETA,FVPS,DT,IRK,NCPU)

         CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1        PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)

         CALL ZETA(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,ETA,ZP,WVN,NCPU)

         CALL BOUNDVP(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,VPS,R,ZP,WVN,NCPU)

         CALL WSURF(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,WS,R,ZP,WVN,NCPU)

         CALL RIGH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1        PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,IRK,FR2,NCPU)

 100  CONTINUE

      CALL SURF_UPDATE(NXMOD,NYMOD,NXMAX,NYMAX,DT,ETA,VPS,ETA0,VPS0,
     1     FETA,FVPS,NCPU)

C-----END HERE

C----------------------------------------------------------------
C     VELOCITY, PD(ETA)/DT, AND PD(VPS)/DT AT TIME STEP N+1
C----------------------------------------------------------------
      
      CALL SMOOTH1(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,WVN,ETA,VPS,0.9,NCPU)

      CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)

      CALL SMOOTH2(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,VPS,EX,EY,TIME,ISMOOTH2,NCPU)
      
      IF(ISMOOTH2.EQ.1) THEN
         CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1        PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)
      ENDIF
      
      CALL ZETA(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,ZP,WVN,NCPU)
      
      CALL BOUNDVP(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,VPS,R,ZP,WVN,NCPU)
      
      CALL WSURF(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,WS,R,ZP,WVN,NCPU)
      
      CALL UVSURF(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,US,VS,WS,EX,EY,VPSX,VPSY,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE HOS_WAVE_3D END HERE






C======================================================================
      SUBROUTINE HOS_WAVE_3D_NL(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,
     1     TRIGSX,TRIGSY,PEX,PEY,TIME,DT,WVN,ETA,EX,EY,VPS,VPSX,VPSY,
     1     FETA,FVPS,US,VS,WS,PA,FR2,TCOEF,TIMEW,NCPU)

C     BY DI YANG, 08/2007

C     MAIN SUBROUTINE FOR H.O.S SIMULATION OF 3D WAVE
C     4TH ORDER RUNGE-KUTTA SCHEME IS USED FOR TIME INTEGRATION

      IMPLICIT NONE

      INTEGER IRK
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NPW,NCPU,ISMOOTH2

      REAL PEX,PEY,TIME,DT,FR2,TCOEF,TIMEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,*),ETA0(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL VPS(NXMAX,*),VPS0(NXMAX,NYMAX/NCPU)
      REAL VPSX(NXMAX,NYMAX/NCPU),VPSY(NXMAX,NYMAX/NCPU)
      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)
      REAL US(NXMAX,*),VS(NXMAX,*),WS(NXMAX,*)
      REAL PA(NXMAX,*),PA1(NXMAX,NYMAX/NCPU)
      REAL WVN(NXMAX,NYMAX/NCPU,NPW),ZP(NXMAX,NYMAX/NCPU,NPW)
      REAL R(NXMAX,NYMAX/NCPU,NPW)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------------------------
C     SAVE ETA AND VPS AT TIME STEP N
C-------------------------------------------------

      CALL SURF_RK4(NXMOD,NYMOD,NXMAX,NYMAX,ETA,VPS,ETA0,VPS0,
     1     FETA,FVPS,DT,1,NCPU)

C-----END HERE

C------------------------------------------------------------------
C     4TH ORDER RUNGE-KUTTA SCHEME FOR EVOLUTION OF ETA AND VPS
C------------------------------------------------------------------

      CALL RIGH_NL(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,1,FR2,TIME,TIMEW,
     1     TCOEF,NCPU)

      DO 100 IRK=2,4
         
         CALL SURF_RK4(NXMOD,NYMOD,NXMAX,NYMAX,ETA,VPS,ETA0,VPS0,
     1        FETA,FVPS,DT,IRK,NCPU)

         CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1        PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)

         CALL ZETA(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,ETA,ZP,WVN,NCPU)

         CALL BOUNDVP(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,VPS,R,ZP,WVN,NCPU)

         CALL WSURF(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,WS,R,ZP,WVN,NCPU)

         CALL RIGH_NL(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1        PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,IRK,FR2,
     1        TIME,TIMEW,TCOEF,NCPU)

 100  CONTINUE

      CALL SURF_UPDATE(NXMOD,NYMOD,NXMAX,NYMAX,DT,ETA,VPS,ETA0,VPS0,
     1     FETA,FVPS,NCPU)

C-----END HERE

C----------------------------------------------------------------
C     VELOCITY, PD(ETA)/DT, AND PD(VPS)/DT AT TIME STEP N+1
C----------------------------------------------------------------
      
      CALL SMOOTH1(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,WVN,ETA,VPS,0.9,NCPU)

      CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)

CC      CALL SMOOTH2(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
CC     1     TRIGSY,PEX,PEY,ETA,VPS,EX,EY,TIME,ISMOOTH2,NCPU)
      
CC      IF(ISMOOTH2.EQ.1) THEN
CC         CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
CC     1        PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)
CC      ENDIF
      
      CALL ZETA(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,ZP,WVN,NCPU)
      
      CALL BOUNDVP(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,VPS,R,ZP,WVN,NCPU)
      
      CALL WSURF(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,WS,R,ZP,WVN,NCPU)
      
      CALL UVSURF(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,US,VS,WS,EX,EY,VPSX,VPSY,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE HOS_WAVE_3D_NL END HERE








C======================================================================
      SUBROUTINE HOS_WAVE_3D_LN(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,
     1     TRIGSX,TRIGSY,PEX,PEY,TIME,DT,WVN,ETA,EX,EY,VPS,VPSX,VPSY,
     1     FETA,FVPS,US,VS,WS,PA,FR2,NCPU)

C     BY DI YANG, 08/2008

C     LINEAR VERSION OF HOS CODE

C     MAIN SUBROUTINE FOR H.O.S SIMULATION OF 3D WAVE
C     4TH ORDER RUNGE-KUTTA SCHEME IS USED FOR TIME INTEGRATION

      IMPLICIT NONE

      INTEGER IRK
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NPW,NCPU,ISMOOTH2

      REAL PEX,PEY,TIME,DT,FR2

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,*),ETA0(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL VPS(NXMAX,*),VPS0(NXMAX,NYMAX/NCPU)
      REAL VPSX(NXMAX,NYMAX/NCPU),VPSY(NXMAX,NYMAX/NCPU)
      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)
      REAL US(NXMAX,*),VS(NXMAX,*),WS(NXMAX,*)
      REAL PA(NXMAX,*),PA1(NXMAX,NYMAX/NCPU)
      REAL WVN(NXMAX,NYMAX/NCPU,NPW),ZP(NXMAX,NYMAX/NCPU,NPW)
      REAL R(NXMAX,NYMAX/NCPU,NPW)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------------------------
C     SAVE ETA AND VPS AT TIME STEP N
C-------------------------------------------------

      CALL SURF_RK4(NXMOD,NYMOD,NXMAX,NYMAX,ETA,VPS,ETA0,VPS0,
     1     FETA,FVPS,DT,1,NCPU)

C-----END HERE

C------------------------------------------------------------------
C     4TH ORDER RUNGE-KUTTA SCHEME FOR EVOLUTION OF ETA AND VPS
C------------------------------------------------------------------

      CALL RIGH_LN(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,1,FR2,NCPU)

      DO 100 IRK=2,4
         
         CALL SURF_RK4(NXMOD,NYMOD,NXMAX,NYMAX,ETA,VPS,ETA0,VPS0,
     1        FETA,FVPS,DT,IRK,NCPU)

         CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1        PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)

         CALL ZETA(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,ETA,ZP,WVN,NCPU)

         CALL BOUNDVP(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,VPS,R,ZP,WVN,NCPU)

         CALL WSURF(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1        TRIGSY,PEX,PEY,WS,R,ZP,WVN,NCPU)

         CALL RIGH_LN(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1        PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,IRK,FR2,NCPU)

 100  CONTINUE

      CALL SURF_UPDATE(NXMOD,NYMOD,NXMAX,NYMAX,DT,ETA,VPS,ETA0,VPS0,
     1     FETA,FVPS,NCPU)

C-----END HERE

C----------------------------------------------------------------
C     VELOCITY, PD(ETA)/DT, AND PD(VPS)/DT AT TIME STEP N+1
C----------------------------------------------------------------
      
CC      CALL SMOOTH1(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
CC     1     TRIGSY,PEX,PEY,WVN,ETA,VPS,0.9,NCPU)

      CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)

CC      CALL SMOOTH2(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
CC     1     TRIGSY,PEX,PEY,ETA,VPS,EX,EY,TIME,ISMOOTH2,NCPU)
      
CC      IF(ISMOOTH2.EQ.1) THEN
CC         CALL DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
CC     1        PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)
CC      ENDIF
      
      CALL ZETA(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,ZP,WVN,NCPU)
      
      CALL BOUNDVP(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,VPS,R,ZP,WVN,NCPU)
      
      CALL WSURF(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,WS,R,ZP,WVN,NCPU)
      
      CALL UVSURF(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,US,VS,WS,EX,EY,VPSX,VPSY,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE HOS_WAVE_3D_LN END HERE








C======================================================================
      SUBROUTINE SURF_RK4(NXMOD,NYMOD,NXMAX,NYMAX,ETA,VPS,ETA0,VPS0,
     1     FETA,FVPS,DT,NRK4,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE DF/DT BY 4TH ORDER RUNGE-KUTTA SCHEME

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NRK4,NCPU
      
      REAL FAC,DT

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA0(NXMAX,NYMAX/NCPU),ETA(NXMAX,NYMAX/NCPU)
      REAL VPS0(NXMAX,NYMAX/NCPU),VPS(NXMAX,NYMAX/NCPU)
      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      IF(NRK4.EQ.1) THEN
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               ETA0(I,J)=ETA(I,J)
               VPS0(I,J)=VPS(I,J)
            ENDDO
         ENDDO

      ELSE IF(NRK4.EQ.2.OR.NRK4.EQ.3.OR.NRK4.EQ.4) THEN

         FAC=0.5*DT
         IF(NRK4.EQ.4) FAC=DT

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               ETA(I,J)=ETA0(I,J)+FAC*FETA(I,J,NRK4-1)
               VPS(I,J)=VPS0(I,J)+FAC*FVPS(I,J,NRK4-1)
            ENDDO
         ENDDO

      ELSE
         
         PRINT*, "Invalid value for IRK in SURF_RK4 !"
         PRINT*, "IRK=",NRK4
         STOP

      ENDIF

      RETURN
      END

C=====SUBROUTINE SURF_RK4 END HERE






C=======================================================================
      SUBROUTINE SURF_UPDATE(NXMOD,NYMOD,NXMAX,NYMAX,DT,ETA,VPS,ETA0,
     1     VPS0,FETA,FVPS,NCPU)

C     BY DI YANG, 08/2007

C     UPDATE SURFACE DATA AFTER 4TH STEP RUNGE-KUTTA

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU

      REAL DT

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA0(NXMAX,NYMAX/NCPU),ETA(NXMAX,NYMAX/NCPU)
      REAL VPS0(NXMAX,NYMAX/NCPU),VPS(NXMAX,NYMAX/NCPU)
      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ETA(I,J)=ETA0(I,J)+DT*(FETA(I,J,1)+2.*FETA(I,J,2)
     1           +2.*FETA(I,J,3)+FETA(I,J,4))/6.
            VPS(I,J)=VPS0(I,J)+DT*(FVPS(I,J,1)+2.*FVPS(I,J,2)
     1           +2.*FVPS(I,J,3)+FVPS(I,J,4))/6.
         ENDDO
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE SURF_UPDATE END HERE







C====================================================================
      SUBROUTINE ZETA(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,ZP,WVN,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE (ETA^K)/(K!) FOR TAYLOR EXPANSION

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NPW,NCPU
      
      REAL PEX,PEY
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,NYMAX/NCPU)
      REAL ZP(NXMAX,NYMAX/NCPU,NPW)
      REAL WVN(NXMAX,NYMAX/NCPU,NPW)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            ZP(I,J,1)=ETA(I,J)
         ENDDO
      ENDDO
      
      DO K=2,NPW-1
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               ZP(I,J,K)=ZP(I,J,K-1)*ZP(I,J,1)/FLOAT(K)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,ZP(1,1,K),NCPU)
      ENDDO

      RETURN
      END

C=====SUBROUTINE ZETA END HERE







C=======================================================================
      SUBROUTINE BOUNDVP(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,VPS,R,ZP,WVN,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE VALUE OF PHI AT MEAN SURFACE LEVEL

      IMPLICIT NONE
      
      INTEGER I,J,L,M,K,K1,K2,MODEX,MODEY
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NPW,NCPU
      
      REAL PEX,PEY,AX,AY,AN

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL VPS(NXMAX,NYMAX/NCPU)
      REAL R(NXMAX,NYMAX/NCPU,NPW),DR(NXMAX,NYMAX/NCPU)
      REAL ZP(NXMAX,NYMAX/NCPU,NPW),WVN(NXMAX,NYMAX/NCPU,NPW)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            R(I,J,1)=VPS(I,J)
         ENDDO
      ENDDO

C-----------------------------------------
C     CALCULATION IN SPECTRAL SPACE
C-----------------------------------------

      CALL FFTXY_PARA(R(1,1,1),WORK,TRIGSX,TRIGSY,IFAX,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU,-1)

      DO K=2,NPW

         DO I=1,NXMAX
            DO J=1,NYMAX/NCPU
               R(I,J,K)=0.
            ENDDO
         ENDDO
         
         DO K1=1,K-1
            
            K2=K-K1

            DO M=1,NYMAX/NCPU
               DO L=1,NXMOD+2
                  DR(L,M)=R(L,M,K2)*WVN(L,M,K1)
               ENDDO
            ENDDO
            
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     APPLY PSEUDO-SPECTRAL METHOD
C     DO MULTIPLICATION IN PHYSICAL SPACE
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

            CALL FFTXY_PARA(DR,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,
     1           NXMAX,NYMAX,NCPU,1)

            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  R(I,J,K)=R(I,J,K)-ZP(I,J,K1)*DR(I,J)
               ENDDO
            ENDDO

C~~~~~END HERE

         ENDDO

         CALL FFTXY_PARA(R(1,1,K),WORK,TRIGSX,TRIGSY,IFAX,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU,-1)
         
      ENDDO

      DO K=1,NPW
         CALL FFTXY_PARA(R(1,1,K),WORK,TRIGSX,TRIGSY,IFAX,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU,1)
      ENDDO

C-----END HERE

      RETURN
      END

C=====SUBROUTINE BOUNDVP END HERE







C=======================================================================
      SUBROUTINE WAVENUM(NXMOD,NYMOD,NXMAX,NYMAX,NPW,PEX,PEY,WVN,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE EXPONENTIAL OF WAVENUMBER

      IMPLICIT NONE

      INTEGER L,M,K,MODEX,MODEY
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NPW,NCPU

      REAL PEX,PEY,AX,AY,AN

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL WVN(NXMAX,NYMAX/NCPU,NPW)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO K=1,NPW
         DO M=1,NYMAX/NCPU
            MODEY=(MYID*NYMAX/NCPU+M-1)/2
            AY=PEY*MODEY
            DO L=1,NXMOD+2
               MODEX=(L-1)/2
               AX=PEX*MODEX
               AN=(AX**2+AY**2)**0.5
               WVN(L,M,K)=AN**K
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END
      
C=====SUBROUTINE WAVENUM END HERE








C======================================================================
      SUBROUTINE WSURF(NXMOD,NYMOD,NXMAX,NYMAX,NPW,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,WS,R,ZP,WVN,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE VERTICAL VELOCITY AT SURFACE

      IMPLICIT NONE
      
      INTEGER I,J,L,M,K,K1,K2
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NPW,NCPU

      REAL PEX,PEY

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL R(NXMAX,NYMAX/NCPU,NPW),PK(NXMAX,NYMAX/NCPU,NPW)
      REAL WS(NXMAX,NYMAX/NCPU)
      REAL ZP(NXMAX,NYMAX/NCPU,NPW),WVN(NXMAX,NYMAX/NCPU,NPW)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C----------------------------------
C     SUM OF PERTURBATION MODE
C----------------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            PK(I,J,1)=R(I,J,1)
         ENDDO
      ENDDO

      DO K=2,NPW
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               PK(I,J,K)=PK(I,J,K-1)+R(I,J,K)
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

C---------------------------------------
C     VERTICAL VELOCITY AT SURFACE
C---------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     INITIALIZE VERTICAL VELOCITY
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            WS(I,J)=0.
         ENDDO
      ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     SUM OF HIGH ORDER TERM
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      DO K=1,NPW-1

         K1=NPW-K
         
         CALL FFTXY_PARA(PK(1,1,K1),WORK,TRIGSX,TRIGSY,IFAX,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU,-1)

         DO M=1,NYMAX/NCPU
            DO L=1,NXMOD+2
               TMP(L,M)=PK(L,M,K1)*WVN(L,M,K+1)
            ENDDO
         ENDDO

         CALL FFTXY_PARA(TMP,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,
     1        NXMAX,NYMAX,NCPU,1)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               WS(I,J)=WS(I,J)+ZP(I,J,K)*TMP(I,J)
            ENDDO
         ENDDO

      ENDDO
      
C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     ADD LEADING ORDER TERM
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      CALL FFTXY_PARA(PK(1,1,NPW),WORK,TRIGSX,TRIGSY,IFAX,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU,-1)
      
      DO M=1,NYMAX/NCPU
         DO L=1,NXMOD+2
            TMP(L,M)=PK(L,M,NPW)*WVN(L,M,1)
         ENDDO
      ENDDO
      
      CALL FFTXY_PARA(TMP,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU,1)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            WS(I,J)=WS(I,J)+TMP(I,J)
         ENDDO
      ENDDO

C~~~~~END HERE

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WS,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WSURF END HERE






C==========================================================================
      SUBROUTINE DERIVH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,VPS,EX,EY,VPSX,VPSY,NCPU)

C     BY DI YANG, 08/2007
      
C     CALCULATE HORIZONTAL DERIVETIVE OF ETA AND VPS

      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU

      REAL PEX,PEY
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,*),EX(NXMAX,*),EY(NXMAX,*)
      REAL VPS(NXMAX,*),VPSX(NXMAX,*),VPSY(NXMAX,*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFX_PARA(ETA,EX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFY_PARA(ETA,EY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(VPS,VPSX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NXMAX,
     1     NYMAX,NCPU)
      CALL PDFY_PARA(VPS,VPSY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      RETURN
      END

C=====SUBROUTINE DERIVH END HERE






C==========================================================================
      SUBROUTINE UVSURF(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,US,VS,WS,EX,EY,VPSX,VPSY,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE HORIZONTAL VELOCITY AT SURFACE

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      
      REAL PEX,PEY
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL US(NXMAX,*),VS(NXMAX,*),WS(NXMAX,*)
      REAL EX(NXMAX,*),EY(NXMAX,*)
      REAL VPSX(NXMAX,*),VPSY(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            US(I,J)=VPSX(I,J)-WS(I,J)*EX(I,J)
            VS(I,J)=VPSY(I,J)-WS(I,J)*EY(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,US,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VS,NCPU)

      RETURN
      END
      
C=====SUBROUTINE UVSURF END HERE





C======================================================================
      SUBROUTINE RIGH(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,NRK4,FR2,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE RIGHT HAND SIDE OF BOUNDARY EVOLUTION EQUATION
C     R1 FOR KBC
C     R2 FOR DBC
C     PA PRESURE OF AIR AT SURFACE

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NRK4,NCPU
      
      REAL PEX,PEY,FR2
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)
      REAL ETA(NXMAX,*),EX(NXMAX,*),EY(NXMAX,*),WS(NXMAX,*)
      REAL VPSX(NXMAX,*),VPSY(NXMAX,*)
      REAL PA(NXMAX,*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------------
C     CHECK RUNGE-KUTTA STEP
C---------------------------------

      IF(NRK4.LE.0.OR.NRK4.GT.4) THEN
         PRINT*, "Invalid value for IRK in RIGH !"
         PRINT*, "IRK=",NRK4
         STOP
      ENDIF

C-----END HERE

C--------------------------------
C     CALCULATE 1+EX^2+EY^2
C--------------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T1(I,J)=1.+EX(I,J)**2+EY(I,J)**2
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T1,NCPU)

C-----END HERE

C----------------------
C     CALCULATE R1
C----------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            FETA(I,J,NRK4)=-(VPSX(I,J)*EX(I,J)+VPSY(I,J)*EY(I,J))
     1           +T1(I,J)*WS(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,FETA(1,1,NRK4),NCPU)

C-----END HERE

C-------------------------
C     CALCULATE WS^2
C-------------------------
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T2(I,J)=WS(I,J)**2
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T2,NCPU)

C-----END HERE

C----------------------
C     CALCULATE R2
C----------------------
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            FVPS(I,J,NRK4)=-ETA(I,J)/FR2-0.5*(VPSX(I,J)**2+VPSY(I,J)**2)
     1           +0.5*T1(I,J)*T2(I,J)-PA(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,FVPS(1,1,NRK4),NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE RIGH END HERE






C======================================================================
      SUBROUTINE RIGH_NL(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,NRK4,
     1     FR2,TIME,TIMEW,TCOEF,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE RIGHT HAND SIDE OF BOUNDARY EVOLUTION EQUATION
C     R1 FOR KBC
C     R2 FOR DBC
C     PA PRESURE OF AIR AT SURFACE

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NRK4,NCPU
      
      REAL PEX,PEY
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)
      REAL ETA(NXMAX,*),EX(NXMAX,*),EY(NXMAX,*),WS(NXMAX,*)
      REAL VPSX(NXMAX,*),VPSY(NXMAX,*)
      REAL PA(NXMAX,*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

CC--NONLINEAR
      REAL W1(NXMAX,NYMAX/NCPU)
      REAL W1N(NXMAX,NYMAX/NCPU)
      REAL TIME,TCOEF,TIME0,TIMEW

      REAL FR2
 
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------------
C     CHECK RUNGE-KUTTA STEP
C---------------------------------

      IF(NRK4.LE.0.OR.NRK4.GT.4) THEN
         PRINT*, "Invalid value for IRK in RIGH !"
         PRINT*, "IRK=",NRK4
         STOP
      ENDIF

C-----END HERE
      
      CALL FFTX_PARA(WS,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,-1)
C
      DO J = 1, NYMAX / NCPU
         DO I = 1, NXMAX
            W1N(I,J) = WS(I,J)
            W1N(I,J) = WS(I,J)
            W1(I,J) = 0
         END DO
         W1(9,J) = WS(9,J)
         W1(10,J) = WS(10,J)
         W1N(9,J) = 0
         W1N(10,J) = 0
      END DO
C
      CALL FFTX_PARA(WS,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,1)
      CALL FFTX_PARA(W1,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,1)
      CALL FFTX_PARA(W1N,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,1)

C--------------------------------
C     CALCULATE 1+EX^2+EY^2
C--------------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T1(I,J)=1.+EX(I,J)**2+EY(I,J)**2
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T1,NCPU)

C-----END HERE

C----------------------
C     CALCULATE R1
C----------------------

      IF(TIME.LT.TIMEW) THEN
         TIME0=0.
      ELSE
         TIME0=TIME-TIMEW
      ENDIF

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            FETA(I,J,NRK4) = ( - ( VPSX(I,J) * EX(I,J) 
     1           + VPSY(I,J) * EY(I,J) ) + T1(I,J) * WS(I,J) - W1(I,J) ) 
     1           * ( 1 - EXP(-(TIME0*TCOEF)**2) ) + W1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,FETA(1,1,NRK4),NCPU)

C-----END HERE

C-------------------------
C     CALCULATE WS^2
C-------------------------
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T2(I,J)=WS(I,J)**2
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T2,NCPU)

C-----END HERE

C----------------------
C     CALCULATE R2
C----------------------
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            FVPS(I,J,NRK4) = - ETA(I,J) / FR2
     1           + ( - 0.5 * ( VPSX(I,J)**2 + VPSY(I,J)**2 ) 
     1           + 0.5 * T1(I,J) * T2(I,J) - PA(I,J) ) 
     1           * ( 1 - EXP(-(TIME0*TCOEF)**2) )
         ENDDO
      ENDDO


      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,FVPS(1,1,NRK4),NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE RIGH_NL END HERE







C======================================================================
      SUBROUTINE RIGH_LN(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,EX,EY,VPSX,VPSY,WS,FETA,FVPS,PA,NRK4,FR2,
     1     NCPU)

C     BY DI YANG, 08/2008

C     LINEAR VERSION

C     CALCULATE RIGHT HAND SIDE OF BOUNDARY EVOLUTION EQUATION
C     R1 FOR KBC
C     R2 FOR DBC
C     PA PRESURE OF AIR AT SURFACE

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NRK4,NCPU
      
      REAL PEX,PEY,FR2
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL FETA(NXMAX,NYMAX/NCPU,4),FVPS(NXMAX,NYMAX/NCPU,4)
      REAL ETA(NXMAX,*),EX(NXMAX,*),EY(NXMAX,*),WS(NXMAX,*)
      REAL VPSX(NXMAX,*),VPSY(NXMAX,*)
      REAL PA(NXMAX,*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------------
C     CHECK RUNGE-KUTTA STEP
C---------------------------------

      IF(NRK4.LE.0.OR.NRK4.GT.4) THEN
         PRINT*, "Invalid value for IRK in RIGH !"
         PRINT*, "IRK=",NRK4
         STOP
      ENDIF

C-----END HERE

C--------------------------------
C     CALCULATE 1+EX^2+EY^2
C--------------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
C+++
C     FOR LINEAR WAVE
CC            T1(I,J)=1.+EX(I,J)**2+EY(I,J)**2
            T1(I,J)=1.
C+++
         ENDDO
      ENDDO

C+++
C     FOR LINEAR WAVE
CC      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
CC     1     TRIGSY,IFAX,T1,NCPU)
C+++

C-----END HERE

C----------------------
C     CALCULATE R1
C----------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
C+++
C     FOR LINEAR WAVE
CC            FETA(I,J,NRK4)=-(VPSX(I,J)*EX(I,J)+VPSY(I,J)*EY(I,J))
CC     1           +T1(I,J)*WS(I,J)
            FETA(I,J,NRK4)=T1(I,J)*WS(I,J)
C+++
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,FETA(1,1,NRK4),NCPU)

C-----END HERE

C-------------------------
C     CALCULATE WS^2
C-------------------------
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T2(I,J)=WS(I,J)**2
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T2,NCPU)

C-----END HERE

C----------------------
C     CALCULATE R2
C----------------------
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
C+++
C     FOR LINEAR WAVE
CC            FVPS(I,J,NRK4)=-ETA(I,J)/FR2-0.5*(VPSX(I,J)**2+VPSY(I,J)**2)
CC     1           +0.5*T1(I,J)*T2(I,J)-PA(I,J)
            FVPS(I,J,NRK4)=-ETA(I,J)/FR2-PA(I,J)
C+++
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,FVPS(1,1,NRK4),NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE RIGH_LN END HERE






C============================================================================
      SUBROUTINE AIR_P(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,PA,PP,HBAR,HER,HXR,HYR,EXR,EYR,RE,
     1     DT,NCPU)

C     CALCULATE REAL PRESSURE FROM PSEUDO-PRESSURE

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL PEX,PEY,HBAR,RE,DT

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),PA(NXMAX,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),T6(NXMAX,NYMAX/NCPU)
      REAL LAP(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-----------------
C     LAP_PHI
C-----------------

C~~~~~~~~~~~~~~
C     K=2
C~~~~~~~~~~~~~~

      CALL PDFY_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T5(I,J)=(T1(I,J)+3.*T2(I,J)+T3(I,J)+3.*T4(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(PP(I,J,4)-PP(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T4(I,J)=(T1(I,J)+3.*T2(I,J)+T3(I,J)+3.*T4(I,J))/3./DZ(2)
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(-PP(I,J,4)+4.*PP(I,J,3)-3.*PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,3)-PP(I,J,2))/DZ(2)**2
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAP(I,J,2)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
         ENDDO
      ENDDO
      
      CALL PDFXX_PARA(PP(1,1,2),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,2)=LAP(I,J,2)+T1(I,J)+T2(I,J)
         ENDDO
      ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~
C     K=3
C~~~~~~~~~~~~~~

      CALL PDFY_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(4)*EYR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)           
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC
      
      CALL PDFX_PARA(PP(1,1,4),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(PP(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(4)*EXR(I,J))*(PP(I,J,5)-PP(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(-PP(I,J,4)+4.*PP(I,J,3)
     1           -3.*PP(I,J,2))/2./DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)           
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(PP(I,J,4)-PP(I,J,2))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(PP(I,J,4)-2.*PP(I,J,3)+PP(I,J,2))
     1           /(DZ(2))**2
         ENDDO
      ENDDO
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAP(I,J,3)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL PDFXX_PARA(PP(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(PP(1,1,3),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,3)=LAP(I,J,3)+T1(I,J)+T2(I,J)
         ENDDO
      ENDDO

C~~~~~END HERE

C~~~~~~~~~~~~~~~~~~~~
C     K=4,NZ-3
C~~~~~~~~~~~~~~~~~~~~

      DO 100 K=4,5

         CALL PDFY_PARA(PP(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=(HYR(I,J)-ZZ(K+1)*EYR(I,J))
     1              *(PP(I,J,K+2)-PP(I,J,K))/(DZ(K)+DZ(K+1))
               T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))
     1              *(PP(I,J,K)-PP(I,J,K-2))/(DZ(K-2)+DZ(K-1))
               T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
            ENDDO
         ENDDO
         
CC
      
         CALL PDFX_PARA(PP(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFX_PARA(PP(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T3(I,J)=(HXR(I,J)-ZZ(K+1)*EXR(I,J))
     1              *(PP(I,J,K+2)-PP(I,J,K))/(DZ(K)+DZ(K+1))
               T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))
     1              *(PP(I,J,K)-PP(I,J,K-2))/(DZ(K-2)+DZ(K-1))
               T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K)) 
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
            ENDDO
         ENDDO
         
CC
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T1(I,J)=(PP(I,J,K+1)-PP(I,J,K-1))/(DZ(K-1)+DZ(K))
               T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
               T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
            ENDDO
         ENDDO
         
         CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1        NXMAX,NYMAX,NCPU)
         
CC

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T1(I,J)=HER(I,J)*((PP(I,J,K+1)-PP(I,J,K))/DZ(K)
     1              -(PP(I,J,K)-PP(I,J,K-1))/DZ(K-1))*2./(DZ(K-1)+DZ(K))
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T1(I,J)=HER(I,J)*T1(I,J)
               LAP(I,J,K)=T1(I,J)+T2(I,J)+T3(I,J)+T4(I,J)+T5(I,J)
            ENDDO
         ENDDO
         
         CALL PDFXX_PARA(PP(1,1,K),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         CALL PDFYY_PARA(PP(1,1,K),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               LAP(I,J,K)=LAP(I,J,K)+T1(I,J)+T2(I,J)
            ENDDO
         ENDDO

 100  CONTINUE

C~~~~~END HERE

C-----END HERE

C---------------------------------
C     AIR PRESSURE ON SURFACE
C---------------------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            LAP(I,J,1)=(35.*LAP(I,J,2)-35.*LAP(I,J,3)+21.*LAP(I,J,4)
     1           -5.*LAP(I,J,5))/16.
         ENDDO
      ENDDO

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            PA(I,J)=PP(I,J,1)-DT/(2.*RE)*LAP(I,J,1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,PA,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE AIR_P END HERE






C============================================================================
      SUBROUTINE AIR_P_LES(NXMAX,NYMAX,NXMOD,NYMOD,NXMAXS,NYMAXS,NXMODS,
     1     NYMODS,PEX,PEY,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,
     1     PAS,PP,NCPU)

C     CALCULATE REAL PRESSURE FROM PSEUDO-PRESSURE

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL PEX,PEY

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*)
      REAL PA(NXMAX,NYMAX/NCPU),PAS(NXMAXS,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------------
C     AIR PRESSURE ON SURFACE
C---------------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            PA(I,J)=PP(I,J,1)
         ENDDO
      ENDDO

C-----END HERE

C-----------------------------------------------------
C     PADDING SURFACE PRESSURE TO HOS RESOLUTION
C-----------------------------------------------------

      CALL PADDING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,NYMAXS,
     1     WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,PAS,PA,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE AIR_P_LES END HERE







C========================================================================
      SUBROUTINE AIR_P0(NXMAX,NYMAX,NXMOD,NYMOD,PA,PA0,NCPU)
      
C     EXTROPOLATE PA TO N+1/2 TIME STEP

C-----------------------------------------------------------
C     CALL FROM MAIN CODE:
C-------------------------
C     PA IS AIR PRESSURE ON SURFACE AT TIME STEP N-1/2
C     PA0 IS AIR PRESSURE ON SURFACE AT TIME STEP N-3/2
C-----------------------------------------------------------
C-----------------------------------------------------------
C     RETURN TO MAIN CODE:
C-------------------------
C     PA IS AIR PRESSURE ON SURFACE AT TIME STEP N+1/2
C     PA0 IS AIR PRESSURE ON SURFACE AT TIME STEP N-1/2
C-----------------------------------------------------------

      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL PA(NXMAX,*),PA0(NXMAX,*)
      REAL TMP(NXMAX,NYMAX/NCPU)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------
C     BACKUP PA
C---------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            TMP(I,J)=PA(I,J)
         ENDDO
      ENDDO

C-----END HERE

C-----------------------------------
C     EXTROPOLATION FOR NEW PA
C-----------------------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            PA(I,J)=2.*TMP(I,J)-PA0(I,J)
         ENDDO
      ENDDO

C-----END HERE

C----------------------
C     UPDATE PA0
C----------------------
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            PA0(I,J)=TMP(I,J)
         ENDDO
      ENDDO

C-----END HERE
      
      RETURN
      END

C=====SUBROUTINE AIR_P0 END HERE







C===========================================================================
      SUBROUTINE AVERAGE_P(NXMOD,NYMOD,NXMAX,NYMAX,PA,NCPU)

C     AVERAGE AIR PRESSURE INPUT ALONG SPANWISE DIRECTION

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND
      
      REAL PM,PM0

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL PA(NXMAX,*),FT(NXMAX,NYMAX/NCPU)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C-------------------------------
C     BACKUP AIR PRESSURE
C-------------------------------
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            FT(I,J)=PA(I,J)
         ENDDO
      ENDDO

C-----END HERE

C--------------------------------------
C     CALCULATE SPANWISE AVERAGE
C--------------------------------------
      
      DO I=1,NXMOD
         PM=0.
         DO J=1,NYEND
            PM=PM+FT(I,J)
         ENDDO
         CALL MPI_ALLREDUCE(PM,PM0,1,MPI_DOUBLE_PRECISION,
     1        MPI_SUM,MPI_COMM_WORLD,IERR)
         PM0=PM0/FLOAT(NYMOD)
         DO J=1,NYMAX/NCPU
            PA(I,J)=PM0
         ENDDO
      ENDDO

C-----END HERE
      
      RETURN
      END

C=====SUBROUTINE AVERAGE_P END HERE





C===========================================================================
      SUBROUTINE SAVE_HOS(NXMOD,NYMOD,NXMAX,NYMAX,ETAB,VPS,PA0,ICON,
     1     NCPU)

C     SAVE DATA FOR CONTINUING HOS SIMULATION

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER I,J,ICON
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL ETAB(NXMAX,*),VPS(NXMAX,*),PA0(NXMAX,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IF(NYEND.EQ.0) GOTO 100

      ICON=ICON+1

      OPEN(ICON*1000+MYID)
      
      DO I=1,NXMOD
         DO J=1,NYEND
            WRITE(ICON*1000+MYID,*) ETAB(I,J),VPS(I,J),PA0(I,J)
         ENDDO
      ENDDO

      CLOSE(ICON*1000+MYID)
      
 100  CONTINUE

      RETURN
      END

C=====SUBROUTINE SAVE_HOS END HERE






C===========================================================================
      SUBROUTINE REREAD_HOS(NXMOD,NYMOD,NXMAX,NYMAX,ETAB,VPS,PA0,ICON,
     1     NCPU)

C     SAVE DATA FOR CONTINUING HOS SIMULATION

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER I,J,ICON
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL ETAB(NXMAX,*),VPS(NXMAX,*),PA0(NXMAX,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IF(NYEND.EQ.0) GOTO 100

      OPEN(ICON*1000+MYID)

      DO I=1,NXMOD
         DO J=1,NYEND
            READ(ICON*1000+MYID,*) ETAB(I,J),VPS(I,J),PA0(I,J)
         ENDDO
      ENDDO
      
      CLOSE(ICON*1000+MYID)

 100  CONTINUE

      RETURN
      END

C=====SUBROUTINE REREAD_HOS END HERE





C===========================================================================
      SUBROUTINE REREADN_HOS(NXMOD,NYMOD,NXMAX,NYMAX,ETAB,VPS,PA0,ICON1,
     1     ICON2,NCPU)

C     SAVE DATA FOR CONTINUING HOS SIMULATION

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER I,J,ICON1,ICON2,I1,J1,J0
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU,NCPU1,NXMAX1,NYMAX1
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NCREQ,JJ1,JJ2,NYEND,NYEND2
      INTEGER ID1START,ID1END,NY1START,NY1END,NID,NYSTART1,NYEND1

      INTEGER IDUM
      REAL DUM

      REAL ETAB(NXMAX,*),VPS(NXMAX,*),PA0(NXMAX,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      IF(NYEND.EQ.0) GOTO 100

      OPEN(ICON1*1000)
      READ(ICON1*1000,*) IDUM,IDUM,IDUM,IDUM,IDUM,IDUM,DUM,DUM,DUM,
     1     DUM,DUM,DUM,DUM,DUM,DUM,IDUM,IDUM,DUM,DUM,DUM,DUM,DUM,DUM,
     1     DUM,DUM,DUM,DUM,DUM,IDUM,DUM,NCPU1
      CLOSE(ICON1*1000)

      IF(NCPU.NE.NCPU1) GOTO 101

      OPEN(ICON2*1000+MYID)
      READ(ICON2*1000+MYID,*) IDUM,IDUM,IDUM,DUM,DUM
      DO I=1,NXMOD
         DO J=1,NYEND
            READ(ICON2*1000+MYID,*) ETAB(I,J),VPS(I,J),PA0(I,J)
         ENDDO
      ENDDO
      CLOSE(ICON2*1000+MYID)

 101  CONTINUE

      IF(MOD(NXMOD+2,NCPU1).EQ.0) THEN
         NXMAX1=NXMOD+2
      ELSE
         NXMAX1=NXMOD+2+NCPU1-MOD(NXMOD+2,NCPU1)
      ENDIF
      IF(MOD(NYMOD+2,NCPU1).EQ.0) THEN
         NYMAX1=NYMOD+2
      ELSE
         NYMAX1=NYMOD+2+NCPU1-MOD(NYMOD+2,NCPU1)
      ENDIF

      print*, 'nxmaxs1=',nxmax1
      print*, 'nymaxs1=',nymax1
      print*, 'ncpu1=',ncpu1

      ID1START=NYMAX/NCPU*MYID/(NYMAX1/NCPU1)
      NY1START=NYMAX/NCPU*MYID+1-NYMAX1/NCPU1*ID1START
      ID1END=(NYMAX/NCPU*(MYID+1)-1)/(NYMAX1/NCPU1)
      NY1END=NYMAX/NCPU*(MYID+1)-NYMAX1/NCPU1*ID1END
      J0=0
      DO NID=ID1START,ID1END
         IF(ID1START.EQ.ID1END) THEN
            NYSTART1=NY1START
            NYEND1=NY1END
         ELSE IF(NID.EQ.ID1START) THEN
            NYSTART1=NY1START
            NYEND1=NYMAX1/NCPU1
         ELSEIF(NID.EQ.ID1END) THEN
            NYSTART1=1
            NYEND1=NY1END
         ELSE
            NYSTART1=1
            NYEND1=NYMAX1/NCPU1
         ENDIF

         IF(NID.EQ.NCPU1-1) THEN
            NYEND2=NYMOD-(NYMAX1/NCPU1)*NID
         ELSE
            NYEND2=NYMAX1/NCPU1
         ENDIF

         OPEN(ICON2*1000+NID)
         READ(ICON2*1000+NID,*) IDUM,IDUM,IDUM,DUM,DUM
         DO I=1,NXMOD
            DO J1=1,NYEND2
               IF(J1.GE.NYSTART1 .AND. J1.LE.NYEND1) THEN
                  J=J0+(J1-NYSTART1)+1
                  READ(ICON2*1000+NID,*) ETAB(I,J),VPS(I,J),PA0(I,J)
               ELSE
                  READ(ICON2*1000+NID,*) DUM,DUM,DUM
               ENDIF
            ENDDO
         ENDDO
         CLOSE(ICON2*1000+NID)
         J0=J0+NYEND1-NYSTART1+1
      ENDDO

 100  CONTINUE

      RETURN
      END

C=====SUBROUTINE REREADN_HOS END HERE






C=========================================================================
      SUBROUTINE CHECK(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ITIM,TIME,ETA,VPS,FETA,ENER0,IBLOWUP,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE POTENTIAL AND KINETIC ENERGY
C     CALCULATE VOLUME CONSERVATION AND FLUX
C     CHECK IF CODE BLOWS UP OR NOT

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU,ITIM,IBLOWUP
      
      REAL PEX,PEY,TIME,ENER,ENER0
      REAL XL,YL,TWOPI
      REAL VOL,FLUX,PE,KE

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,*),FETA(NXMAX,NYMAX/NCPU,*),VPS(NXMAX,*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------
C     CALCULATE DOMAIN SIZE
C-------------------------------
      
      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY

C-----END HERE

C------------------------------
C     VOLUME CONSERVATION
C------------------------------
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=ETA(I,J)
         ENDDO
      ENDDO

      CALL FFTXY_PARA(T1,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      
      IF(MYID.EQ.0) VOL=XL*YL*T1(1,1)
      
C-----END HERE

C---------------------
C     VOLUME FLUX
C---------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T2(I,J)=FETA(I,J,1)
         ENDDO
      ENDDO
      
      CALL FFTXY_PARA(T2,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      
      IF(MYID.EQ.0) FLUX=XL*YL*T2(1,1)

C-----END HERE

C--------------------------------------
C     POTENTIAL AND KINETIC ENERGY
C--------------------------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=ETA(I,J)*ETA(I,J)
            T2(I,J)=VPS(I,J)*FETA(I,J,1)
         ENDDO
      ENDDO

      CALL FFTXY_PARA(T1,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      CALL FFTXY_PARA(T2,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)

      IF(MYID.EQ.0) THEN
         PE=0.5*XL*YL*T1(1,1)
         KE=0.5*XL*YL*T2(1,1)
         ENER=PE+KE
         IF(ITIM.EQ.1) ENER0=ENER
      ENDIF

      IF(MYID.EQ.0) THEN
         WRITE(20,900) TIME,VOL,FLUX,PE,KE,ENER,ENER/ENER0
      ENDIF
 900  FORMAT(7F11.7)

C-----END HERE

C---------------------------------
C     CHECK IF CODE BLOWS UP
C---------------------------------

      IF(MYID.EQ.0) THEN
         IF(ABS(ENER-ENER0).GE.0.5*ENER0) IBLOWUP=1
      ENDIF
      
      CALL MPI_BCAST(IBLOWUP,1,MPI_INTEGER,0,MPI_COMM_WORLD,IERR)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE CHECK END HERE






C=========================================================================
      SUBROUTINE CHECK1(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,TRIGSY,
     1     PEX,PEY,ITIM,TIME,ETA,VPS,FETA,ENER1,ENER2,ISMOTH1,NCPU)

C     BY DI YANG, 08/2007

C     CALCULATE POTENTIAL AND KINETIC ENERGY
C     CALCULATE VOLUME CONSERVATION AND FLUX
C     CHECK IF CODE BLOWS UP OR NOT

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU,ITIM,ISMOTH1
      
      REAL PEX,PEY,TIME,ENER1,ENER2
      REAL XL,YL,TWOPI
      REAL VOL,FLUX,PE,KE

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,*),FETA(NXMAX,NYMAX/NCPU,*),VPS(NXMAX,*)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------
C     CALCULATE DOMAIN SIZE
C-------------------------------
      
      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY

C-----END HERE

C------------------------------
C     VOLUME CONSERVATION
C------------------------------
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=ETA(I,J)
         ENDDO
      ENDDO

      CALL FFTXY_PARA(T1,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      
      IF(MYID.EQ.0) VOL=XL*YL*T1(1,1)
      
C-----END HERE

C---------------------
C     VOLUME FLUX
C---------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T2(I,J)=FETA(I,J,1)
         ENDDO
      ENDDO
      
      CALL FFTXY_PARA(T2,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      
      IF(MYID.EQ.0) FLUX=XL*YL*T2(1,1)

C-----END HERE

C--------------------------------------
C     POTENTIAL AND KINETIC ENERGY
C--------------------------------------

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=ETA(I,J)*ETA(I,J)
            T2(I,J)=VPS(I,J)*FETA(I,J,1)
         ENDDO
      ENDDO

      CALL FFTXY_PARA(T1,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      CALL FFTXY_PARA(T2,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)

      IF(MYID.EQ.0) THEN
         PE=0.5*XL*YL*T1(1,1)
         KE=0.5*XL*YL*T2(1,1)
         ENER2=PE+KE
         IF(ITIM.EQ.1) ENER1=ENER2
      ENDIF

C-----END HERE

C----------------------------------
C     CHECK IF NEED SMOOTHING
C----------------------------------

      IF(MYID.EQ.0) THEN
         IF(ABS(ENER1-ENER2).GE.0.01*ENER1) THEN
            ISMOTH1=1
            WRITE(*,500) TIME,ABS(ENER1-ENER2)/ENER1
            WRITE(21,500) TIME,ABS(ENER1-ENER2)/ENER1
         ENDIF
      ENDIF
 500  FORMAT(' TIME=',F12.4,' ABS(ENER1-ENER2)/ENER1=',F12.5,
     1     ' FILTERING')

      CALL MPI_BCAST(ISMOTH1,1,MPI_INTEGER,0,MPI_COMM_WORLD,IERR)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE CHECK1 END HERE







C========================================================================
      SUBROUTINE SMOTH1(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,ETA,VPS,FAC,NCPU)

C     SIMPLE LOW PASS SPECTRAL FILTER

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER NXPAT,NYPAT

      REAL FAC

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL ETA(NXMAX,*),VPS(NXMAX,*)
      REAL ET(NYMAX,NXMAX/NCPU),VT(NYMAX,NXMAX/NCPU)
      REAL AT(NXMAX,NYMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL FFTX_PARA(ETA,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,-1)
      CALL FFTX_PARA(VPS,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,-1)

      NXPAT=NXMOD/2*FAC
      DO I=1,NXMOD+2
         DO J=1,NYMAX/NCPU
            IF(I.GT.NXPAT) THEN
               ETA(I,J)=0.
               VPS(I,J)=0.
            ENDIF
         ENDDO
      ENDDO
      
      CALL MPE_2DTRANS(ETA,AT,ET,NXMAX,NYMAX/NCPU,NCPU)
      CALL MPE_2DTRANS(VPS,AT,VT,NXMAX,NYMAX/NCPU,NCPU)

      CALL FFTX_PARA(ET,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,NCPU,-1)
      CALL FFTX_PARA(VT,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,NCPU,-1)

      NYPAT=NYMOD/2*FAC
      DO I=1,NYMOD+2
         DO J=1,NXMAX/NCPU
            IF(I.GT.NYPAT) THEN
               ET(I,J)=0.
               VT(I,J)=0.
            ENDIF
         ENDDO
      ENDDO

      CALL FFTX_PARA(ET,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,NCPU,1)
      CALL FFTX_PARA(VT,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,NCPU,1)
      
      CALL MPE_2DTRANS(ET,BT,ETA,NYMAX,NXMAX/NCPU,NCPU)
      CALL MPE_2DTRANS(VT,BT,VPS,NYMAX,NXMAX/NCPU,NCPU)

      CALL FFTX_PARA(ETA,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,1)
      CALL FFTX_PARA(VPS,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,1)

      RETURN
      END

C=====SUBROUTINE SMOTH1 END HERE






C========================================================================
      SUBROUTINE SMOOTH1(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,WVN,ETA,VPS,RATIO,NCPU)

C     BY DI YANG, 08/2007

C     DAMPING HIGHEST SPECTRAL MODE WITH A SMOOTH FUNCTION

      IMPLICIT NONE

      INTEGER L,M
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU,MODEX,MODEY
      
      REAL PEX,PEY,AX,AY,RATIO
      REAL FACT_FUN,WVF,WVMAX,DELTA,DWVN,FACTOR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL ETA(NXMAX,*),VPS(NXMAX,*)
      REAL WVN(NXMAX,NYMAX/NCPU,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C--------------------------------
C     INITIALIZE PARAMETERS
C--------------------------------

      MODEX=((NXMOD+1)/2)/3*2
      MODEY=((NYMOD+1)/2)/3*2
      AX=PEX*MODEX
      AY=PEY*MODEY
      WVMAX=MIN(AX,AY)
      WVF=RATIO*WVMAX
      DELTA=2.*(WVMAX-WVF)

C-----END HERE

C------------------------------------------------
C     DAMPING HIGHEST MODE IN SPECTRAL SPACE
C------------------------------------------------

      CALL FFTXY_PARA(ETA,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      CALL FFTXY_PARA(VPS,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,-1)

      DO M=1,NYMAX/NCPU
         DO L=1,NXMOD+2
            IF(WVN(L,M,1).GE.1.E-6) THEN
               DWVN=WVMAX-WVN(L,M,1)
               IF(DWVN.LE.0.) DWVN=0.
               FACTOR=FACT_FUN(DWVN,DELTA)
               ETA(L,M)=ETA(L,M)*FACTOR
               VPS(L,M)=VPS(L,M)*FACTOR
            ENDIF
         ENDDO
      ENDDO

      CALL FFTXY_PARA(ETA,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,1)
      CALL FFTXY_PARA(VPS,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,1)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE SMOOTH1 END HERE





C=======================================================================
      FUNCTION FACT_FUN(T,T0)

      IMPLICIT NONE

      REAL T,T0
      REAL FACT_FUN

      IF(T.GT.T0) THEN
         FACT_FUN=1.
      ELSE
         FACT_FUN=462.*(T/T0)**6-1980.*(T/T0)**7+3465.*(T/T0)**8
     1        -3080.*(T/T0)**9+1386.*(T/T0)**10-252.*(T/T0)**11
      ENDIF

      RETURN
      END

C=====FUNCTION FACT_FUN END HERE







C=========================================================================
      SUBROUTINE SMOOTH2(NXMOD,NYMOD,NXMAX,NYMAX,WORK,IFAX,TRIGSX,
     1     TRIGSY,PEX,PEY,ETA,VPS,EX,EY,TIME,ISMOOTH2,NCPU)

C     BY DI YANG, 08/2010

C     SMOOTH THE SURFACE IN PHYSICAL SPACE BY 9-POINTS LOCAL AVERAGE

      IMPLICIT NONE

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU,NSMOOTH,IBREAK
      INTEGER ISMOOTH,ISMOOTH2
     
      REAL PEX,PEY
      REAL ELIMIT,TIME,EXMAX,EYMAX

      DATA ELIMIT/0.7/
 
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL ETA(NXMAX,*),EX(NXMAX,*),EY(NXMAX,*),VPS(NXMAX,*)
      REAL EO(NXMAX,NYMAX),EXO(NXMAX,NYMAX),EYO(NXMAX,NYMAX)
      REAL VPO(NXMAX,NYMAX)
      REAL FTMP(NXMAX,NYMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C--------------------------------
C     SEND ALL DATA TO CPU1
C--------------------------------

      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,ETA,EO,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,VPS,VPO,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,EX,EXO,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,EY,EYO,NCPU)

C-----END HERE

      ISMOOTH=0
      ISMOOTH2=0
C     ISMOOTH: 0--NO SMOOTH HAS BEEN DONE; 1--SMOOTHED

      IF(MYID.NE.0) GOTO 100

C--------------------------------------
C     INITIALIZE SMOOTHING COUNTER
C--------------------------------------

      NSMOOTH=0

 1    CONTINUE
      IBREAK=0
      NSMOOTH=NSMOOTH+1

C-----END HERE

C---------------------------------------
C     CHECK LOCAL SLOPE ON SURFACE
C     IF TOO STEEP
C     APPLY 9-POINTS LOCAL AVERAGE
C---------------------------------------

      EXMAX=0.
      EYMAX=0.
      DO J=1,NYMOD
         DO I=1,NXMOD
            IF(ABS(EXO(I,J)).GT.EXMAX) EXMAX=ABS(EXO(I,J))
            IF(ABS(EYO(I,J)).GT.EYMAX) EYMAX=ABS(EYO(I,J))
            IF(ABS(EXO(I,J)).GT.ELIMIT.OR.ABS(EYO(I,J)).GT.ELIMIT) THEN
               CALL SMOOTH2_SUB(NXMOD,NYMOD,NXMAX,NYMAX,EO,I,J)
               CALL SMOOTH2_SUB(NXMOD,NYMOD,NXMAX,NYMAX,VPO,I,J)
               IBREAK=1
               ISMOOTH=1
CC               GOTO 50
            ENDIF
         ENDDO
      ENDDO

 50   CONTINUE

      WRITE(22,104) TIME,EXMAX,EYMAX
      WRITE(*,104) TIME,EXMAX,EYMAX
 104  FORMAT(25E12.5)

C-----END HERE

C--------------------------------------------
C     CHECK IF REACH MAX SMOOTHING STEP
C--------------------------------------------

      IF(IBREAK.EQ.1) THEN
         IF(NSMOOTH.GT.50) THEN
            GOTO 100
         ENDIF
         WRITE(22,*) "HOS BREAK"
         WRITE(*,*) "HOS BREAK"
         CALL PDFX(EO,EXO,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,NYMOD,NXMAX)
         CALL PDFY(EO,EYO,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,NXMAX)
         GOTO 1
      ENDIF

C-----END HERE

 100  CONTINUE

C-----------------------------------------
C     SEND ALL DATA BACK TO EACH CPU
C-----------------------------------------

      CALL MPI_ALLREDUCE(ISMOOTH,ISMOOTH2,1,MPI_INTEGER,MPI_MAX,
     1     MPI_COMM_WORLD,IERR)

      IF(ISMOOTH2.EQ.1) THEN
         CALL ONETOALL(NXMOD,NYMOD,NXMAX,NYMAX,EO,ETA,NCPU)
         CALL ONETOALL(NXMOD,NYMOD,NXMAX,NYMAX,VPO,VPS,NCPU)
      ENDIF

C-----END HERE

      RETURN
      END

C=====SUBROUTINE SMOOTH2 END HERE







C======================================================================
      SUBROUTINE PDFX(F,FX,FTMP,WORK,TRIGS,IFAX,PEX,NXMOD,NYMOD,NXMAX)
C
      REAL F(NXMAX,*),FX(NXMAX,*),FTMP(NXMAX,*),WORK(*),TRIGS(*)
      INTEGER IFAX(*)
C
      DO 10 I=1,NXMOD
      DO 10 J=1,NYMOD
       FTMP(I,J)=F(I,J)
 10   CONTINUE
      CALL FFTX(FTMP,WORK,TRIGS,IFAX,NXMOD,NYMOD,NXMAX,-1)
      DO 20 L=1,NXMOD+1,2
       PMODX=PEX*(L-1)/2
       DO 20 M=1,NYMOD
        FX(L,M)=-PMODX*FTMP(L+1,M)
        FX(L+1,M)=PMODX*FTMP(L,M)
 20   CONTINUE
      CALL FFTX(FX,WORK,TRIGS,IFAX,NXMOD,NYMOD,NXMAX,1)
      RETURN
      END

C=====SUBROUTINE PDFX END HERE






C=========================================================================
      SUBROUTINE PDFY(F,FY,FTMP,WORK,TRIGS,IFAX,PEY,NXMOD,NYMOD,NXMAX)
C
      REAL F(NXMAX,*),FY(NXMAX,*),FTMP(NXMAX,*),WORK(*),TRIGS(*)
      INTEGER IFAX(*)
C
      DO 10 I=1,NXMOD
      DO 10 J=1,NYMOD
       FTMP(I,J)=F(I,J)
 10   CONTINUE
      CALL FFTY(FTMP,WORK,TRIGS,IFAX,NXMOD,NYMOD,NXMAX,-1)
      DO 20 M=1,NYMOD+1,2
       PMODY=PEY*(M-1)/2
       DO 20 L=1,NXMOD
        FY(L,M)=-PMODY*FTMP(L,M+1)
        FY(L,M+1)=PMODY*FTMP(L,M)
 20   CONTINUE
      CALL FFTY(FY,WORK,TRIGS,IFAX,NXMOD,NYMOD,NXMAX,1)
      RETURN
      END

C=====SUBROUTINE PDFY END HERE







C=========================================================================
      SUBROUTINE FFTX(F,WORK,TRIGS,IFAX,NXMOD,NYMOD,NXMAX,ISGN)
C
      REAL F(NXMAX,*),WORK(*),TRIGS(*)
      INTEGER IFAX(*)
C
      IF(ISGN.EQ.1) GO TO 50
C
      DO 20 J=1,NYMOD
      DO 20 I=NXMOD+1,NXMOD+2
 20   F(I,J)=0.
C
      CALL FFTFAX(NXMOD,IFAX,TRIGS)
      CALL FFT991(F,WORK,TRIGS,IFAX,1,NXMAX,NXMOD,NYMOD,ISGN)
      GOTO 99
C
 50   CONTINUE
C
      CALL FFTFAX(NXMOD,IFAX,TRIGS)
      CALL FFT991(F,WORK,TRIGS,IFAX,1,NXMAX,NXMOD,NYMOD,ISGN)
C
 99   CONTINUE
      RETURN
      END

C=====SUBROUTINE FFTX END HERE





C===================================================================
      SUBROUTINE FFTY(F,WORK,TRIGS,IFAX,NXMOD,NYMOD,NXMAX,ISGN)
C
      REAL F(NXMAX,*),WORK(*),TRIGS(*)
      INTEGER IFAX(*)
C
      IF(ISGN.EQ.1) GO TO 50
C
      DO 10 I=1,NXMOD
      DO 10 J=NYMOD+1,NYMOD+2
 10   F(I,J)=0.
C
      CALL FFTFAX(NYMOD,IFAX,TRIGS)
      CALL FFT991(F,WORK,TRIGS,IFAX,NXMAX,1,NYMOD,NXMOD,ISGN)
      GOTO 99
C
 50   CONTINUE
C
      CALL FFTFAX(NYMOD,IFAX,TRIGS)
      CALL FFT991(F,WORK,TRIGS,IFAX,NXMAX,1,NYMOD,NXMOD,ISGN)
C
 99   CONTINUE
      RETURN
      END

C=====SUBROUTINE FFTY END HERE






C=====================================================================
      SUBROUTINE SMOOTH2_SUB(NXMOD,NYMOD,NXMAX,NYMAX,F,I,J)

C     BY DI YANG, 08/2007

C     9-POINTS LOCAL AVERAGE

      IMPLICIT NONE
      
      INTEGER I,J,KS,I1,J1,IP,JP,IM,JM,IDEX,JDEX
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX
      
      DATA KS/32/

      REAL F(NXMAX,*),TMP(NXMAX,NYMAX)

      DO J1=J-KS/2,J+KS/2
         JP=J1
         IF(JP.GT.NYMOD) JP=JP-NYMOD
         IF(JP.LT.1) JP=JP+NYMOD
         DO I1=I-KS/2,I+KS/2
            IP=I1
            IF(IP.GT.NXMOD) IP=IP-NXMOD
            IF(IP.LT.1) IP=IP+NXMOD
            TMP(IP,JP)=0.
            DO JM=-1,1
               DO IM=-1,1
                  IDEX=IP+IM
                  JDEX=JP+JM
                  IF(IDEX.GT.NXMOD) IDEX=IDEX-NXMOD
                  IF(IDEX.LT.1) IDEX=IDEX+NXMOD
                  IF(JDEX.GT.NYMOD) JDEX=JDEX-NYMOD
                  IF(JDEX.LT.1) JDEX=JDEX+NYMOD
                  TMP(IP,JP)=TMP(IP,JP)+F(IDEX,JDEX)
               ENDDO
            ENDDO
            F(IP,JP)=TMP(IP,JP)/9.
         ENDDO
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE SMOOTH2_SUB END HERE






C===================================================================
      SUBROUTINE ONETOALL(NXMOD,NYMOD,NXMAX,NYMAX,F,FA,NCPU)

C     BY DI YANG, MAY 2011
C     DISTRIBUTE 2D PLANE DATA FROM THE FIRST CPU TO ALL CPUS

      IMPLICIT NONE
      
      INTEGER I,J,K,JS
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND
C      INTEGER NUMSEND,NUMRECV
C      INTEGER ITAG

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STAT(MPI_STATUS_SIZE)
      
      REAL F(NXMAX,*),F0(NXMAX,NYMAX),FA(NXMAX,NYMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      
C-------------------------
C     INITIALIZATION
C-------------------------

      DO J=1,NYMAX/NCPU
         DO I=1,NXMAX
            F(I,J)=0.
         ENDDO
      ENDDO

      DO J=1,NYMAX
         DO I=1,NXMAX
            F0(I,J)=0.
         ENDDO
      ENDDO

      IF(MYID.NE.0) THEN
         DO J=1,NYMAX
            DO I=1,NXMAX
               FA(I,J)=0.
            ENDDO
         ENDDO
      ENDIF

C-----END HERE

C---------------------------------------
C     DISTRIBUTE VALUE TO ALL CPUS
C---------------------------------------

      CALL MPI_ALLREDUCE(FA,F0,NXMAX*NYMAX,MPI_DOUBLE_PRECISION,
     1     MPI_SUM,MPI_COMM_WORLD,IERR)

      DO J=1,NYMAX/NCPU
         JS=MYID*NYMAX/NCPU+J
         DO I=1,NXMAX
            F(I,J)=F0(I,JS)
         ENDDO
      ENDDO
            

C-----END HERE

      RETURN
      END

C=====SUBROUTINE ONETOALL END HERE


                  



C=====================================================================
      SUBROUTINE ONETOALL_OLD(NXMOD,NYMOD,NXMAX,NYMAX,FA,F,NCPU)
      
C     BY DI YANG, 08/2007

C     DISTRABUTING 2D PLANCE DATA FROM MYID=0 TO ALL PROCESSORS

      IMPLICIT NONE
      
      INTEGER I,J,K,JS
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NCPU
      INTEGER NUMSEND,NUMRECV
      INTEGER ITAG

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STAT(MPI_STATUS_SIZE)

      REAL F(NXMAX,NYMAX/NCPU),FA(NXMAX,NYMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      NUMSEND=NXMAX*NYMAX/NCPU
      NUMRECV=NUMSEND

      DO J=1,NYMAX
         DO I=1,NXMAX
            F(I,J)=0.
         ENDDO
      ENDDO

      IF(NCPU.EQ.1) THEN
         
         DO I=1,NXMOD
            DO J=1,NYMOD
               F(I,J)=FA(I,J)
            ENDDO
         ENDDO
         
      ELSE

         IF(MYID.EQ.0) THEN
            
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  F(I,J)=FA(I,J)
               ENDDO
            ENDDO
            
            DO K=1,NCPU-1
               JS=K*NYMAX/NCPU+1
               ITAG=K
               CALL MPI_SEND(FA(1,JS),NUMSEND,MPI_DOUBLE_PRECISION,K,
     1              ITAG,MPI_COMM_WORLD,IERR)
            ENDDO

         ELSE IF(MYID.NE.0) THEN
            
            ITAG=MYID
            CALL MPI_RECV(F,NUMRECV,MPI_DOUBLE_PRECISION,0,ITAG,
     1           MPI_COMM_WORLD,STAT,IERR)
            
         ENDIF
         
      ENDIF

      RETURN
      END

C=====SUBROUTINE ONETOALL END HERE









CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     SPECTRAL METHOD SUBROUTINES START HERE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C=====================================================
C     SUBROUTINE GROUP FOR DEALIASING START HERE
C=====================================================

      SUBROUTINE DEALIASX_PARA(NXMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,IFAX,F,
     1     NCPU)

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL F(NXMAX,NYMAX/NCPU,*),WORK(*),TRIGSX(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO K=1,NZ

         CALL FFTX_PARA(F(1,1,K),WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1        NCPU,-1)
        
         NXPAT=NXMOD/3*2
         DO I=1,NXMOD+2
            DO J=1,NYMAX/NCPU
               IF(I.GT.NXPAT) F(I,J,K)=0.
            ENDDO
         ENDDO

         CALL FFTX_PARA(F(1,1,K),WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1        NCPU,1)
         
      ENDDO
      
      RETURN
      END
      
C---------------------------------------------------------------------
      SUBROUTINE DEALIASY_PARA(NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSY,IFAX,F,
     1     NCPU)
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL F(NXMAX,NYMAX/NCPU,*),AT(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSY(*)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO K=1,NZ
         
         CALL MPE_2DTRANS(F(1,1,K),AT,B,NXMAX,NYMAX/NCPU,NCPU)
         
         CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1                  NCPU,-1)
         
         NYPAT=NYMOD/3*2
         DO I=1,NYMOD+2
            DO J=1,NXMAX/NCPU
               IF(I.GT.NYPAT) B(I,J)=0.
            ENDDO
         ENDDO
         
         CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1                  NCPU,1)

         CALL MPE_2DTRANS(B,BT,F(1,1,K),NYMAX,NXMAX/NCPU,NCPU)

      ENDDO
      
      RETURN
      END
            
C----------------------------------------------------------------------
      SUBROUTINE DEALIASXY_PARA(NXMOD,NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,F,NCPU)

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL F(NXMAX,NYMAX/NCPU,*),AT(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CC      goto 999

      DO K=1,NZ
         
         CALL FFTX_PARA(F(1,1,K),WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1        NCPU,-1)
         
         NXPAT=NXMOD/3*2
         DO I=1,NXMOD+2
            DO J=1,NYMAX/NCPU
               IF(I.GT.NXPAT) F(I,J,K)=0.
            ENDDO
         ENDDO
         
         CALL MPE_2DTRANS(F(1,1,K),AT,B,NXMAX,NYMAX/NCPU,NCPU)

         CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1        NCPU,-1)
         
         NYPAT=NYMOD/3*2
         DO I=1,NYMOD+2
            DO J=1,NXMAX/NCPU
               IF(I.GT.NYPAT) B(I,J)=0.
            ENDDO
         ENDDO

         CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1        NCPU,1)

         CALL MPE_2DTRANS(B,BT,F(1,1,K),NYMAX,NXMAX/NCPU,NCPU)
         
         CALL FFTX_PARA(F(1,1,K),WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1        NCPU,1)
         
      ENDDO

 999  continue

      RETURN
      END

C----------------------------------------------------------------------------
      SUBROUTINE DEALIASXY_PARA2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,F,NCPU)

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL F(NXMAX,NYMAX/NCPU,*),AT(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO K=1,NZ
         
         CALL FFTX_PARA(F(1,1,K),WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1        NCPU,-1)
         
         NXPAT=NXMOD/3*2
         DO I=1,NXMOD+2
            DO J=1,NYMAX/NCPU
               IF(I.GT.NXPAT) F(I,J,K)=0.
            ENDDO
         ENDDO

         CALL MPE_2DTRANS(F(1,1,K),AT,B,NXMAX,NYMAX/NCPU,NCPU)

         CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1        NCPU,-1)
         
         NYPAT=NYMOD/3*2
         DO I=1,NYMOD+2
            DO J=1,NXMAX/NCPU
               IF(I.GT.NYPAT) B(I,J)=0.
            ENDDO
         ENDDO

         CALL FFTX_PARA(B,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1        NCPU,1)

         CALL MPE_2DTRANS(B,BT,F(1,1,K),NYMAX,NXMAX/NCPU,NCPU)
         
         CALL FFTX_PARA(F(1,1,K),WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1        NCPU,1)
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE GROUP FOR DEALIASING END HERE







C=========================================================================
      SUBROUTINE FILTERING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,FS,F,
     1     NCPU)

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL F(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FS(NXMAXS,*)
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)
      REAL FT1(NXMAXS,NYMAXS/NCPU),FT2(NXMAX,NYMAXS/NCPU)
      REAL FT3(NYMAX,NXMAX/NCPU)
      REAL AT(NXMAX,NYMAXS/NCPU),B(NYMAXS,NXMAX/NCPU)
      REAL BT(NYMAX,NXMAX/NCPU)

      INTEGER IFAX(*)

      DO J=1,NYMAXS/NCPU
         DO I=1,NXMAXS
            FT1(I,J)=FS(I,J)
         ENDDO
      ENDDO

      CALL FFTX_PARA(FT1,WORKS,TRIGSXS,IFAX,NXMODS,NXMAXS,NYMAXS,
     1     NCPU,-1)
      
      DO J=1,NYMAXS/NCPU
         DO I=1,NXMOD+2
            FT2(I,J)=FT1(I,J)
         ENDDO
      ENDDO

      CALL MPE_2DTRANS(FT2,AT,B,NXMAX,NYMAXS/NCPU,NCPU)

      CALL FFTX_PARA(B,WORKS,TRIGSYS,IFAX,NYMODS,NYMAXS,NXMAX,
     1     NCPU,-1)

      DO J=1,NXMAX/NCPU
         DO I=1,NYMOD+2
            FT3(I,J)=B(I,J)
         ENDDO
      ENDDO

      CALL FFTX_PARA(FT3,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,NCPU,1)
      
      CALL MPE_2DTRANS(FT3,BT,F,NYMAX,NXMAX/NCPU,NCPU)

      CALL FFTX_PARA(F,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,1)

      RETURN
      END

C=====SUBROUTINE FILTERING END HERE







C=========================================================================
      SUBROUTINE PADDING(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,IFAX,FS,F,
     1     NCPU)

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL F(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FS(NXMAXS,*)
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)
      REAL FT1(NXMAX,NYMAX/NCPU),FT2(NXMAXS,NYMAX/NCPU)
      REAL FT3(NYMAXS,NXMAXS/NCPU)
      REAL AT(NXMAXS,NYMAX/NCPU),B(NYMAX,NXMAXS/NCPU)
      REAL BT(NYMAXS,NXMAXS/NCPU)

      INTEGER IFAX(*)

      DO J=1,NYMAX/NCPU
         DO I=1,NXMAX
            FT1(I,J)=F(I,J)
         ENDDO
      ENDDO

      CALL FFTX_PARA(FT1,WORKS,TRIGSXS,IFAX,NXMOD,NXMAX,NYMAX,
     1     NCPU,-1)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD+2
            FT2(I,J)=FT1(I,J)
         ENDDO
         DO I=NXMOD+3,NXMODS+2
            FT2(I,J)=0.
         ENDDO
      ENDDO

      CALL MPE_2DTRANS(FT2,AT,B,NXMAXS,NYMAX/NCPU,NCPU)

      CALL FFTX_PARA(B,WORKS,TRIGSYS,IFAX,NYMOD,NYMAX,NXMAXS,
     1     NCPU,-1)

      DO J=1,NXMAXS/NCPU
         DO I=1,NYMOD+2
            FT3(I,J)=B(I,J)
         ENDDO
         DO I=NYMOD+3,NYMODS+2
            FT3(I,J)=0.
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(FT3,WORKS,TRIGSYS,IFAX,NYMODS,NYMAXS,NXMAXS,NCPU,1)

      CALL MPE_2DTRANS(FT3,BT,FS,NYMAXS,NXMAXS/NCPU,NCPU)

      CALL FFTX_PARA(FS,WORKS,TRIGSXS,IFAX,NXMODS,NXMAXS,NYMAXS,NCPU,1)

      RETURN
      END

C=====SUBROUTINE PADDING END HERE







C==========================================================================
      SUBROUTINE SURFACE_FLUCTUATION(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,
     1     NYMODS,NXMAXS,NYMAXS,WORKS,TRIGSXS,TRIGSYS,IFAX,ETAB,ETAF,
     1     NCPU)

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER I,J
      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,NYMAXS
      INTEGER NCPU

      REAL ETAB(NXMAXS,*),ETAF(NXMAXS,*)
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)
      REAL AT(NXMAXS,NYMAXS/NCPU)
      REAL B(NYMAXS,NXMAXS/NCPU),BT(NYMAXS,NXMAXS/NCPU)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C----------------------------------------------
C     CALCULATE SUGGRID-SCALE FLUCTUATION
C----------------------------------------------

      DO J=1,NYMAXS/NCPU
         DO I=1,NXMAXS
            ETAF(I,J)=ETAB(I,J)
         ENDDO
      ENDDO

      CALL FFTX_PARA(ETAF,WORKS,TRIGSXS,IFAX,NXMODS,NXMAXS,NYMAXS,
     1     NCPU,-1)
      
      DO I=1,NXMOD+2
         DO J=1,NYMAXS/NCPU
            ETAF(I,J)=0.
         ENDDO
      ENDDO
      
      CALL MPE_2DTRANS(ETAF,AT,B,NXMAXS,NYMAXS/NCPU,NCPU)
      
      CALL FFTX_PARA(B,WORKS,TRIGSYS,IFAX,NYMODS,NYMAXS,NXMAXS,
     1     NCPU,-1)
      
      DO I=1,NYMOD+2
         DO J=1,NXMAXS/NCPU
            B(I,J)=0.
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(B,WORKS,TRIGSYS,IFAX,NYMODS,NYMAXS,NXMAXS,
     1     NCPU,1)
      
      CALL MPE_2DTRANS(B,BT,ETAF,NYMAXS,NXMAXS/NCPU,NCPU)
      
      CALL FFTX_PARA(ETAF,WORKS,TRIGSXS,IFAX,NXMODS,NXMAXS,NYMAXS,
     1     NCPU,1)

C-----END HERE

C-------------------------------------------
C     CALCULATE RMS OF ETA FLUCUTATION
C-------------------------------------------
      
      RETURN
      END

C=====SUBROUTINE SURFACE_FLUCTUATION END HERE







C==============================================================
C     SUBROUTINE GROUP FOR PARTIAL DERIVATIVE START HERE
C==============================================================

      SUBROUTINE PDFX_PARA(A,AX,ATMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT AX(I,J)=DA/DX IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),AX(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL TRIGSX(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(ATMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,-1)
 
      DO L=1,NXMOD+1,2
         PMODX=PEX*(L-1)/2
         DO M=1,NYMAX/NCPU
            AX(L,M)=-PMODX*ATMP(L+1,M)
            AX(L+1,M)=PMODX*ATMP(L,M)
         ENDDO
      ENDDO
         
      CALL FFTX_PARA(AX,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,1)
      
      RETURN
      END
      


C----------------------------------------------------------------------      
      SUBROUTINE PDFY_PARA(A,AY,ATMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT AY(I,J)=DA/DY IN PHYSICAL DOMAIN      
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),AY(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL BY(NYMAX,NXMAX/NCPU)
      REAL TRIGSY(*)
      INTEGER IFAX(*)
 
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      CALL FFTY_PARA2(ATMP,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,NYMAX,
     1     NCPU,-1)

      DO L=1,NYMOD+1,2
         PMODY=PEY*(L-1)/2
         DO M=1,NXMAX/NCPU
            BY(L,M)=-PMODY*B(L+1,M)
            BY(L+1,M)=PMODY*B(L,M)
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(BY,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      CALL MPE_2DTRANS(BY,BT,AY,NYMAX,NXMAX/NCPU,NCPU)
      
      RETURN
      END


C-----------------------------------------------------------------------
      
      SUBROUTINE PDF1D_PARA(A,AD,ATMP,WORK,TRIGSX,TRIGSY,IFAX,PEX,PEY,
     1     NXMOD,NYMOD,NXMAX,NYMAX,NCPU,IDIR)
      
      INCLUDE "mpif.h"

C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT AD(I,J)=DA/DX OR DA/DY IN PHYSICAL DOMAIN
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),AD(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL AT(NXMAX,NYMAX/NCPU),BD(NYMAX,NXMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      INTEGER IDIR

      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO

      IF(IDIR.EQ.1) THEN
         
         CALL FFTX_PARA(ATMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1        NYMAX,NCPU,-1)
          
         DO L=1,NXMOD+1,2
            PMODX=PEX*(L-1)/2
            DO M=1,NYMAX/NCPU
               AD(L,M)=-PMODX*ATMP(L+1,M)
               AD(L+1,M)=PMODX*ATMP(L,M)
            ENDDO
         ENDDO
         
          CALL FFTX_PARA(AD,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1        NYMAX,NCPU,1)
         
      ELSE IF(IDIR.EQ.2) THEN
        
         CALL FFTY_PARA2(ATMP,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,
     1        NYMAX,NCPU,-1)

         DO L=1,NYMOD+1,2
            PMODY=PEY*(L-1)/2
            DO M=1,NXMAX/NCPU
               BD(L,M)=-PMODY*B(L+1,M)
               BD(L+1,M)=PMODY*B(L,M)
            ENDDO
         ENDDO
 
         CALL FFTX_PARA(BD,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1        NCPU,1)
         
         CALL MPE_2DTRANS(BD,BT,AD,NYMAX,NXMAX/NCPU,NCPU)
         
      ELSE 
         
         WRITE(*,*) "DIR SHOULD BE 1 OR 2"
         
      ENDIF
      
      RETURN
      END



C---------------------------------------------------------------------
      SUBROUTINE PDFXY_PARA(A,AD,ATMP,WORK,TRIGSX,TRIGSY,IFAX,PEX,PEY,
     1     NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT AD(I,J)=D^2A/DX^2 IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),AD(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL BD(NYMAX,NXMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
     
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      
      CALL FFTX_PARA(ATMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1     NCPU,-1)
      
      DO L=1,NXMOD+1,2
         PMODX=PEX*(L-1)/2
         DO M=1,NYMAX/NCPU
            AD(L,M)=-PMODX*ATMP(L+1,M)
            AD(L+1,M)=PMODX*ATMP(L,M)
         ENDDO
      ENDDO
      
      CALL FFTY_PARA2(AD,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,NYMAX,
     1     NCPU,-1)
      
      DO L=1,NYMOD+1,2
         PMODY=PEY*(L-1)/2
         DO M=1,NXMAX/NCPU
            BD(L,M)=-PMODY*B(L+1,M)
            BD(L+1,M)=PMODY*B(L,M)
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(BD,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      CALL FFTY_PARA2(BD,AD,WORK,TRIGSX,IFAX,NXMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      RETURN
      END


      
C----------------------------------------------------------------------
      SUBROUTINE PDFXX_PARA(A,AXX,ATMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT AXX(I,J)=D^2A/DX^2 IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),AXX(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL TRIGSX(*)
      INTEGER IFAX(*) 
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO

      CALL FFTX_PARA(ATMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      
      DO L=1,NXMOD+1,2
         AA=-(PEX*(L-1)/2)**2
         DO M=1,NYMAX/NCPU
            AXX(L,M)=AA*ATMP(L,M)
            AXX(L+1,M)=AA*ATMP(L+1,M)
         ENDDO
      ENDDO

C+++
c     current fft packet requires axx(nxmod+2,m)=0.
c     the following will make pdfx and pdfxx consistent
      l=nxmod+1
      do m=1,nymax/ncpu
         axx(l,m)=0.
         axx(l+1,m)=0.
      enddo
C+++
      
      CALL FFTX_PARA(AXX,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,1)
      
      RETURN
      END
      
      
C-----------------------------------------------------------------------
      SUBROUTINE PDFYY_PARA(A,AYY,ATMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT AYY(I,J)=D^2A/DY^2 IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),AYY(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL BYY(NYMAX,NXMAX/NCPU)
      REAL TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      CALL FFTY_PARA2(ATMP,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,NYMAX,
     1     NCPU,-1)
      
      DO L=1,NYMOD+1,2
         AA=-(PEY*(L-1)/2)**2
         DO M=1,NXMAX/NCPU
            BYY(L,M)=AA*B(L,M)
            BYY(L+1,M)=AA*B(L+1,M)
         ENDDO
      ENDDO

C+++
c     current fft packet requires byy(nymod+2,m)=0.
c     the following will make pdfy and pdfyy consistent
      l=nymod+1
      do m=1,nxmax/ncpu
         byy(l,m)=0.
         byy(l+1,m)=0.
      enddo
C+++
      
      CALL FFTX_PARA(BYY,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      CALL MPE_2DTRANS(BYY,BT,AYY,NYMAX,NXMAX/NCPU,NCPU)
      
      RETURN
      END

C----------------------------------------------------------------
      SUBROUTINE PDFX_PARA_(A,ATMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT A(I,J)=DA/DX IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL TRIGSX(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(ATMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,-1)
 
      DO L=1,NXMOD+1,2
         PMODX=PEX*(L-1)/2
         DO M=1,NYMAX/NCPU
            A(L,M)=-PMODX*ATMP(L+1,M)
            A(L+1,M)=PMODX*ATMP(L,M)
         ENDDO
      ENDDO
         
      CALL FFTX_PARA(A,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,1)
      
      RETURN
      END 

C--------------------------------------------------------
      SUBROUTINE PDFY_PARA_(A,ATMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      
C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT A(I,J)=DA/DY IN PHYSICAL DOMAIN      
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL BY(NYMAX,NXMAX/NCPU)
      REAL TRIGSY(*)
      INTEGER IFAX(*)
 
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      CALL FFTY_PARA2(ATMP,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,NYMAX,
     1     NCPU,-1)

      DO L=1,NYMOD+1,2
         PMODY=PEY*(L-1)/2
         DO M=1,NXMAX/NCPU
            BY(L,M)=-PMODY*B(L+1,M)
            BY(L+1,M)=PMODY*B(L,M)
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(BY,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      CALL MPE_2DTRANS(BY,BT,A,NYMAX,NXMAX/NCPU,NCPU)
      
      RETURN
      END

C----------------------------------------------------------------
      SUBROUTINE PDFXX_PARA_(A,ATMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT A(I,J)=D^2A/DX^2 IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL TRIGSX(*)
      INTEGER IFAX(*) 
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO

      CALL FFTX_PARA(ATMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,-1)
      
      DO L=1,NXMOD+1,2
         AA=-(PEX*(L-1)/2)**2
         DO M=1,NYMAX/NCPU
            A(L,M)=AA*ATMP(L,M)
            A(L+1,M)=AA*ATMP(L+1,M)
         ENDDO
      ENDDO
      
C+++
c     current fft packet requires a(nxmod+2,m)=0.
c     the following will make pdfx and pdfxx consistent
      l=nxmod+1
      do m=1,nymax/ncpu
         a(l,m)=0.
         a(l+1,m)=0.
      enddo
C+++
      
      CALL FFTX_PARA(A,WORK,TRIGSX,IFAX,NXMOD,NXMAX,
     1     NYMAX,NCPU,1)
      
      RETURN
      END

C----------------------------------------------------------------
      SUBROUTINE PDFYY_PARA_(A,ATMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT A(I,J)=D^2A/DY^2 IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),ATMP(NXMAX,*),WORK(*)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL BYY(NYMAX,NXMAX/NCPU)
      REAL TRIGSY(*)
      INTEGER IFAX(*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      CALL FFTY_PARA2(ATMP,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,NYMAX,
     1     NCPU,-1)
      
      DO L=1,NYMOD+1,2
         AA=-(PEY*(L-1)/2)**2
         DO M=1,NXMAX/NCPU
            BYY(L,M)=AA*B(L,M)
            BYY(L+1,M)=AA*B(L+1,M)
         ENDDO
      ENDDO

C+++
c     current fft packet requires byy(nymod+2,m)=0.
c     the following will make pdfy and pdfyy consistent
      l=nymod+1
      do m=1,nxmax/ncpu
         byy(l,m)=0.
         byy(l+1,m)=0.
      enddo
C+++
      
      CALL FFTX_PARA(BYY,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      CALL MPE_2DTRANS(BYY,BT,A,NYMAX,NXMAX/NCPU,NCPU)
      
      RETURN
      END

C-----------------------------------------------------------------
      SUBROUTINE PDFXY_PARA_(A,ATMP,WORK,TRIGSX,TRIGSY,IFAX,PEX,PEY,
     1     NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

C     BY DI YANG 2005
C     INPUT A(I,J) IN PHYSICAL DOMAIN; UNCHANGED IN RETURN
C     OUTPUT A(I,J)=D^2A/DX^2 IN PHYSICAL DOMAIN
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR

      REAL A(NXMAX,*),AD(NXMAX,NYMAX/NCPU),ATMP(NXMAX,*),WORK(*)
      REAL BD(NYMAX,NXMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      REAL TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
     
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ATMP(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      
      CALL FFTX_PARA(ATMP,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,
     1     NCPU,-1)
      
      DO L=1,NXMOD+1,2
         PMODX=PEX*(L-1)/2
         DO M=1,NYMAX/NCPU
            AD(L,M)=-PMODX*ATMP(L+1,M)
            AD(L+1,M)=PMODX*ATMP(L,M)
         ENDDO
      ENDDO
      
      CALL FFTY_PARA2(AD,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,NYMAX,
     1     NCPU,-1)
      
      DO L=1,NYMOD+1,2
         PMODY=PEY*(L-1)/2
         DO M=1,NXMAX/NCPU
            BD(L,M)=-PMODY*B(L+1,M)
            BD(L+1,M)=PMODY*B(L,M)
         ENDDO
      ENDDO
      
      CALL FFTX_PARA(BD,WORK,TRIGSY,IFAX,NYMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      CALL FFTY_PARA2(BD,A,WORK,TRIGSX,IFAX,NXMOD,NYMAX,NXMAX,
     1     NCPU,1)
      
      RETURN
      END

C=====SUBROUTINE GROUP FOR PARTIAL DERIVATIVE END HERE







C=========================================================================
C     PARALLEL FFT SUBROUTINE GROUP START HERE
C=========================================================================

      SUBROUTINE FFTXY_PARA(A,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,ISGN)

C     BY DI YANG 2005
C     IF ISGN=-1,INPUT A(I,J) IN PHYSICAL DOMAIN. DO FFT TO A(I,J) IN X
C     AND Y DIRECTION. OUTPUT A(I,J) IN SPECTRAL DOMAIN.
C     IF ISGN=1,INPUT A(I,J) IN SPECTRAL DOMAIN. DO INVERSE FFT TO A(I,J) 
C     IN X AND Y DIRECTION. OUTPUT A(I,J) IN PHYSICAL DOMAIN.
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      REAL WORK(*)
      REAL TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL A(NXMAX,NYMAX/NCPU),AT(NXMAX,NYMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      INTEGER JJ1,JJ2,ISGN
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      IF(ISGN.EQ.1) GOTO 50      

      DO J=1,NYMAX/NCPU
         DO I=NXMOD+1,NXMAX
            A(I,J)=0.0
         ENDDO
      ENDDO

C     FFT(ISGN=-1) IN X-DIRECTION
      CALL FFTFAX(NXMOD,IFAX,TRIGSX)
      CALL FFT991(A,WORK,TRIGSX,IFAX,1,NXMAX,NXMOD,NYMAX/NCPU,ISGN)
      
      CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)

C     FFT(ISGN=-1) IN Y-DIRCTION
      DO J=1,NXMAX/NCPU
         DO I=NYMOD+1,NYMAX
            B(I,J)=0.0
         ENDDO
      ENDDO
      
      CALL FFTFAX(NYMOD,IFAX,TRIGSY)
      CALL FFT991(B,WORK,TRIGSY,IFAX,1,NYMAX,NYMOD,NXMAX/NCPU,ISGN)
      
      CALL MPE_2DTRANS(B,BT,A,NYMAX,NXMAX/NCPU,NCPU)
      
      GOTO 600

 50   CONTINUE
         
C     INVERSE FFT(ISGN=1) IN Y-DIRECTION
      CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)

      CALL FFTFAX(NYMOD,IFAX,TRIGSY)
      CALL FFT991(B,WORK,TRIGSY,IFAX,1,NYMAX,NYMOD,NXMAX/NCPU,ISGN)

C     INVERSE FFT(ISGN=1) IN X-DIRECTION
      CALL MPE_2DTRANS(B,BT,A,NYMAX,NXMAX/NCPU,NCPU)

      CALL FFTFAX(NXMOD,IFAX,TRIGSX)
      CALL FFT991(A,WORK,TRIGSX,IFAX,1,NXMAX,NXMOD,NYMAX/NCPU,ISGN)
      
 600  CONTINUE
      RETURN
      END


C----------------------------------------------------------------------
      SUBROUTINE FFTX_PARA(A,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,
     1     ISGN)

C     BY DI YANG 2005
C     IF ISGN=-1, INPUT A(I,J) IN PHYSICAL DOMAIN. DO FFT TO A(I,J) IN X
C     DIRECTION. OUTPUT A(I,J) IN SPECTRAL DOMAIN
C     IF ISGN=1, INPUT A(I,J) IN SPECTRAL DOMAIN. DO INVERSE FFT TO A(I,J)
C     IN Y DIRECTION. OUTPUT A(I,J) IN PHYSICAL DOMAIN.
      
      REAL WORK(*)
      REAL TRIGSX(*)
      INTEGER IFAX(*)
      REAL A(NXMAX,*)
      INTEGER ISGN
      
      IF(ISGN.EQ.1) GOTO 50
      
      DO J=1,NYMAX/NCPU
         DO I=NXMOD+1,NXMAX
            A(I,J)=0.0
         ENDDO
      ENDDO
      
 50   CONTINUE
            
      CALL FFTFAX(NXMOD,IFAX,TRIGSX)
      CALL FFT991(A,WORK,TRIGSX,IFAX,1,NXMAX,NXMOD,NYMAX/NCPU,ISGN)
      
      RETURN
      END


C--------------------------------------------------------------------
      SUBROUTINE FFTY_PARA(A,WORK,TRIGSY,IFAX,NYMOD,NXMAX,NYMAX,
     1     NCPU,ISGN)

C     BY DI YANG 2005
C     IF ISGN=-1, INPUT A(I,J) IN PHYSICAL DOMAIN. TRANSPOSE A(I,J) TO B(M,N).
C     DO FFT TO B(M,N) IN X DIRECTION. TRANSPOSE B(M,N) BACK TO A(I,J). 
C     OUTPUT A(I,J) IN SPECTRAL DOMAIN.
C     IF ISGN=1, INPUT A(I,J) IN SPECTRAL DOMAIN. TRANSPOSE A(I,J) TO B(M,N).
C     DO INVERSE FFT TO B(M,N) IN Y DIRECTION. TRANSPOSE B(M,N) BACK TO A(I,J)
C     OUTPUT A(I,J) IN PHYSICAL DOMAIN.
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      REAL WORK(*)
      REAL TRIGSY(*)
      INTEGER IFAX(*)
      REAL A(NXMAX,NYMAX/NCPU),AT(NXMAX,NYMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      INTEGER ISGN
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      IF(ISGN.EQ.1) GOTO 50
         
      CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)
      
      DO J=1,NXMAX/NCPU
         DO I=NYMOD+1,NYMAX
            B(I,J) =0.0
         ENDDO
      ENDDO
      
      GOTO 100
      
 50   CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)
      
 100  CONTINUE
      
      CALL FFTFAX(NYMOD,IFAX,TRIGSY)
      CALL FFT991(B,WORK,TRIGSY,IFAX,1,NYMAX,NYMOD,NXMAX/NCPU,ISGN)
      
      CALL MPE_2DTRANS(B,BT,A,NYMAX,NXMAX/NCPU,NCPU)
      
      RETURN
      END


C---------------------------------------------------------------------
      SUBROUTINE FFTY_PARA2(A,B,WORK,TRIGSY,IFAX,NYMOD,NXMAX,
     1     NYMAX,NCPU,ISGN)

C     BY DI YANG 2005
C     IF ISGN=-1, INPUT A(I,J) IN PHYSICAL DOMAIN. TRANSPOSE A(I,J) TO B(M,N).
C     DO FFT TO B(M,N) IN X DIRECTION. OUTPUT B(M,N) IN SPECTRAL DOMAIN. 
C     IF ISGN=1, INPUT A(I,J) IN SPECTRAL DOMAIN. TRANSPOSE A(I,J) TO B(M,N).
C     DO INVERSE FFT TO B(M,N) IN X DIRECTION. OUTPUT B(M,N) IN PHYSICAL 
C     DOMAIN.
      
      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      REAL WORK(*)
      REAL TRIGSY(*)
      INTEGER IFAX(*)
      REAL A(NXMAX,NYMAX/NCPU),AT(NXMAX,NYMAX/NCPU)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU) 
      INTEGER ISGN

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      IF(ISGN.EQ.1) GOTO 50
      
      CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)
      
      DO J=1,NXMAX/NCPU
         DO I=NYMOD+1,NYMAX
            B(I,J) =0.0
         ENDDO
      ENDDO
      
      GOTO 100
      
 50   CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)
      
 100  CONTINUE
      
      CALL FFTFAX(NYMOD,IFAX,TRIGSY)
      CALL FFT991(B,WORK,TRIGSY,IFAX,1,NYMAX,NYMOD,NXMAX/NCPU,ISGN)
      
      RETURN
      END
      

C---------------------------------------------------------------------
      SUBROUTINE FFT1D_PARA(A,WORK,TRIGSX,TRIGSY,IFAX,NXMOD,NYMOD,NXMAX,
     1     NYMAX,NCPU,ISGN,IDIR)

C     BY DI YANG 2005
C     IF IDIR=1, DO OPERATION IN X DIRECTION. IF IDIR=2, DO OPERATION 
C     IN Y DIRECTION.
C     IF ISGN=-1, DO FFT TO A(I,J) IN REQUIRED DIRECTION. OUTPUT A(I,J) 
C     IN SPECTRAL DOMAIN. IF ISGN=1, DO INVERSE FFT TO A(I,J) IN REQUIRED 
C     DIRECTION. OUTPUT A(I,J) IN PHYSICAL DOMAIN.
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      REAL WORK(*)
      REAL TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL A(NXMAX,NYMAX/NCPU),AT(NXMAX,NYMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU),BT(NYMAX,NXMAX/NCPU)
      INTEGER ISGN,IDIR
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)


      IF(IDIR.EQ.1) THEN
         
         IF(ISGN.EQ.1) GOTO 50
      
         DO J=1,NYMAX/NCPU
            DO I=NXMOD+1,NXMAX
               A(I,J)=0.0
            ENDDO
         ENDDO
         
 50      CONTINUE
      
         
         CALL FFTFAX(NXMOD,IFAX,TRIGSX)
         CALL FFT991(A,WORK,TRIGSX,IFAX,1,NXMAX,NXMOD,NYMAX/NCPU,ISGN)
        
      ELSE IF(IDIR.EQ.2) THEN
         
         IF(ISGN.EQ.1) GOTO 100
         
         CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)
         
         DO J=1,NXMAX/NCPU
            DO I=NYMOD+1,NYMAX
               B(I,J) =0.0
            ENDDO
         ENDDO
         
         GOTO 110
         
 100     CALL MPE_2DTRANS(A,AT,B,NXMAX,NYMAX/NCPU,NCPU)
         
 110     CONTINUE

         CALL FFTFAX(NYMOD,IFAX,TRIGSY)
         CALL FFT991(B,WORK,TRIGSY,IFAX,1,NYMAX,NYMOD,NXMAX/NCPU,ISGN)
      
         CALL MPE_2DTRANS(B,BT,A,NYMAX,NXMAX/NCPU,NCPU)


      ELSE
         WRITE(*,*) "DIR SHOULD BE 1 OR 2"
         
      ENDIF
      
 555  RETURN
      END

      
C------------------------------------------------------------------------
      SUBROUTINE FFTXYZ_PARA(A,WORK,TRIGSX,TRIGSY,TRIGSZ,IFAX,NXMOD,
     1     NYMOD,NZMOD,NXMAX,NYMAX,NZMAX,NCPU,ISGN)

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      REAL WORK(*)
      REAL TRIGSX(*),TRIGSY(*),TRIGSZ(*)
      INTEGER IFAX(*)
      REAL A(NXMAX,NYMAX/NCPU,*),AT(NXMAX,NYMAX/NCPU)
      REAL B(NYMAX,NXMAX/NCPU,NZMAX),BT(NYMAX,NXMAX/NCPU)
      INTEGER ISGN

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      IF(ISGN.EQ.1) GOTO 50
      
      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=NXMOD+1,NXMAX
               A(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

      DO K=NZMOD+1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               A(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO
      
C     FFT(ISGN=-1) IN X-DIRECTION
      CALL FFTFAX(NXMOD,IFAX,TRIGSX)
      DO K=1,NZMOD
         CALL FFT991(A(1,1,K),WORK,TRIGSX,IFAX,1,NXMAX,NXMOD,NYMAX/NCPU,
     1        ISGN)         
      ENDDO

C     FFT(ISGN=-1) IN Y-DIRCTION      
      CALL FFTFAX(NYMOD,IFAX,TRIGSY)
      DO K=1,NZMOD
         CALL MPE_2DTRANS(A(1,1,K),AT,B(1,1,K),NXMAX,NYMAX/NCPU,NCPU)
         DO J=1,NXMAX/NCPU
            DO I=NYMOD+1,NYMAX
               B(I,J,K)=0.0
            ENDDO
         ENDDO  
         CALL FFT991(B(1,1,K),WORK,TRIGSY,IFAX,1,NYMAX,NYMOD,NXMAX/NCPU,
     1        ISGN)
         CALL MPE_2DTRANS(B(1,1,K),BT,A(1,1,K),NYMAX,NXMAX/NCPU,NCPU)
      ENDDO

C     FFT(ISGN=-1) IN Z-DIRECTION
      CALL FFTFAX(NZMOD,IFAX,TRIGSZ)
      DO J=1,NYMAX/NCPU
         CALL FFT991(A(1,J,1),WORK,TRIGSZ,IFAX,NXMAX*NYMAX/NCPU,1,NZMOD,
     1        NXMAX,ISGN)
      ENDDO

      GOTO 600

 50   CONTINUE
      
C     INVERSE FFT(ISGN=1) IN Z-DIRECTION
      CALL FFTFAX(NZMOD,IFAX,TRIGSZ)
      DO J=1,NYMAX/NCPU
         CALL FFT991(A(1,J,1),WORK,TRIGSZ,IFAX,NXMAX*NYMAX/NCPU,1,NZMOD,
     1        NXMAX,ISGN)
      ENDDO
      
C     INVERSE FFT(ISGN=1) IN Y-DIRECTION
      CALL FFTFAX(NYMOD,IFAX,TRIGSY)
      DO K=1,NZMOD
         CALL MPE_2DTRANS(A(1,1,K),AT,B(1,1,K),NXMAX,NYMAX/NCPU,NCPU)
         CALL FFT991(B(1,1,K),WORK,TRIGSY,IFAX,1,NYMAX,NYMOD,NXMAX/NCPU,
     1        ISGN)
      ENDDO
      
C     INVERSE FFT(ISGN=1) IN X-DIRECTION
      CALL FFTFAX(NXMOD,IFAX,TRIGSX)
      DO K=1,NZMOD
         CALL MPE_2DTRANS(B(1,1,K),BT,A(1,1,K),NYMAX,NXMAX/NCPU,NCPU)
         CALL FFT991(A(1,1,K),WORK,TRIGSX,IFAX,1,NXMAX,NXMOD,NYMAX/NCPU,
     1        ISGN)
      ENDDO
      
 600  CONTINUE

      RETURN
      END
      
C----------------------------------------------------------------------
      SUBROUTINE MPE_2DTRANS(A,AT,B,NDX,NDY,NCPU)
      
C     BY DI YANG 2005
C     INPUT ARRAY A(NDX,NDY). NDX AND NDY ARE THE NUMBERS OF POINTS
C     IN X AND Y DIRECTION IN ONE PROCESSOR. NCPU IS THE NUMBER OF
C     OF PROCESSORS IN COMPUTATION. OUTPUT B(NDY*NCPU,NDX/NCPU) WHICH 
C     IS THE TRANSPOSE ARRAY OF A(NDX,NDY)
      
      IMPLICIT NONE
      INCLUDE 'mpif.h'
      INTEGER NDX,NDY,NCPU
      REAL  A(NDX,NDY),AT(NDX,NDY),B(NDY*NCPU,NDX/NCPU)
      
      INTEGER NUMPROCS,IERR,MYID
      INTEGER I,J,N
      INTEGER NBB,NDYGLOB
      INTEGER M1,N1,K1,M2,N2,K2,II
      CHARACTER *10 FILENAME4
    
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      NDYGLOB=NDY*NCPU
      NBB=NDY*NDX/NCPU
      
      DO J=1,NDY
         DO I=1,NDX
            AT(I,J)=A(I,J)
         ENDDO
      ENDDO
      
      DO J=1,NDY
         DO I=1,NDX
            K1=J+(I-1)*NDY
            K2=I+(J-1)*NDX
            CALL GETIJ(M1,N1,K1,NDX)
            CALL GETIJ(M2,N2,K2,NDX)
            A(M1,N1)=AT(M2,N2)
            AT(M2,N2)=0.
         ENDDO
      ENDDO


      CALL MPI_ALLtoall(A,NBB,MPI_DOUBLE_PRECISION,
     1     AT,NBB,MPI_DOUBLE_PRECISION,
     1     MPI_COMM_WORLD,IERR)
      
      
      DO J=1,NDX/NCPU
         II=0
         DO N=1,NUMPROCS
            DO I=1,NDY
               II=II+1
               K1=II+(J-1)*NDYGLOB
               K2=I+(N-1)*NBB+(J-1)*NDY
               CALL GETIJ(M1,N1,K1,NDYGLOB)
               CALL GETIJ(M2,N2,K2,NDX)
               B(M1,N1)=AT(M2,N2)
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END



C---------------------------------------------------
      SUBROUTINE GETIJ(I,J,K,COLS)
      
C     INPUT THE OFFSET OF THE ELEMENT TO THE START LOCATION
C     IN THE OLD ARRAY IN THE PHYSICAL MEMORY. INPUT THE 
C     NUMBER OF COLUMNS IN THE NEW ARRAY. GET THE POSITION 
C     (I,J) OF THE ELEMENT IN THE NEW ARRAY.
      
      INTEGER I,J,K,COLS
      I=MOD(K-1,COLS)+1
      J=(K-1)/COLS+1
      RETURN
      END

C=====PARALLEL FFT SUBROUTINE GROUP END HERE





C=============================================================================
C     FFT PACKAGE START HERE

C  Real FFTPACKTULT.F  29 January 1991
C
      SUBROUTINE FFT99(A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
C
C PURPOSE      PERFORMS MULTIPLE FAST FOURIER TRANSFORMS.  THIS PACKAGE
C              WILL PERFORM A NUMBER OF SIMULTANEOUS REAL/HALF-COMPLEX
C              PERIODIC FOURIER TRANSFORMS OR CORRESPONDING INVERSE
C              TRANSFORMS, I.E.  GIVEN A SET OF REAL DATA VECTORS, THE
C              PACKAGE RETURNS A SET OF 'HALF-COMPLEX' FOURIER
C              COEFFICIENT VECTORS, OR VICE VERSA.  THE LENGTH OF THE
C              TRANSFORMS MUST BE AN EVEN NUMBER GREATER THAN 4 THAT HAS
C              NO OTHER FACTORS EXCEPT POSSIBLY POWERS OF 2, 3, AND 5.
C              THIS IS AN ALL FORTRAN VERSION OF THE CRAYLIB PACKAGE
C              THAT IS MOSTLY WRITTEN IN CAL.
C
C              THE PACKAGE FFT99F CONTAINS SEVERAL USER-LEVEL ROUTINES:
C
C            SUBROUTINE FFTFAX
C                AN INITIALIZATION ROUTINE THAT MUST BE CALLED ONCE
C                BEFORE A SEQUENCE OF CALLS TO THE FFT ROUTINES
C                (PROVIDED THAT N IS NOT CHANGED).
C
C            SUBROUTINES FFT99 AND FFT991
C                TWO FFT ROUTINES THAT RETURN SLIGHTLY DIFFERENT
C                ARRANGEMENTS OF THE DATA IN GRIDPOINT SPACE.
C
C
C ACCESS       THIS FORTRAN VERSION MAY BE ACCESSED WITH
C
C                   *FORTRAN,P=XLIB,SN=FFT99F
C
C              TO ACCESS THE CRAY OBJECT CODE, CALLING THE USER ENTRY
C              POINTS FROM A CRAY PROGRAM IS SUFFICIENT.  THE SOURCE
C              FORTRAN AND CAL CODE FOR THE CRAYLIB VERSION MAY BE
C              ACCESSED USING
C
C                   FETCH P=CRAYLIB,SN=FFT99
C                   FETCH P=CRAYLIB,SN=CAL99
C
C USAGE        LET N BE OF THE FORM 2**P * 3**Q * 5**R, WHERE P .GE. 1,
C              Q .GE. 0, AND R .GE. 0.  THEN A TYPICAL SEQUENCE OF
C              CALLS TO TRANSFORM A GIVEN SET OF REAL VECTORS OF LENGTH
C              N TO A SET OF 'HALF-COMPLEX' FOURIER COEFFICIENT VECTORS
C              OF LENGTH N IS
C
C                   DIMENSION IFAX(13),TRIGS(3*N/2+1),A(M*(N+2)),
C                  +          WORK(M*(N+1))
C
C                   CALL FFTFAX (N, IFAX, TRIGS)
C                   CALL FFT99 (A,WORK,TRIGS,IFAX,INC,JUMP,N,M,ISIGN)
C
C              SEE THE INDIVIDUAL WRITE-UPS FOR FFTFAX, FFT99, AND
C              FFT991 BELOW, FOR A DETAILED DESCRIPTION OF THE
C              ARGUMENTS.
C
C HISTORY      THE PACKAGE WAS WRITTEN BY CLIVE TEMPERTON AT ECMWF IN
C              NOVEMBER, 1978.  IT WAS MODIFIED, DOCUMENTED, AND TESTED
C              FOR NCAR BY RUSS REW IN SEPTEMBER, 1980.
C
C-----------------------------------------------------------------------
C
C SUBROUTINE FFTFAX (N,IFAX,TRIGS)
C
C PURPOSE      A SET-UP ROUTINE FOR FFT99 AND FFT991.  IT NEED ONLY BE
C              CALLED ONCE BEFORE A SEQUENCE OF CALLS TO THE FFT
C              ROUTINES (PROVIDED THAT N IS NOT CHANGED).
C
C ARGUMENT     IFAX(13),TRIGS(3*N/2+1)
C DIMENSIONS
C
C ARGUMENTS
C
C ON INPUT     N
C               AN EVEN NUMBER GREATER THAN 4 THAT HAS NO PRIME FACTOR
C               GREATER THAN 5.  N IS THE LENGTH OF THE TRANSFORMS (SEE
C               THE DOCUMENTATION FOR FFT99 AND FFT991 FOR THE
C               DEFINITIONS OF THE TRANSFORMS).
C
C              IFAX
C               AN INTEGER ARRAY.  THE NUMBER OF ELEMENTS ACTUALLY USED
C               WILL DEPEND ON THE FACTORIZATION OF N.  DIMENSIONING
C               IFAX FOR 13 SUFFICES FOR ALL N LESS THAN A MILLION.
C
C              TRIGS
C               A FLOATING POINT ARRAY OF DIMENSION 3*N/2 IF N/2 IS
C               EVEN, OR 3*N/2+1 IF N/2 IS ODD.
C
C ON OUTPUT    IFAX
C               CONTAINS THE FACTORIZATION OF N/2.  IFAX(1) IS THE
C               NUMBER OF FACTORS, AND THE FACTORS THEMSELVES ARE STORED
C               IN IFAX(2),IFAX(3),...  IF FFTFAX IS CALLED WITH N ODD,
C               OR IF N HAS ANY PRIME FACTORS GREATER THAN 5, IFAX(1)
C               IS SET TO -99.
C
C              TRIGS
C               AN ARRAY OF TRIGNOMENTRIC FUNCTION VALUES SUBSEQUENTLY
C               USED BY THE FFT ROUTINES.
C
C-----------------------------------------------------------------------
C
C SUBROUTINE FFT991 (A,WORK,TRIGS,IFAX,INC,JUMP,N,M,ISIGN)
C                       AND
C SUBROUTINE FFT99 (A,WORK,TRIGS,IFAX,INC,JUMP,N,M,ISIGN)
C
C PURPOSE      PERFORM A NUMBER OF SIMULTANEOUS REAL/HALF-COMPLEX
C              PERIODIC FOURIER TRANSFORMS OR CORRESPONDING INVERSE
C              TRANSFORMS, USING ORDINARY SPATIAL ORDER OF GRIDPOINT
C              VALUES (FFT991) OR EXPLICIT CYCLIC CONTINUITY IN THE
C              GRIDPOINT VALUES (FFT99).  GIVEN A SET
C              OF REAL DATA VECTORS, THE PACKAGE RETURNS A SET OF
C              'HALF-COMPLEX' FOURIER COEFFICIENT VECTORS, OR VICE
C              VERSA.  THE LENGTH OF THE TRANSFORMS MUST BE AN EVEN
C              NUMBER THAT HAS NO OTHER FACTORS EXCEPT POSSIBLY POWERS
C              OF 2, 3, AND 5.  THESE VERSION OF FFT991 AND FFT99 ARE
C              OPTIMIZED FOR USE ON THE CRAY-1.
C
C ARGUMENT     A(M*(N+2)), WORK(M*(N+1)), TRIGS(3*N/2+1), IFAX(13)
C DIMENSIONS
C
C ARGUMENTS
C
C ON INPUT     A
C               AN ARRAY OF LENGTH M*(N+2) CONTAINING THE INPUT DATA
C               OR COEFFICIENT VECTORS.  THIS ARRAY IS OVERWRITTEN BY
C               THE RESULTS.
C
C              WORK
C               A WORK ARRAY OF DIMENSION M*(N+1)
C
C              TRIGS
C               AN ARRAY SET UP BY FFTFAX, WHICH MUST BE CALLED FIRST.
C
C              IFAX
C               AN ARRAY SET UP BY FFTFAX, WHICH MUST BE CALLED FIRST.
C
C              INC
C               THE INCREMENT (IN WORDS) BETWEEN SUCCESSIVE ELEMENTS OF
C               EACH DATA OR COEFFICIENT VECTOR (E.G.  INC=1 FOR
C               CONSECUTIVELY STORED DATA).
C
C              JUMP
C               THE INCREMENT (IN WORDS) BETWEEN THE FIRST ELEMENTS OF
C               SUCCESSIVE DATA OR COEFFICIENT VECTORS.  ON THE CRAY-1,
C               TRY TO ARRANGE DATA SO THAT JUMP IS NOT A MULTIPLE OF 8
C               (TO AVOID MEMORY BANK CONFLICTS).  FOR CLARIFICATION OF
C               INC AND JUMP, SEE THE EXAMPLES BELOW.
C
C              N
C               THE LENGTH OF EACH TRANSFORM (SEE DEFINITION OF
C               TRANSFORMS, BELOW).
C
C              M
C               THE NUMBER OF TRANSFORMS TO BE DONE SIMULTANEOUSLY.
C
C              ISIGN
C               = +1 FOR A TRANSFORM FROM FOURIER COEFFICIENTS TO
C                    GRIDPOINT VALUES.
C               = -1 FOR A TRANSFORM FROM GRIDPOINT VALUES TO FOURIER
C                    COEFFICIENTS.
C
C ON OUTPUT    A
C               IF ISIGN = +1, AND M COEFFICIENT VECTORS ARE SUPPLIED
C               EACH CONTAINING THE SEQUENCE:
C
C               A(0),B(0),A(1),B(1),...,A(N/2),B(N/2)  (N+2 VALUES)
C
C               THEN THE RESULT CONSISTS OF M DATA VECTORS EACH
C               CONTAINING THE CORRESPONDING N+2 GRIDPOINT VALUES:
C
C               FOR FFT991, X(0), X(1), X(2),...,X(N-1),0,0.
C               FOR FFT99, X(N-1),X(0),X(1),X(2),...,X(N-1),X(0).
C                   (EXPLICIT CYCLIC CONTINUITY)
C
C               WHEN ISIGN = +1, THE TRANSFORM IS DEFINED BY:
C                 X(J)=SUM(K=0,...,N-1)(C(K)*EXP(2*I*J*K*PI/N))
C                 WHERE C(K)=A(K)+I*B(K) AND C(N-K)=A(K)-I*B(K)
C                 AND I=SQRT (-1)
C
C               IF ISIGN = -1, AND M DATA VECTORS ARE SUPPLIED EACH
C               CONTAINING A SEQUENCE OF GRIDPOINT VALUES X(J) AS
C               DEFINED ABOVE, THEN THE RESULT CONSISTS OF M VECTORS
C               EACH CONTAINING THE CORRESPONDING FOURIER COFFICIENTS
C               A(K), B(K), 0 .LE. K .LE N/2.
C
C               WHEN ISIGN = -1, THE INVERSE TRANSFORM IS DEFINED BY:
C                 C(K)=(1/N)*SUM(J=0,...,N-1)(X(J)*EXP(-2*I*J*K*PI/N))
C                 WHERE C(K)=A(K)+I*B(K) AND I=SQRT(-1)
C
C               A CALL WITH ISIGN=+1 FOLLOWED BY A CALL WITH ISIGN=-1
C               (OR VICE VERSA) RETURNS THE ORIGINAL DATA.
C
C               NOTE: THE FACT THAT THE GRIDPOINT VALUES X(J) ARE REAL
C               IMPLIES THAT B(0)=B(N/2)=0.  FOR A CALL WITH ISIGN=+1,
C               IT IS NOT ACTUALLY NECESSARY TO SUPPLY THESE ZEROS.
C
C EXAMPLES      GIVEN 19 DATA VECTORS EACH OF LENGTH 64 (+2 FOR EXPLICIT
C               CYCLIC CONTINUITY), COMPUTE THE CORRESPONDING VECTORS OF
C               FOURIER COEFFICIENTS.  THE DATA MAY, FOR EXAMPLE, BE
C               ARRANGED LIKE THIS:
C
C FIRST DATA   A(1)=    . . .                A(66)=             A(70)
C VECTOR       X(63) X(0) X(1) X(2) ... X(63) X(0)  (4 EMPTY LOCATIONS)
C
C SECOND DATA  A(71)=   . . .                                  A(140)
C VECTOR       X(63) X(0) X(1) X(2) ... X(63) X(0)  (4 EMPTY LOCATIONS)
C
C               AND SO ON.  HERE INC=1, JUMP=70, N=64, M=19, ISIGN=-1,
C               AND FFT99 SHOULD BE USED (BECAUSE OF THE EXPLICIT CYCLIC
C               CONTINUITY).
C
C               ALTERNATIVELY THE DATA MAY BE ARRANGED LIKE THIS:
C
C                FIRST         SECOND                          LAST
C                DATA          DATA                            DATA
C                VECTOR        VECTOR                          VECTOR
C
C                 A(1)=         A(2)=                           A(19)=
C
C                 X(63)         X(63)       . . .               X(63)
C        A(20)=   X(0)          X(0)        . . .               X(0)
C        A(39)=   X(1)          X(1)        . . .               X(1)
C                  .             .                               .
C                  .             .                               .
C                  .             .                               .
C
C               IN WHICH CASE WE HAVE INC=19, JUMP=1, AND THE REMAINING
C               PARAMETERS ARE THE SAME AS BEFORE.  IN EITHER CASE, EACH
C               COEFFICIENT VECTOR OVERWRITES THE CORRESPONDING INPUT
C               DATA VECTOR.
C
C-----------------------------------------------------------------------
      DIMENSION A(N),WORK(N),TRIGS(N),IFAX(1)
C
C     SUBROUTINE "FFT99" - MULTIPLE FAST REAL PERIODIC TRANSFORM
C     CORRESPONDING TO OLD SCALAR ROUTINE FFT9
C     PROCEDURE USED TO CONVERT TO HALF-LENGTH COMPLEX TRANSFORM
C     IS GIVEN BY COOLEY, LEWIS AND WELCH (J. SOUND VIB., VOL. 12
C     (1970), 315-337)
C
C     A IS THE ARRAY CONTAINING INPUT AND OUTPUT DATA
C     WORK IS AN AREA OF SIZE (N+1)*LOT
C     TRIGS IS A PREVIOUSLY PREPARED LIST OF TRIG FUNCTION VALUES
C     IFAX IS A PREVIOUSLY PREPARED LIST OF FACTORS OF N/2
C     INC IS THE INCREMENT WITHIN EACH DATA 'VECTOR'
C         (E.G. INC=1 FOR CONSECUTIVELY STORED DATA)
C     JUMP IS THE INCREMENT BETWEEN THE START OF EACH DATA VECTOR
C     N IS THE LENGTH OF THE DATA VECTORS
C     LOT IS THE NUMBER OF DATA VECTORS
C     ISIGN = +1 FOR TRANSFORM FROM SPECTRAL TO GRIDPOINT
C           = -1 FOR TRANSFORM FROM GRIDPOINT TO SPECTRAL
C
C     ORDERING OF COEFFICIENTS:
C         A(0),B(0),A(1),B(1),A(2),B(2),...,A(N/2),B(N/2)
C         WHERE B(0)=B(N/2)=0; (N+2) LOCATIONS REQUIRED
C
C     ORDERING OF DATA:
C         X(N-1),X(0),X(1),X(2),...,X(N),X(0)
C         I.E. EXPLICIT CYCLIC CONTINUITY; (N+2) LOCATIONS REQUIRED
C
C     VECTORIZATION IS ACHIEVED ON CRAY BY DOING THE TRANSFORMS IN
C     PARALLEL
C
C     *** N.B. N IS ASSUMED TO BE AN EVEN NUMBER
C
C     DEFINITION OF TRANSFORMS:
C     -------------------------
C
C     ISIGN=+1: X(J)=SUM(K=0,...,N-1)(C(K)*EXP(2*I*J*K*PI/N))
C         WHERE C(K)=A(K)+I*B(K) AND C(N-K)=A(K)-I*B(K)
C
C     ISIGN=-1: A(K)=(1/N)*SUM(J=0,...,N-1)(X(J)*COS(2*J*K*PI/N))
C               B(K)=-(1/N)*SUM(J=0,...,N-1)(X(J)*SIN(2*J*K*PI/N))
C
C
      NFAX=IFAX(1)
      NX=N+1
      NH=N/2
      INK=INC+INC
      IF (ISIGN.EQ.+1) GO TO 30
C
C     IF NECESSARY, TRANSFER DATA TO WORK AREA
      IGO=50
      IF (MOD(NFAX,2).EQ.1) GOTO 40
      IBASE=INC+1
      JBASE=1
      DO 20 L=1,LOT
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 10 M=1,N
      WORK(J)=A(I)
      I=I+INC
      J=J+1
   10 CONTINUE
      IBASE=IBASE+JUMP
      JBASE=JBASE+NX
   20 CONTINUE
C
      IGO=60
      GO TO 40
C
C     PREPROCESSING (ISIGN=+1)
C     ------------------------
C
   30 CONTINUE
      CALL FFT99A(A,WORK,TRIGS,INC,JUMP,N,LOT)
      IGO=60
C
C     COMPLEX TRANSFORM
C     -----------------
C
   40 CONTINUE
      IA=INC+1
      LA=1
      DO 80 K=1,NFAX
      IF (IGO.EQ.60) GO TO 60
   50 CONTINUE
      CALL VPASSM(A(IA),A(IA+INC),WORK(1),WORK(2),TRIGS,
     *   INK,2,JUMP,NX,LOT,NH,IFAX(K+1),LA)
      IGO=60
      GO TO 70
   60 CONTINUE
      CALL VPASSM(WORK(1),WORK(2),A(IA),A(IA+INC),TRIGS,
     *    2,INK,NX,JUMP,LOT,NH,IFAX(K+1),LA)
      IGO=50
   70 CONTINUE
      LA=LA*IFAX(K+1)
   80 CONTINUE
C
      IF (ISIGN.EQ.-1) GO TO 130
C
C     IF NECESSARY, TRANSFER DATA FROM WORK AREA
      IF (MOD(NFAX,2).EQ.1) GO TO 110
      IBASE=1
      JBASE=IA
      DO 100 L=1,LOT
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 90 M=1,N
      A(J)=WORK(I)
      I=I+1
      J=J+INC
   90 CONTINUE
      IBASE=IBASE+NX
      JBASE=JBASE+JUMP
  100 CONTINUE
C
C     FILL IN CYCLIC BOUNDARY POINTS
  110 CONTINUE
      IA=1
      IB=N*INC+1
CDIR$ IVDEP
      DO 120 L=1,LOT
      A(IA)=A(IB)
      A(IB+INC)=A(IA+INC)
      IA=IA+JUMP
      IB=IB+JUMP
  120 CONTINUE
      GO TO 140
C
C     POSTPROCESSING (ISIGN=-1):
C     --------------------------
C
  130 CONTINUE
      CALL FFT99B(WORK,A,TRIGS,INC,JUMP,N,LOT)
C
  140 CONTINUE
      RETURN
      END
C---------------------------------------------------------------C
      SUBROUTINE FFT99A(A,WORK,TRIGS,INC,JUMP,N,LOT)
      DIMENSION A(N),WORK(N),TRIGS(N)
C
C     SUBROUTINE FFT99A - PREPROCESSING STEP FOR FFT99, ISIGN=+1
C     (SPECTRAL TO GRIDPOINT TRANSFORM)
C
      NH=N/2
      NX=N+1
      INK=INC+INC
C
C     A(0) AND A(N/2)
      IA=1
      IB=N*INC+1
      JA=1
      JB=2
CDIR$ IVDEP
      DO 10 L=1,LOT
      WORK(JA)=A(IA)+A(IB)
      WORK(JB)=A(IA)-A(IB)
      IA=IA+JUMP
      IB=IB+JUMP
      JA=JA+NX
      JB=JB+NX
   10 CONTINUE
C
C     REMAINING WAVENUMBERS
      IABASE=2*INC+1
      IBBASE=(N-2)*INC+1
      JABASE=3
      JBBASE=N-1
C
      DO 30 K=3,NH,2
      IA=IABASE
      IB=IBBASE
      JA=JABASE
      JB=JBBASE
      C=TRIGS(N+K)
      S=TRIGS(N+K+1)
CDIR$ IVDEP
      DO 20 L=1,LOT
      WORK(JA)=(A(IA)+A(IB))-
     *    (S*(A(IA)-A(IB))+C*(A(IA+INC)+A(IB+INC)))
      WORK(JB)=(A(IA)+A(IB))+
     *    (S*(A(IA)-A(IB))+C*(A(IA+INC)+A(IB+INC)))
      WORK(JA+1)=(C*(A(IA)-A(IB))-S*(A(IA+INC)+A(IB+INC)))+
     *    (A(IA+INC)-A(IB+INC))
      WORK(JB+1)=(C*(A(IA)-A(IB))-S*(A(IA+INC)+A(IB+INC)))-
     *    (A(IA+INC)-A(IB+INC))
      IA=IA+JUMP
      IB=IB+JUMP
      JA=JA+NX
      JB=JB+NX
   20 CONTINUE
      IABASE=IABASE+INK
      IBBASE=IBBASE-INK
      JABASE=JABASE+2
      JBBASE=JBBASE-2
   30 CONTINUE
C
      IF (IABASE.NE.IBBASE) GO TO 50
C     WAVENUMBER N/4 (IF IT EXISTS)
      IA=IABASE
      JA=JABASE
CDIR$ IVDEP
      DO 40 L=1,LOT
      WORK(JA)=2.0*A(IA)
      WORK(JA+1)=-2.0*A(IA+INC)
      IA=IA+JUMP
      JA=JA+NX
   40 CONTINUE
C
   50 CONTINUE
      RETURN
      END
C---------------------------------------------------------------C
      SUBROUTINE FFT99B(WORK,A,TRIGS,INC,JUMP,N,LOT)
      DIMENSION WORK(N),A(N),TRIGS(N)
C
C     SUBROUTINE FFT99B - POSTPROCESSING STEP FOR FFT99, ISIGN=-1
C     (GRIDPOINT TO SPECTRAL TRANSFORM)
C
      NH=N/2
      NX=N+1
      INK=INC+INC
C
C     A(0) AND A(N/2)
      SCALE=1.0/FLOAT(N)
      IA=1
      IB=2
      JA=1
      JB=N*INC+1
CDIR$ IVDEP
      DO 10 L=1,LOT
      A(JA)=SCALE*(WORK(IA)+WORK(IB))
      A(JB)=SCALE*(WORK(IA)-WORK(IB))
      A(JA+INC)=0.0
      A(JB+INC)=0.0
      IA=IA+NX
      IB=IB+NX
      JA=JA+JUMP
      JB=JB+JUMP
   10 CONTINUE
C
C     REMAINING WAVENUMBERS
      SCALE=0.5*SCALE
      IABASE=3
      IBBASE=N-1
      JABASE=2*INC+1
      JBBASE=(N-2)*INC+1
C
      DO 30 K=3,NH,2
      IA=IABASE
      IB=IBBASE
      JA=JABASE
      JB=JBBASE
      C=TRIGS(N+K)
      S=TRIGS(N+K+1)
CDIR$ IVDEP
      DO 20 L=1,LOT
      A(JA)=SCALE*((WORK(IA)+WORK(IB))
     *   +(C*(WORK(IA+1)+WORK(IB+1))+S*(WORK(IA)-WORK(IB))))
      A(JB)=SCALE*((WORK(IA)+WORK(IB))
     *   -(C*(WORK(IA+1)+WORK(IB+1))+S*(WORK(IA)-WORK(IB))))
      A(JA+INC)=SCALE*((C*(WORK(IA)-WORK(IB))-S*(WORK(IA+1)+WORK(IB+1)))
     *    +(WORK(IB+1)-WORK(IA+1)))
      A(JB+INC)=SCALE*((C*(WORK(IA)-WORK(IB))-S*(WORK(IA+1)+WORK(IB+1)))
     *    -(WORK(IB+1)-WORK(IA+1)))
      IA=IA+NX
      IB=IB+NX
      JA=JA+JUMP
      JB=JB+JUMP
   20 CONTINUE
      IABASE=IABASE+2
      IBBASE=IBBASE-2
      JABASE=JABASE+INK
      JBBASE=JBBASE-INK
   30 CONTINUE
C
      IF (IABASE.NE.IBBASE) GO TO 50
C     WAVENUMBER N/4 (IF IT EXISTS)
      IA=IABASE
      JA=JABASE
      SCALE=2.0*SCALE
CDIR$ IVDEP
      DO 40 L=1,LOT
      A(JA)=SCALE*WORK(IA)
      A(JA+INC)=-SCALE*WORK(IA+1)
      IA=IA+NX
      JA=JA+JUMP
   40 CONTINUE
C
   50 CONTINUE
      RETURN
      END
C---------------------------------------------------------------C
      SUBROUTINE FFT991(A,WORK,TRIGS,IFAX,INC,JUMP,N,LOT,ISIGN)
      DIMENSION A(N),WORK(N),TRIGS(N),IFAX(1)
C
C     SUBROUTINE "FFT991" - MULTIPLE REAL/HALF-COMPLEX PERIODIC
C     FAST FOURIER TRANSFORM
C
C     SAME AS FFT99 EXCEPT THAT ORDERING OF DATA CORRESPONDS TO
C     THAT IN MRFFT2
C
C     PROCEDURE USED TO CONVERT TO HALF-LENGTH COMPLEX TRANSFORM
C     IS GIVEN BY COOLEY, LEWIS AND WELCH (J. SOUND VIB., VOL. 12
C     (1970), 315-337)
C
C     A IS THE ARRAY CONTAINING INPUT AND OUTPUT DATA
C     WORK IS AN AREA OF SIZE (N+1)*LOT
C     TRIGS IS A PREVIOUSLY PREPARED LIST OF TRIG FUNCTION VALUES
C     IFAX IS A PREVIOUSLY PREPARED LIST OF FACTORS OF N/2
C     INC IS THE INCREMENT WITHIN EACH DATA 'VECTOR'
C         (E.G. INC=1 FOR CONSECUTIVELY STORED DATA)
C     JUMP IS THE INCREMENT BETWEEN THE START OF EACH DATA VECTOR
C     N IS THE LENGTH OF THE DATA VECTORS
C     LOT IS THE NUMBER OF DATA VECTORS
C     ISIGN = +1 FOR TRANSFORM FROM SPECTRAL TO GRIDPOINT
C           = -1 FOR TRANSFORM FROM GRIDPOINT TO SPECTRAL
C
C     ORDERING OF COEFFICIENTS:
C         A(0),B(0),A(1),B(1),A(2),B(2),...,A(N/2),B(N/2)
C         WHERE B(0)=B(N/2)=0; (N+2) LOCATIONS REQUIRED
C
C     ORDERING OF DATA:
C         X(0),X(1),X(2),...,X(N-1)
C
C     VECTORIZATION IS ACHIEVED ON CRAY BY DOING THE TRANSFORMS IN
C     PARALLEL
C
C     *** N.B. N IS ASSUMED TO BE AN EVEN NUMBER
C
C     DEFINITION OF TRANSFORMS:
C     -------------------------
C
C     ISIGN=+1: X(J)=SUM(K=0,...,N-1)(C(K)*EXP(2*I*J*K*PI/N))
C         WHERE C(K)=A(K)+I*B(K) AND C(N-K)=A(K)-I*B(K)
C
C     ISIGN=-1: A(K)=(1/N)*SUM(J=0,...,N-1)(X(J)*COS(2*J*K*PI/N))
C               B(K)=-(1/N)*SUM(J=0,...,N-1)(X(J)*SIN(2*J*K*PI/N))
C
      NFAX=IFAX(1)
      NX=N+1
      NH=N/2
      INK=INC+INC
      IF (ISIGN.EQ.+1) GO TO 30
C
C     IF NECESSARY, TRANSFER DATA TO WORK AREA
      IGO=50
      IF (MOD(NFAX,2).EQ.1) GOTO 40
      IBASE=1
      JBASE=1
      DO 20 L=1,LOT
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 10 M=1,N
      WORK(J)=A(I)
      I=I+INC
      J=J+1
   10 CONTINUE
      IBASE=IBASE+JUMP
      JBASE=JBASE+NX
   20 CONTINUE
C
      IGO=60
      GO TO 40
C
C     PREPROCESSING (ISIGN=+1)
C     ------------------------
C
   30 CONTINUE
      CALL FFT99A(A,WORK,TRIGS,INC,JUMP,N,LOT)
      IGO=60
C
C     COMPLEX TRANSFORM
C     -----------------
C
   40 CONTINUE
      IA=1
      LA=1
      DO 80 K=1,NFAX
      IF (IGO.EQ.60) GO TO 60
   50 CONTINUE
      CALL VPASSM(A(IA),A(IA+INC),WORK(1),WORK(2),TRIGS,
     *   INK,2,JUMP,NX,LOT,NH,IFAX(K+1),LA)
      IGO=60
      GO TO 70
   60 CONTINUE
      CALL VPASSM(WORK(1),WORK(2),A(IA),A(IA+INC),TRIGS,
     *    2,INK,NX,JUMP,LOT,NH,IFAX(K+1),LA)
      IGO=50
   70 CONTINUE
      LA=LA*IFAX(K+1)
   80 CONTINUE
C
      IF (ISIGN.EQ.-1) GO TO 130
C
C     IF NECESSARY, TRANSFER DATA FROM WORK AREA
      IF (MOD(NFAX,2).EQ.1) GO TO 110
      IBASE=1
      JBASE=1
      DO 100 L=1,LOT
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 90 M=1,N
      A(J)=WORK(I)
      I=I+1
      J=J+INC
   90 CONTINUE
      IBASE=IBASE+NX
      JBASE=JBASE+JUMP
  100 CONTINUE
C
C     FILL IN ZEROS AT END
  110 CONTINUE
      IB=N*INC+1
CDIR$ IVDEP
      DO 120 L=1,LOT
      A(IB)=0.0
      A(IB+INC)=0.0
      IB=IB+JUMP
  120 CONTINUE
      GO TO 140
C
C     POSTPROCESSING (ISIGN=-1):
C     --------------------------
C
  130 CONTINUE
      CALL FFT99B(WORK,A,TRIGS,INC,JUMP,N,LOT)
C
  140 CONTINUE
      RETURN
      END
C---------------------------------------------------------------C
      SUBROUTINE FFTFAX(N,IFAX,TRIGS)
      DIMENSION IFAX(13),TRIGS(1)
C
C MODE 3 IS USED FOR REAL/HALF-COMPLEX TRANSFORMS.  IT IS POSSIBLE
C TO DO COMPLEX/COMPLEX TRANSFORMS WITH OTHER VALUES OF MODE, BUT
C DOCUMENTATION OF THE DETAILS WERE NOT AVAILABLE WHEN THIS ROUTINE
C WAS WRITTEN.
C
      DATA MODE /3/
      CALL FAX (IFAX, N, MODE)
      I = IFAX(1)
      IF (IFAX(I+1) .GT. 5 .OR. N .LE. 4) IFAX(1) = -99
      IF (IFAX(1) .LE. 0 )THEN
        WRITE(*,1900)N
1900    FORMAT(' FFTFAX - Invalid N=',I20)
        RETURN
        ENDIF
      CALL FFTRIG (TRIGS, N, MODE)
      RETURN
      END
C---------------------------------------------------------------C
      SUBROUTINE FAX(IFAX,N,MODE)
      DIMENSION IFAX(10)
      NN=N
      IF (IABS(MODE).EQ.1) GO TO 10
      IF (IABS(MODE).EQ.8) GO TO 10
      NN=N/2
      IF ((NN+NN).EQ.N) GO TO 10
      IFAX(1)=-99
      RETURN
   10 K=1
C     TEST FOR FACTORS OF 4
   20 IF (MOD(NN,4).NE.0) GO TO 30
      K=K+1
      IFAX(K)=4
      NN=NN/4
      IF (NN.EQ.1) GO TO 80
      GO TO 20
C     TEST FOR EXTRA FACTOR OF 2
   30 IF (MOD(NN,2).NE.0) GO TO 40
      K=K+1
      IFAX(K)=2
      NN=NN/2
      IF (NN.EQ.1) GO TO 80
C     TEST FOR FACTORS OF 3
   40 IF (MOD(NN,3).NE.0) GO TO 50
      K=K+1
      IFAX(K)=3
      NN=NN/3
      IF (NN.EQ.1) GO TO 80
      GO TO 40
C     NOW FIND REMAINING FACTORS
   50 L=5
      INC=2
C     INC ALTERNATELY TAKES ON VALUES 2 AND 4
   60 IF (MOD(NN,L).NE.0) GO TO 70
      K=K+1
      IFAX(K)=L
      NN=NN/L
      IF (NN.EQ.1) GO TO 80
      GO TO 60
   70 L=L+INC
      INC=6-INC
      GO TO 60
   80 IFAX(1)=K-1
C     IFAX(1) CONTAINS NUMBER OF FACTORS
      NFAX=IFAX(1)
C     SORT FACTORS INTO ASCENDING ORDER
      IF (NFAX.EQ.1) GO TO 110
      DO 100 II=2,NFAX
      ISTOP=NFAX+2-II
      DO 90 I=2,ISTOP
      IF (IFAX(I+1).GE.IFAX(I)) GO TO 90
      ITEM=IFAX(I)
      IFAX(I)=IFAX(I+1)
      IFAX(I+1)=ITEM
   90 CONTINUE
  100 CONTINUE
  110 CONTINUE
      RETURN
      END
C---------------------------------------------------------------C
      SUBROUTINE FFTRIG(TRIGS,N,MODE)
      DIMENSION TRIGS(1)
      PI=2.0*ASIN(1.0)
      IMODE=IABS(MODE)
      NN=N
      IF (IMODE.GT.1.AND.IMODE.LT.6) NN=N/2
      DEL=(PI+PI)/FLOAT(NN)
      L=NN+NN
      DO 10 I=1,L,2
      ANGLE=0.5*FLOAT(I-1)*DEL
      TRIGS(I)=COS(ANGLE)
      TRIGS(I+1)=SIN(ANGLE)
   10 CONTINUE
      IF (IMODE.EQ.1) RETURN
      IF (IMODE.EQ.8) RETURN
      DEL=0.5*DEL
      NH=(NN+1)/2
      L=NH+NH
      LA=NN+NN
      DO 20 I=1,L,2
      ANGLE=0.5*FLOAT(I-1)*DEL
      TRIGS(LA+I)=COS(ANGLE)
      TRIGS(LA+I+1)=SIN(ANGLE)
   20 CONTINUE
      IF (IMODE.LE.3) RETURN
      DEL=0.5*DEL
      LA=LA+NN
      IF (MODE.EQ.5) GO TO 40
      DO 30 I=2,NN
      ANGLE=FLOAT(I-1)*DEL
      TRIGS(LA+I)=2.0*SIN(ANGLE)
   30 CONTINUE
      RETURN
   40 CONTINUE
      DEL=0.5*DEL
      DO 50 I=2,N
      ANGLE=FLOAT(I-1)*DEL
      TRIGS(LA+I)=SIN(ANGLE)
   50 CONTINUE
      RETURN
      END
      SUBROUTINE VPASSM(A,B,C,D,TRIGS,INC1,INC2,INC3,INC4,LOT,N,IFAC,LA)
      DIMENSION A(N),B(N),C(N),D(N),TRIGS(N)
C
C     SUBROUTINE "VPASSM" - MULTIPLE VERSION OF "VPASSA"
C     PERFORMS ONE PASS THROUGH DATA
C     AS PART OF MULTIPLE COMPLEX FFT ROUTINE
C     A IS FIRST REAL INPUT VECTOR
C     B IS FIRST IMAGINARY INPUT VECTOR
C     C IS FIRST REAL OUTPUT VECTOR
C     D IS FIRST IMAGINARY OUTPUT VECTOR
C     TRIGS IS PRECALCULATED TABLE OF SINES " COSINES
C     INC1 IS ADDRESSING INCREMENT FOR A AND B
C     INC2 IS ADDRESSING INCREMENT FOR C AND D
C     INC3 IS ADDRESSING INCREMENT BETWEEN A"S & B"S
C     INC4 IS ADDRESSING INCREMENT BETWEEN C"S & D"S
C     LOT IS THE NUMBER OF VECTORS
C     N IS LENGTH OF VECTORS
C     IFAC IS CURRENT FACTOR OF N
C     LA IS PRODUCT OF PREVIOUS FACTORS
C
      DATA SIN36/0.587785252292473/,COS36/0.809016994374947/,
     *     SIN72/0.951056516295154/,COS72/0.309016994374947/,
     *     SIN60/0.866025403784437/
C
      M=N/IFAC
      IINK=M*INC1
      JINK=LA*INC2
      JUMP=(IFAC-1)*JINK
      IBASE=0
      JBASE=0
      IGO=IFAC-1
      IF (IGO.GT.4) RETURN
      GO TO (10,50,90,130),IGO
C
C     CODING FOR FACTOR 2
C
   10 IA=1
      JA=1
      IB=IA+IINK
      JB=JA+JINK
      DO 20 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 15 IJK=1,LOT
      C(JA+J)=A(IA+I)+A(IB+I)
      D(JA+J)=B(IA+I)+B(IB+I)
      C(JB+J)=A(IA+I)-A(IB+I)
      D(JB+J)=B(IA+I)-B(IB+I)
      I=I+INC3
      J=J+INC4
   15 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
   20 CONTINUE
      IF (LA.EQ.M) RETURN
      LA1=LA+1
      JBASE=JBASE+JUMP
      DO 40 K=LA1,M,LA
      KB=K+K-2
      C1=TRIGS(KB+1)
      S1=TRIGS(KB+2)
      DO 30 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 25 IJK=1,LOT
      C(JA+J)=A(IA+I)+A(IB+I)
      D(JA+J)=B(IA+I)+B(IB+I)
      C(JB+J)=C1*(A(IA+I)-A(IB+I))-S1*(B(IA+I)-B(IB+I))
      D(JB+J)=S1*(A(IA+I)-A(IB+I))+C1*(B(IA+I)-B(IB+I))
      I=I+INC3
      J=J+INC4
   25 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
   30 CONTINUE
      JBASE=JBASE+JUMP
   40 CONTINUE
      RETURN
C
C     CODING FOR FACTOR 3
C
   50 IA=1
      JA=1
      IB=IA+IINK
      JB=JA+JINK
      IC=IB+IINK
      JC=JB+JINK
      DO 60 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 55 IJK=1,LOT
      C(JA+J)=A(IA+I)+(A(IB+I)+A(IC+I))
      D(JA+J)=B(IA+I)+(B(IB+I)+B(IC+I))
      C(JB+J)=(A(IA+I)-0.5*(A(IB+I)+A(IC+I)))-(SIN60*(B(IB+I)-B(IC+I)))
      C(JC+J)=(A(IA+I)-0.5*(A(IB+I)+A(IC+I)))+(SIN60*(B(IB+I)-B(IC+I)))
      D(JB+J)=(B(IA+I)-0.5*(B(IB+I)+B(IC+I)))+(SIN60*(A(IB+I)-A(IC+I)))
      D(JC+J)=(B(IA+I)-0.5*(B(IB+I)+B(IC+I)))-(SIN60*(A(IB+I)-A(IC+I)))
      I=I+INC3
      J=J+INC4
   55 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
   60 CONTINUE
      IF (LA.EQ.M) RETURN
      LA1=LA+1
      JBASE=JBASE+JUMP
      DO 80 K=LA1,M,LA
      KB=K+K-2
      KC=KB+KB
      C1=TRIGS(KB+1)
      S1=TRIGS(KB+2)
      C2=TRIGS(KC+1)
      S2=TRIGS(KC+2)
      DO 70 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 65 IJK=1,LOT
      C(JA+J)=A(IA+I)+(A(IB+I)+A(IC+I))
      D(JA+J)=B(IA+I)+(B(IB+I)+B(IC+I))
      C(JB+J)=
     *    C1*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))-(SIN60*(B(IB+I)-B(IC+I))))
     *   -S1*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))+(SIN60*(A(IB+I)-A(IC+I))))
      D(JB+J)=
     *    S1*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))-(SIN60*(B(IB+I)-B(IC+I))))
     *   +C1*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))+(SIN60*(A(IB+I)-A(IC+I))))
      C(JC+J)=
     *    C2*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))+(SIN60*(B(IB+I)-B(IC+I))))
     *   -S2*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))-(SIN60*(A(IB+I)-A(IC+I))))
      D(JC+J)=
     *    S2*((A(IA+I)-0.5*(A(IB+I)+A(IC+I)))+(SIN60*(B(IB+I)-B(IC+I))))
     *   +C2*((B(IA+I)-0.5*(B(IB+I)+B(IC+I)))-(SIN60*(A(IB+I)-A(IC+I))))
      I=I+INC3
      J=J+INC4
   65 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
   70 CONTINUE
      JBASE=JBASE+JUMP
   80 CONTINUE
      RETURN
C
C     CODING FOR FACTOR 4
C
   90 IA=1
      JA=1
      IB=IA+IINK
      JB=JA+JINK
      IC=IB+IINK
      JC=JB+JINK
      ID=IC+IINK
      JD=JC+JINK
      DO 100 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 95 IJK=1,LOT
      C(JA+J)=(A(IA+I)+A(IC+I))+(A(IB+I)+A(ID+I))
      C(JC+J)=(A(IA+I)+A(IC+I))-(A(IB+I)+A(ID+I))
      D(JA+J)=(B(IA+I)+B(IC+I))+(B(IB+I)+B(ID+I))
      D(JC+J)=(B(IA+I)+B(IC+I))-(B(IB+I)+B(ID+I))
      C(JB+J)=(A(IA+I)-A(IC+I))-(B(IB+I)-B(ID+I))
      C(JD+J)=(A(IA+I)-A(IC+I))+(B(IB+I)-B(ID+I))
      D(JB+J)=(B(IA+I)-B(IC+I))+(A(IB+I)-A(ID+I))
      D(JD+J)=(B(IA+I)-B(IC+I))-(A(IB+I)-A(ID+I))
      I=I+INC3
      J=J+INC4
   95 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
  100 CONTINUE
      IF (LA.EQ.M) RETURN
      LA1=LA+1
      JBASE=JBASE+JUMP
      DO 120 K=LA1,M,LA
      KB=K+K-2
      KC=KB+KB
      KD=KC+KB
      C1=TRIGS(KB+1)
      S1=TRIGS(KB+2)
      C2=TRIGS(KC+1)
      S2=TRIGS(KC+2)
      C3=TRIGS(KD+1)
      S3=TRIGS(KD+2)
      DO 110 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 105 IJK=1,LOT
      C(JA+J)=(A(IA+I)+A(IC+I))+(A(IB+I)+A(ID+I))
      D(JA+J)=(B(IA+I)+B(IC+I))+(B(IB+I)+B(ID+I))
      C(JC+J)=
     *    C2*((A(IA+I)+A(IC+I))-(A(IB+I)+A(ID+I)))
     *   -S2*((B(IA+I)+B(IC+I))-(B(IB+I)+B(ID+I)))
      D(JC+J)=
     *    S2*((A(IA+I)+A(IC+I))-(A(IB+I)+A(ID+I)))
     *   +C2*((B(IA+I)+B(IC+I))-(B(IB+I)+B(ID+I)))
      C(JB+J)=
     *    C1*((A(IA+I)-A(IC+I))-(B(IB+I)-B(ID+I)))
     *   -S1*((B(IA+I)-B(IC+I))+(A(IB+I)-A(ID+I)))
      D(JB+J)=
     *    S1*((A(IA+I)-A(IC+I))-(B(IB+I)-B(ID+I)))
     *   +C1*((B(IA+I)-B(IC+I))+(A(IB+I)-A(ID+I)))
      C(JD+J)=
     *    C3*((A(IA+I)-A(IC+I))+(B(IB+I)-B(ID+I)))
     *   -S3*((B(IA+I)-B(IC+I))-(A(IB+I)-A(ID+I)))
      D(JD+J)=
     *    S3*((A(IA+I)-A(IC+I))+(B(IB+I)-B(ID+I)))
     *   +C3*((B(IA+I)-B(IC+I))-(A(IB+I)-A(ID+I)))
      I=I+INC3
      J=J+INC4
  105 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
  110 CONTINUE
      JBASE=JBASE+JUMP
  120 CONTINUE
      RETURN
C
C     CODING FOR FACTOR 5
C
  130 IA=1
      JA=1
      IB=IA+IINK
      JB=JA+JINK
      IC=IB+IINK
      JC=JB+JINK
      ID=IC+IINK
      JD=JC+JINK
      IE=ID+IINK
      JE=JD+JINK
      DO 140 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 135 IJK=1,LOT
      C(JA+J)=A(IA+I)+(A(IB+I)+A(IE+I))+(A(IC+I)+A(ID+I))
      D(JA+J)=B(IA+I)+(B(IB+I)+B(IE+I))+(B(IC+I)+B(ID+I))
      C(JB+J)=(A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
     *  -(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I)))
      C(JE+J)=(A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
     *  +(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I)))
      D(JB+J)=(B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
     *  +(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I)))
      D(JE+J)=(B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
     *  -(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I)))
      C(JC+J)=(A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
     *  -(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I)))
      C(JD+J)=(A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
     *  +(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I)))
      D(JC+J)=(B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
     *  +(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I)))
      D(JD+J)=(B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
     *  -(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I)))
      I=I+INC3
      J=J+INC4
  135 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
  140 CONTINUE
      IF (LA.EQ.M) RETURN
      LA1=LA+1
      JBASE=JBASE+JUMP
      DO 160 K=LA1,M,LA
      KB=K+K-2
      KC=KB+KB
      KD=KC+KB
      KE=KD+KB
      C1=TRIGS(KB+1)
      S1=TRIGS(KB+2)
      C2=TRIGS(KC+1)
      S2=TRIGS(KC+2)
      C3=TRIGS(KD+1)
      S3=TRIGS(KD+2)
      C4=TRIGS(KE+1)
      S4=TRIGS(KE+2)
      DO 150 L=1,LA
      I=IBASE
      J=JBASE
CDIR$ IVDEP
      DO 145 IJK=1,LOT
      C(JA+J)=A(IA+I)+(A(IB+I)+A(IE+I))+(A(IC+I)+A(ID+I))
      D(JA+J)=B(IA+I)+(B(IB+I)+B(IE+I))+(B(IC+I)+B(ID+I))
      C(JB+J)=
     *    C1*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
     *      -(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
     *   -S1*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
     *      +(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
      D(JB+J)=
     *    S1*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
     *      -(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
     *   +C1*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
     *      +(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
      C(JE+J)=
     *    C4*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
     *      +(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
     *   -S4*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
     *      -(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
      D(JE+J)=
     *    S4*((A(IA+I)+COS72*(A(IB+I)+A(IE+I))-COS36*(A(IC+I)+A(ID+I)))
     *      +(SIN72*(B(IB+I)-B(IE+I))+SIN36*(B(IC+I)-B(ID+I))))
     *   +C4*((B(IA+I)+COS72*(B(IB+I)+B(IE+I))-COS36*(B(IC+I)+B(ID+I)))
     *      -(SIN72*(A(IB+I)-A(IE+I))+SIN36*(A(IC+I)-A(ID+I))))
      C(JC+J)=
     *    C2*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
     *      -(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
     *   -S2*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
     *      +(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
      D(JC+J)=
     *    S2*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
     *      -(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
     *   +C2*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
     *      +(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
      C(JD+J)=
     *    C3*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
     *      +(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
     *   -S3*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
     *      -(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
      D(JD+J)=
     *    S3*((A(IA+I)-COS36*(A(IB+I)+A(IE+I))+COS72*(A(IC+I)+A(ID+I)))
     *      +(SIN36*(B(IB+I)-B(IE+I))-SIN72*(B(IC+I)-B(ID+I))))
     *   +C3*((B(IA+I)-COS36*(B(IB+I)+B(IE+I))+COS72*(B(IC+I)+B(ID+I)))
     *      -(SIN36*(A(IB+I)-A(IE+I))-SIN72*(A(IC+I)-A(ID+I))))
      I=I+INC3
      J=J+INC4
  145 CONTINUE
      IBASE=IBASE+INC1
      JBASE=JBASE+INC2
  150 CONTINUE
      JBASE=JBASE+JUMP
  160 CONTINUE
      RETURN
      END
C---------------------------------------------------------------C
      SUBROUTINE FACT(N,IFAX)
C     FACTORIZATION ROUTINE THAT FIRST EXTRACTS ALL FACTORS OF 4
      DIMENSION IFAX(13)
      IF (N.GT.1) GO TO 10
      IFAX(1) = 0
      IF (N.LT.1) IFAX(1) = -99
      RETURN
   10 NN=N
      K=1
C     TEST FOR FACTORS OF 4
   20 IF (MOD(NN,4).NE.0) GO TO 30
      K=K+1
      IFAX(K)=4
      NN=NN/4
      IF (NN.EQ.1) GO TO 80
      GO TO 20
C     TEST FOR EXTRA FACTOR OF 2
   30 IF (MOD(NN,2).NE.0) GO TO 40
      K=K+1
      IFAX(K)=2
      NN=NN/2
      IF (NN.EQ.1) GO TO 80
C     TEST FOR FACTORS OF 3
   40 IF (MOD(NN,3).NE.0) GO TO 50
      K=K+1
      IFAX(K)=3
      NN=NN/3
      IF (NN.EQ.1) GO TO 80
      GO TO 40
C     NOW FIND REMAINING FACTORS
   50 L=5
      MAX = SQRT(FLOAT(NN))
      INC=2
C     INC ALTERNATELY TAKES ON VALUES 2 AND 4
   60 IF (MOD(NN,L).NE.0) GO TO 70
      K=K+1
      IFAX(K)=L
      NN=NN/L
      IF (NN.EQ.1) GO TO 80
      GO TO 60
   70 IF (L.GT.MAX) GO TO 75
      L=L+INC
      INC=6-INC
      GO TO 60
   75 K = K+1
      IFAX(K) = NN
   80 IFAX(1)=K-1
C     IFAX(1) NOW CONTAINS NUMBER OF FACTORS
      RETURN
      END
C---------------------------------------------------------------C









C=======================================================================
      SUBROUTINE WIND_LES_TEST(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,TRIGSX,TRIGSY,ETA,ETA0,HH,HT,HBAR,
     1     EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,
     1     REH2,HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,
     1     TIME,ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,KFILT,HS,
     1     US,WS,DELTA,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0)
      
C     STRESS DRIVEN COUETTE FLOW CASE

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USBOT,VPHASE


      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      real ut(nxmax,nymax/ncpu),vt(nxmax,nymax/ncpu)
      real wt(nxmax,nymax/ncpu)

      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,RETOP,REBOT,ZCS0

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

      CALL GETNUT(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     &     HER,HXR,EXR,HYR,EYR,U,V,W,DELTA,ICSC,
     &     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,
     &     CS,CSP,CSD,NUT,NUTA,IVANDRIEST,CS0,APLUS,RETOP,REBOT,
     &     IWAVEBOT,ZCS0)

      CALL GETNUTW(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZW,
     &     HER,HXR,EXR,HYR,EYR,U,V,W,DELTA,ICSC,
     &     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,S11W,S12W,S13W,S22W,S23W,
     &     S33W,NUTW,NUTWA,IVANDRIEST,CS0,APLUS,RETOP,REBOT,
     &     IWAVEBOT,ZCS0)

CC      CALL FUN_U_CNN_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
CC     1     DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,
CC     1     HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,
CC     &     NUT,NUTA,S11,S12,S13)

CC      CALL FUN_V_CNN_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
CC     1     DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,
CC     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,
CC     &     NUT,NUTA,S12,S22,S23)

CC      CALL FUN_W_COUETTE_CNN_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,
CC     1     ZW,TIME,DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,
CC     1     ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,
CC     &     NUTW,NUTWA,S13W,S23W,S33W)

CC      CALL INC_UVW_LNR(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,FV,
CC     1     FW,NCPU)

C+++
C     FOR DEBUGGING
      CALL FUN_U_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,DT,
     1     WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S11,S12,
     1     S13)

      CALL FUN_V_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,DT,
     1     WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,EHX,
     1     EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,NUT,NUTA,S12,S22,S23)

      CALL FUN_W_COUETTE_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,
     1     TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,
     1     HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,NUTW,NUTWA,S13W,
     1     S23W,S33W)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL VOLUME_LNR1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME)
C+++

      CALL BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,HK,
     1     HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)

      CALL TOP_FS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,
     1     UZFS,VZFS,W,HBAR,RE,RESTOP,NCPU)
      
      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,
     1     EHX,EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)
      
      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
      CALL BC_LNR(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,
     1     UB,VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,
     1     HXR,HYR,HER,NCPU)

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)

      RETURN
      END

C=====SUBROUTIE WIND_LES_TEST END HERE







C=========================================================================
      SUBROUTINE PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

C     HERE THE EX,EY,HX,HY SHOULD HAVE BEEN DEALIASED!

      IMPLICIT NONE
      
      INTEGER I,J,K,II
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,ITMAX,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND

      REAL PEX,PEY,DT,HBAR,ERLIM,OLD,ER1,ER2,ERR,ER_ALL,OME
      REAL TIMEWAVY,TIME

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      REAL PP(NXMAX,NYMAX/NCPU,*),SIGMA(NXMAX,NYMAX/NCPU,NZMAX)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL UB(NXMAX,NYMAX/NCPU),UT(NXMAX,NYMAX/NCPU)
      REAL V(NXMAX,NYMAX/NCPU,*)
      REAL VB(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WB(NXMAX,NYMAX/NCPU),WT(NXMAX,NYMAX/NCPU)
      REAL EPS(NXMAX,NYMAX/NCPU,NZMAX)
      REAL ETA(NXMAX,NYMAX/NCPU)
      REAL EX(NXMAX,NYMAX/NCPU),EY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HX(NXMAX,NYMAX/NCPU),HY(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL AL(NZMAX),AO(NZMAX),AR(NZMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC      

      CALL SOURCE_S_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,DT,
     1     WORK,TRIGSX,TRIGSY,IFAX,SIGMA,U,V,W,ETA,EX,EY,HBAR,HX,HY,
     1     EXR,EYR,HXR,HYR,HER,UB,VB,WB,UT,VT,WT,NCPU)

      DO 100 II=1,ITMAX

         CALL SOURCE_E_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1        TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  OLD=PP(I,J,K)
                  PP(I,J,K)=SIGMA(I,J,K)+EPS(I,J,K)
                  EPS(I,J,K)=OLD
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,PP,
     1        AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

         CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,PP,NCPU)
         
         IF(TIME.LE.TIMEWAVY) GOTO 999
         
         ER1=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=PP(I,J,K)-EPS(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER1)) ER1=ERR
               ENDDO
            ENDDO
         ENDDO
         
         CALL SOURCE_E_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1        TRIGSX,TRIGSY,IFAX,PP,EPS,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  EPS(I,J,K)=EPS(I,J,K)+SIGMA(I,J,K)
               ENDDO
            ENDDO
         ENDDO

         CALL POISSON_UU(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,PEX,PEY,
     1        EPS,AL,AO,AR,WORK,TRIGSX,TRIGSY,IFAX,HBAR,NCPU)

         CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,EPS,NCPU)

         ER2=0.
         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYEND
                  ERR=EPS(I,J,K)-PP(I,J,K)
                  IF(ABS(ERR).GT.ABS(ER2)) ER2=ERR
               ENDDO
            ENDDO
         ENDDO
         
         IF(NYEND.EQ.0) THEN
            OME=0.
            ER2=0.
            GOTO 888
         ENDIF

         if(abs(er2)+abs(er1).eq.0) then
            print*, 'error at |er2+er1|'
            stop
         endif

         OME=ABS(ER2)/(ABS(ER2)+ABS(ER1))
         
 888     CONTINUE

         DO K=2,NZ-1
            DO I=1,NXMOD
               DO J=1,NYMAX/NCPU
                  PP(I,J,K)=EPS(I,J,K)-OME*(EPS(I,J,K)-PP(I,J,K))
               ENDDO
            ENDDO
         ENDDO

         CALL MPI_ALLREDUCE(ABS(ER2),ER_ALL,1,MPI_DOUBLE_PRECISION,
     1        MPI_MAX,MPI_COMM_WORLD,IERR)
         IF(MYID.EQ.0) WRITE(*,*) II,ER2,ERLIM
         IF(ABS(ER_ALL).LT.ERLIM) GOTO 999
         
 100  CONTINUE
      
 999  CONTINUE

      RETURN
      END

C=====SUBROUTINE PRESS_G END HERE







C=================================================================
      SUBROUTINE TOP_FS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,
     1     UZFS,VZFS,W,HBAR,RE,RESTOP,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J
      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NCPU
      
      REAL HBAR,RE,RESTOP

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*)
      REAL UZFS(NXMAX,*),VZFS(NXMAX,*),W(NXMAX,NYMAX/NCPU,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ETA0(I,J)=0.
            ETA(I,J)=ETA0(I,J)+HH(I,J)
            UZFS(I,J)=(ETA(I,J)+HBAR)*RESTOP**2/RE
            VZFS(I,J)=0.
            W(I,J,NZ-1)=0.
         ENDDO
      ENDDO

      RETURN
      END

C=====SUBROUTINE TOP_FS END HERE







C=======================================================================
      SUBROUTINE WIND_DNS_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,TRIGSX,TRIGSY,ETA,ETA0,HH,HT,HBAR,
     1     EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,
     1     REH2,HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,
     1     TIME,ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,KFILT,HS,
     1     US,WS,DELTA,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0)
      
C     STRESS DRIVEN COUETTE FLOW CASE

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USBOT,VPHASE


      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      real ut(nxmax,nymax/ncpu),vt(nxmax,nymax/ncpu)
      real wt(nxmax,nymax/ncpu)

      REAL DELTA,DELTAX,DELTAY
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,RETOP,REBOT,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL FUN_U_DNS_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,
     1     TIME,DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,
     1     PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,NCPU)

      CALL FUN_V_DNS_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,
     1     TIME,DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,
     1     HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,NCPU)

      CALL FUN_W_DNS_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,
     1     TIME,DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,
     1     HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,NCPU)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL VOLUME_LNR1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME)

      CALL BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,HK,
     1     HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)

      CALL TOP_FS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,
     1     UZFS,VZFS,W,HBAR,RE,RESTOP,NCPU)
      
      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,
     1     TRIGSY,IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,
     1     EHX,EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)
      
      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
CC      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
CC     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)
      CALL WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
     1     DELTAY,HH,ETA,NCPU)

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)

      RETURN
      END

C=====SUBROUTIE WIND_DNS_WALLMODEL END HERE








C========================================================================
      SUBROUTINE FUN_U_DNS_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     DZ,ZZ,TIME,DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,
     1     PEX,PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,RE,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL LAPU(NXMAX,NYMAX/NCPU,NZMAX),NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C+++
C     1ST ORDER VERSION
CC      CALL LAP_U(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
CC     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
C+++

      CALL LAP_U_2ND(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ET(I,J)=W(I,J,NZ-1)-U(I,J,NZ)*EHX(I,J)-V(I,J,NZ)*EHY(I,J)
         ENDDO
      ENDDO

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
      DO K=2,NZ
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(UU(I,J,3)+3.*UU(I,J,2)-4.*UU(I,J,1))
     1                 /(3.*DZ(2))
                  VFZ(I,J)=(UV(I,J,3)+3.*UV(I,J,2)-4.*UV(I,J,1))
     1                 /(3.*DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
     1                 -W(I,J,1)*U(I,J,1))/(DZ(2)/2.+DZ(1))
                  FZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=(1-ZZ(K))*HT(I,J)-ZZ(K)*ET(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,TMP,NCPU)            
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=TMP(I,J)*HER(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,TMP,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=TMP(I,J)*FZ(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *UFZ(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)+LAPU(I,J,K)/RE
               IF(ABS(TIME-DT).LE.1.E-8) HU(I,J,K)=HNEW
               FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE                  
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_U END HERE
      
      



C======================================================================
      SUBROUTINE FUN_V_DNS_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     DZ,ZZ,TIME,DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,
     1     ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,NCPU)

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL TIME,DT,RE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FV(NXMAX,NYMAX/NCPU,*),HV(NXMAX,NYMAX/NCPU,*)
      REAL LAPV(NXMAX,NYMAX/NCPU,NZMAX),NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL VU(NXMAX,NYMAX/NCPU,NZMAX),VV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C+++
C     1ST ORDER VERSION
CC      CALL LAP_U(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
CC     1     TRIGSX,TRIGSY,IFAX,V,LAPV,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
C+++      

      CALL LAP_U_2ND(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,V,LAPV,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ET(I,J)=W(I,J,NZ-1)-U(I,J,NZ)*EHX(I,J)-V(I,J,NZ)*EHY(I,J)
         ENDDO
      ENDDO

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               VU(I,J,K)=V(I,J,K)*U(I,J,K)
               VV(I,J,K)=V(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,VV,NCPU)
      
      DO K=2,NZ
         
         CALL PDFX_PARA(VU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(VV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(VU(I,J,3)+3.*VU(I,J,2)-4.*VU(I,J,1))
     1                 /(3.*DZ(2))
                  VFZ(I,J)=(VV(I,J,3)+3.*VV(I,J,2)-4.*VV(I,J,1))
     1                 /(3.*DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(V(I,J,3)+V(I,J,2))/2.
     1                 -W(I,J,1)*V(I,J,1))/(DZ(2)/2.+DZ(1))
                  FZ(I,J)=(V(I,J,3)+3.*V(I,J,2)-4.*V(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*V(I,J,K+1)-W(I,J,K-1)
     1                 *(V(I,J,K)+V(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(VU(I,J,NZ+1)-VU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(VV(I,J,NZ+1)-VV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*V(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*V(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(V(I,J,NZ+1)-V(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(VU(I,J,K+1)-VU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(VV(I,J,K+1)-VV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(V(I,J,K+1)+V(I,J,K))/2.
     1                 -W(I,J,K-1)*(V(I,J,K)+V(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(V(I,J,K+1)-V(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=(1-ZZ(K))*HT(I,J)-ZZ(K)*ET(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,TMP,NCPU)            
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=TMP(I,J)*HER(I,J)
            ENDDO
         ENDDO
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,TMP,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=TMP(I,J)*FZ(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *UFZ(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)+LAPV(I,J,K)/RE
               IF(ABS(TIME-DT).LE.1.E-8) HV(I,J,K)=HNEW
               FV(I,J,K)=(3.*HNEW-HV(I,J,K))/2.
               HV(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE FUN_V END HERE






C=======================================================================
      SUBROUTINE FUN_W_DNS_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     DZ,ZW,TIME,DT,RE,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,
     1     ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,NCPU)
      
      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,RE,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FW(NXMAX,NYMAX/NCPU,*),HW(NXMAX,NYMAX/NCPU,*)
      REAL LAPW(NXMAX,NYMAX/NCPU,NZMAX),NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL WU(NXMAX,NYMAX/NCPU,NZMAX),WV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)
      
      REAL ET(NXMAX,NYMAX/NCPU)

      CALL LAP_W(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            ET(I,J)=W(I,J,NZ-1)-U(I,J,NZ)*EHX(I,J)-V(I,J,NZ)*EHY(I,J)
         ENDDO
      ENDDO

      DO K=2,NZ-2
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               WU(I,J,K)=W(I,J,K)*(U(I,J,K)+U(I,J,K+1))/2.
               WV(I,J,K)=W(I,J,K)*(V(I,J,K)+V(I,J,K+1))/2.
            ENDDO
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,WV,NCPU)
      
      DO K=2,NZ-2
         
         CALL PDFX_PARA(WU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(WV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(K))
                  UFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*U(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*U(I,J,2))/DZ(2)
                  VFZ(I,J)=((W(I,J,3)+W(I,J,2))/2.*V(I,J,3)-(W(I,J,2)
     1                 +W(I,J,1))/2.*V(I,J,2))/DZ(2)
                  WFZ(I,J)=((W(I,J,3)+W(I,J,2))**2/4.-(W(I,J,2)+
     1                 W(I,J,1))**2/4.)/DZ(2)
               ELSE IF(K.EQ.NZ-2) THEN
                  FZ(I,J)=(W(I,J,K+1)-W(I,J,K-1))/(2.*DZ(NZ-2))
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(NZ-2)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(NZ-2)
               ELSE
                  FZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.-(W(I,J,K)
     1                 +W(I,J,K-1))/2.)/DZ(K)
                  UFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*U(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*U(I,J,K))/DZ(K)
                  VFZ(I,J)=((W(I,J,K+1)+W(I,J,K))/2.*V(I,J,K+1)-
     1                 (W(I,J,K)+W(I,J,K-1))/2.*V(I,J,K))/DZ(K)
                  WFZ(I,J)=((W(I,J,K+1)+W(I,J,K))**2/4.-(W(I,J,K)+
     1                 W(I,J,K-1))**2/4.)/DZ(K)
CC                  FZ(I,J)=((W(I,J,K+1)*DZ(K)+W(I,J,K)*DZ(K+1))/(DZ(K+1)
CC     1                 +DZ(K))-(W(I,J,K)*DZ(K-1)+W(I,J,K-1)*DZ(K))
CC     1                 /(DZ(K)+DZ(K-1)))/DZ(K)
CC                  UFZ(I,J)=((W(I,J,K+1)*DZ(K)+W(I,J,K)*DZ(K+1))/(DZ(K+1)
CC     1                 +DZ(K))*U(I,J,K+1)-(W(I,J,K)*DZ(K-1)+W(I,J,K-1)
CC     1                 *DZ(K))/(DZ(K)+DZ(K-1))*U(I,J,K))/DZ(K)
CC                  VFZ(I,J)=((W(I,J,K+1)*DZ(K)+W(I,J,K)*DZ(K+1))/(DZ(K+1)
CC     1                 +DZ(K))*V(I,J,K+1)-(W(I,J,K)*DZ(K-1)+W(I,J,K-1)
CC     1                 *DZ(K))/(DZ(K)+DZ(K-1))*V(I,J,K))/DZ(K)
CC                  WFZ(I,J)=(((W(I,J,K+1)*DZ(K)+W(I,J,K)*DZ(K+1))
CC     1                 /(DZ(K+1)+DZ(K)))**2-((W(I,J,K)*DZ(K-1)
CC     1                 +W(I,J,K-1)*DZ(K))/(DZ(K)+DZ(K-1)))**2)/DZ(K)
               ENDIF
               
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=(1-ZW(K))*HT(I,J)-ZW(K)*ET(I,J)
            ENDDO
         ENDDO
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               TMP(I,J)=TMP(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=TMP(I,J)*FZ(I,J)+(HXR(I,J)-ZW(K)*EXR(I,J))
     1              *UFZ(I,J)+(HYR(I,J)-ZW(K)*EYR(I,J))*VFZ(I,J)
            ENDDO
         ENDDO
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)+LAPW(I,J,K)/RE
               IF(ABS(TIME-DT).LE.1.E-8) HW(I,J,K)=HNEW
               FW(I,J,K)=(3.*HNEW-HW(I,J,K))/2.    
               HW(I,J,K)=HNEW
            ENDDO
         ENDDO
         
      ENDDO

      RETURN
      END

C=====SUBROUTINE FUN_W_DNS_WALLMODEL END HERE







C=====================================================================
      SUBROUTINE LAP_U(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

C     THIS VERSION USE 1ST ORDER SCHEME FOR D^2U/DZ^2 AT K=2

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL LAP_U_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-3
         CALL LAP_U_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL LAP_U_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_NZ(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      RETURN
      END

C-----------------------------------------------------------------------
      SUBROUTINE LAP_U_2ND(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

C     THIS VERSION USE 2ND ORDER SCHEME FOR D^2U/DZ^2 AT K=2

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL LAP_U_2_2ND(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-3
         CALL LAP_U_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL LAP_U_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_NZ(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      RETURN
      END


C-----------------------------------------------------------------------
      SUBROUTINE LAP_U_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NUT,NCPU)

C     THIS VERSION USE 1ST ORDER SCHEME FOR D^2U/DZ^2 AT K=2
C     FOR LES WALL MODEL

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*)
      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL NUT(NXMAX,NYMAX/NCPU,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL LAP_U_2_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

      CALL LAP_U_3_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1     ZZ,WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

      DO K=4,NZ-3
         CALL LAP_U_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1        WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL LAP_U_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_U_NZ(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,WORK,
     1     TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=2,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               LAPU(I,J,K)=LAPU(I,J,K)*NUT(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END


C-----------------------------------------------------------------------
      SUBROUTINE LAP_U_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

C     THIS VERSION ONLY USE 1ST ORDER SCHEME FOR D^2U/DZ^2 AT K=2

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),T6(NXMAX,NYMAX/NCPU)
      REAL T7(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,1),T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(U(I,J,4)-U(I,J,2))/2.
     1           /DZ(2)
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(HYR(I,J)-ZZ(1)*EYR(I,J))*(-U(I,J,3)+9.*U(I,J,2)
     1           -8.*U(I,J,1))/3./DZ(2)
            T7(I,J)=(T1(I,J)+3.*T2(I,J)-4.*T3(I,J)+T4(I,J)+3.*T5(I,J)
     1           -4.*T6(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T7,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T7(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T7(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,1),T3,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(U(I,J,4)-U(I,J,2))/2.
     1           /DZ(2)
            T5(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(HXR(I,J)-ZZ(1)*EXR(I,J))*(-U(I,J,3)+9.*U(I,J,2)
     1           -8.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(T1(I,J)+3.*T2(I,J)-4.*T3(I,J)+T4(I,J)+3.*T5(I,J)
     1           -4.*T6(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T6,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T6(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T6(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))/3./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,2),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,2),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(4.*U(I,J,3)-12.*U(I,J,2)+8.*U(I,J,1))
     1           /3./DZ(2)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,2)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T6(I,J)+T7(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,2),NCPU)
      
      RETURN
      END

C------------------------------------------------------------------------
      SUBROUTINE LAP_U_2_2ND(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

C     THIS VERSION USE 2ND ORDER SCHEME FOR D^2U/DZ^2 AT K=2

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),T6(NXMAX,NYMAX/NCPU)
      REAL T7(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,1),T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(U(I,J,4)-U(I,J,2))/2.
     1           /DZ(2)
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(HYR(I,J)-ZZ(1)*EYR(I,J))*(-U(I,J,3)+9.*U(I,J,2)
     1           -8.*U(I,J,1))/3./DZ(2)
            T7(I,J)=(T1(I,J)+3.*T2(I,J)-4.*T3(I,J)+T4(I,J)+3.*T5(I,J)
     1           -4.*T6(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T7,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T7(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T7(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,1),T3,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(U(I,J,4)-U(I,J,2))/2.
     1           /DZ(2)
            T5(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(HXR(I,J)-ZZ(1)*EXR(I,J))*(-U(I,J,3)+9.*U(I,J,2)
     1           -8.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(T1(I,J)+3.*T2(I,J)-4.*T3(I,J)+T4(I,J)+3.*T5(I,J)
     1           -4.*T6(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T6,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T6(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T6(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))/3./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,2),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,2),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(-U(I,J,4)+10.*U(I,J,3)-25.*U(I,J,2)
     *           +16*U(I,J,1))/(5.*DZ(2)**2)
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,2)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T6(I,J)+T7(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,2),NCPU)
      
      RETURN
      END


C-----------------------------------------------------------------------
      SUBROUTINE LAP_U_2_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C     THIS VERSION ONLY USE 1ST ORDER SCHEME FOR D^2U/DZ^2 AT K=2

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU),T6(NXMAX,NYMAX/NCPU)
      REAL T7(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,1),T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*(U(I,J,4)-U(I,J,2))/2.
     1           /DZ(2)
            T5(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(HYR(I,J)-ZZ(1)*EYR(I,J))*(-U(I,J,3)+9.*U(I,J,2)
     1           -8.*U(I,J,1))/3./DZ(2)
            T7(I,J)=(T1(I,J)+3.*T2(I,J)-4.*T3(I,J)+T4(I,J)+3.*T5(I,J)
     1           -4.*T6(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T7,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T7(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T7(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,1),T3,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*(U(I,J,4)-U(I,J,2))/2.
     1           /DZ(2)
            T5(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(HXR(I,J)-ZZ(1)*EXR(I,J))*(-U(I,J,3)+9.*U(I,J,2)
     1           -8.*U(I,J,1))/3./DZ(2)
            T6(I,J)=(T1(I,J)+3.*T2(I,J)-4.*T3(I,J)+T4(I,J)+3.*T5(I,J)
     1           -4.*T6(I,J))/3./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T6,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T6(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T6(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))/3./DZ(2)
            T2(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,2),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,2),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

CC      DO I=1,NXMOD
CC         DO J=1,NYMAX/NCPU
CC            T1(I,J)=HER(I,J)*(4.*U(I,J,3)-12.*U(I,J,2)+8.*U(I,J,1))
CC     1           /3./DZ(2)**2
CC         ENDDO
CC      ENDDO
CC      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
CC     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
CC            T1(I,J)=HER(I,J)*T1(I,J)
CC            LAPU(I,J,2)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
CC     1           +T6(I,J)+T7(I,J)
            LAPU(I,J,2)=UXX(I,J)+UYY(I,J)+T2(I,J)+T3(I,J)+T6(I,J)
     1           +T7(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,2),NCPU)
      
      RETURN
      END



C------------------------------------------------------------------------
      SUBROUTINE LAP_U_3_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZZ,WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(U(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(4)*EYR(I,J))*(U(I,J,5)-U(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
CC            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(U(I,J,3)-U(I,J,2))/DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(2)+DZ(3))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(4)*EXR(I,J))*(U(I,J,5)-U(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
CC            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(U(I,J,3)-U(I,J,2))/DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(2)+DZ(3))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,4)-U(I,J,2))/(DZ(2)+DZ(3))
            T2(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,3),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,3),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*((U(I,J,4)-U(I,J,3))/DZ(3)-(U(I,J,3)
     1           -U(I,J,2))/DZ(2))*2./(DZ(2)+DZ(3))
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,3)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,3),NCPU)
      
      RETURN
      END


C------------------------------------------------------------------------
      SUBROUTINE LAP_U_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(U(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(4)*EYR(I,J))*(U(I,J,5)-U(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HYR(I,J)-ZZ(2)*EYR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(2)+DZ(3))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(4)*EXR(I,J))*(U(I,J,5)-U(I,J,3))
     1           /(DZ(3)+DZ(4))
            T4(I,J)=(HXR(I,J)-ZZ(2)*EXR(I,J))*(U(I,J,3)+3.*U(I,J,2)
     1           -4.*U(I,J,1))/3./DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(2)+DZ(3))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,4)-U(I,J,2))/(DZ(2)+DZ(3))
            T2(I,J)=(HXR(I,J)-ZZ(3)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(3)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,3),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,3),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*((U(I,J,4)-U(I,J,3))/DZ(3)-(U(I,J,3)
     1           -U(I,J,2))/DZ(2))*2./(DZ(2)+DZ(3))
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,3)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,3),NCPU)
      
      RETURN
      END


C------------------------------------------------------------------------
      SUBROUTINE LAP_U_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

C     K=4,NZ-3
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(U(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(K+1)*EYR(I,J))*(U(I,J,K+2)-U(I,J,K))
     1           /(DZ(K)+DZ(K+1))
            T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(U(I,J,K)-U(I,J,K-2))
     1           /(DZ(K-2)+DZ(K-1))
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K))
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(K+1)*EXR(I,J))*(U(I,J,K+2)-U(I,J,K))
     1           /(DZ(K)+DZ(K+1))
            T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(U(I,J,K)-U(I,J,K-2))
     1           /(DZ(K-2)+DZ(K-1))
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/(DZ(K-1)+DZ(K))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K-1)+DZ(K))
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)

         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,K),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,K),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*((U(I,J,K+1)-U(I,J,K))/DZ(K)-(U(I,J,K)
     1           -U(I,J,K-1))/DZ(K-1))*2./(DZ(K-1)+DZ(K))
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,K)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,K),NCPU)
      
      RETURN
      END


C----------------------------------------------------------------------------
      SUBROUTINE LAP_U_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      K=NZ-2

      CALL PDFY_PARA(U(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(K+1)*EYR(I,J))*(U(I,J,K+3)-U(I,J,K))
     1           /2./DZ(K)
            T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(U(I,J,K)-U(I,J,K-2))
     1           /2./DZ(K)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(K+1)*EXR(I,J))*(U(I,J,K+3)-U(I,J,K))
     1           /2./DZ(K)
            T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(U(I,J,K)-U(I,J,K-2))
     1           /2./DZ(K)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,K+1)-U(I,J,K-1))/2./DZ(K)
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,K),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,K),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(U(I,J,K+1)-2.*U(I,J,K)+U(I,J,K-1))
     1           /DZ(K)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,K)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,K),NCPU)
      
      RETURN
      END


C-------------------------------------------------------------------------
      SUBROUTINE LAP_U_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      K=NZ-1

      CALL PDFY_PARA(U(1,1,K+2),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(K+2)*EYR(I,J))*(3.*U(I,J,K+2)
     1           -4.*U(I,J,K+1)+U(I,J,K))/DZ(K-1)
            T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(U(I,J,K)-U(I,J,K-2))
     1           /2./DZ(K-1)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,K+2),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(K+2)*EXR(I,J))*(3.*U(I,J,K+2)
     1           -4.*U(I,J,K+1)+U(I,J,K))/DZ(K-1)
            T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(U(I,J,K)-U(I,J,K-2))
     1           /2./DZ(K-1)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,K+2)-U(I,J,K-1))/2./DZ(K-1)
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,K),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,K),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(U(I,J,K+2)-2.*U(I,J,K)+U(I,J,K-1))
     1           /DZ(K-1)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,K)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,K),NCPU)
      
      RETURN
      END


C-------------------------------------------------------------------------
      SUBROUTINE LAP_U_NZ(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZZ,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,LAPU,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPU(NXMAX,NYMAX/NCPU,*),U(NXMAX,NYMAX/NCPU,*)
      REAL UXX(NXMAX,NYMAX/NCPU),UYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZZ(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      K=NZ

      CALL PDFY_PARA(U(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZZ(K+1)*EYR(I,J))*(3.*U(I,J,K+1)
     1           -4.*U(I,J,K)+U(I,J,K-1))/DZ(K-2)
            T4(I,J)=(HYR(I,J)-ZZ(K-1)*EYR(I,J))*(U(I,J,K+1)-U(I,J,K-2))
     1           /2./DZ(K-2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/DZ(K-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(U(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(U(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZZ(K+1)*EXR(I,J))*(3.*U(I,J,K+1)
     1           -4.*U(I,J,K)+U(I,J,K-1))/DZ(K-2)
            T4(I,J)=(HXR(I,J)-ZZ(K-1)*EXR(I,J))*(U(I,J,K+1)-U(I,J,K-2))
     1           /2./DZ(K-2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/DZ(K-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(U(I,J,K+1)-U(I,J,K-1))/DZ(K-2)
            T2(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZZ(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(U(1,1,K),UXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(U(1,1,K),UYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(U(I,J,K+1)-2.*U(I,J,K)+U(I,J,K-1))
     1           /(DZ(K-2)/2.)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPU(I,J,K)=UXX(I,J)+UYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPU(1,1,K),NCPU)
      
      RETURN
      END

C=====SUBROUTINE GROUP LAP_U END HERE





C======================================================================
      SUBROUTINE LAP_W(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

C     USE NEWMANN BC AT FREE SURFACE, DIRICHLET BC AT BOTTOM

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL LAP_W_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_W_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-4
         CALL LAP_W_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1        WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL LAP_W_NZ3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_W_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_W_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      RETURN
      END


C--------------------------------------------------------------------------
      SUBROUTINE LAP_W_DD(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

C     USE DIRICHLET BC BOTH AT FREE SURFACE AND AT BOTTOM

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL LAP_W_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_W_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-4
         CALL LAP_W_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1        WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL LAP_W_NZ3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_W_NZ2_DD(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      RETURN
      END


C------------------------------------------------------------------------
      SUBROUTINE LAP_W_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,
     1     DZ,ZW,WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,
     1     HER,NUTW,NCPU)

C     USE NEWMANN BC AT FREE SURFACE, DIRICHLET BC AT BOTTOM

      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZW(*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      
      CALL LAP_W_2_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,
     1     ZW,WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,
     1     NCPU)

      CALL LAP_W_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=4,NZ-4
         CALL LAP_W_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1        WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,
     1        NCPU)
      ENDDO
      
      CALL LAP_W_NZ3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      CALL LAP_W_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

CC      CALL LAP_W_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,WORK,
CC     1     TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)

      DO K=2,NZ-1
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               LAPW(I,J,K)=LAPW(I,J,K)*NUTW(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END


C----------------------------------------------------------------------
      SUBROUTINE LAP_W_2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1     WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(W(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(3)*EYR(I,J))*(W(I,J,4)-W(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HYR(I,J)-ZW(1)*EYR(I,J))*(-W(I,J,3)+4.*W(I,J,2)
     1           -3.*W(I,J,1))/2./DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(3)*EXR(I,J))*(W(I,J,4)-W(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HXR(I,J)-ZW(1)*EXR(I,J))*(-W(I,J,3)+4.*W(I,J,2)
     1           -3.*W(I,J,1))/2./DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,3)-W(I,J,1))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZW(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,2),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,2),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(W(I,J,3)-2.*W(I,J,2)+W(I,J,1))/DZ(2)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,2)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,2),NCPU)
      
      RETURN
      END


C----------------------------------------------------------------------
      SUBROUTINE LAP_W_2_LES_WALLMODEL(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,
     1     PEY,DZ,ZW,WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(W(1,1,3),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(3)*EYR(I,J))*(W(I,J,4)-W(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HYR(I,J)-ZW(1)*EYR(I,J))*(-W(I,J,3)+4.*W(I,J,2)
     1           -3.*W(I,J,1))/2./DZ(2)
CC            T4(I,J)=(HYR(I,J)-ZW(1)*EYR(I,J))*(W(I,J,2)-W(I,J,1))/DZ(2)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(2)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,3),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(3)*EXR(I,J))*(W(I,J,4)-W(I,J,2))/2.
     1           /DZ(2)
            T4(I,J)=(HXR(I,J)-ZW(1)*EXR(I,J))*(-W(I,J,3)+4.*W(I,J,2)
     1           -3.*W(I,J,1))/2./DZ(2)
CC            T4(I,J)=(HXR(I,J)-ZW(1)*EXR(I,J))*(W(I,J,2)-W(I,J,1))/DZ(2)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(2)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,3)-W(I,J,1))/2./DZ(2)
            T2(I,J)=(HXR(I,J)-ZW(2)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(2)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,2),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,2),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(W(I,J,3)-2.*W(I,J,2)+W(I,J,1))/DZ(2)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,2)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,2),NCPU)
      
      RETURN
      END



C-----------------------------------------------------------------------
      SUBROUTINE LAP_W_3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1     WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(W(1,1,4),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,2),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(4)*EYR(I,J))*(W(I,J,5)-W(I,J,3))
     1           /(DZ(3)/2.+DZ(4)+DZ(5)/2.)
            T4(I,J)=(HYR(I,J)-ZW(2)*EYR(I,J))*(W(I,J,3)-W(I,J,1))
     1           /(3./2.*DZ(2)+DZ(3)/2.)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))
     1           /(DZ(2)/2.+DZ(3)+DZ(4)/2.)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(3)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,4),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,2),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(4)*EXR(I,J))*(W(I,J,5)-W(I,J,3))
     1           /(DZ(3)/2.+DZ(4)+DZ(5)/2.)
            T4(I,J)=(HXR(I,J)-ZW(2)*EXR(I,J))*(W(I,J,3)-W(I,J,1))
     1           /(3./2.*DZ(2)+DZ(3)/2.)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))
     1           /(DZ(2)/2.+DZ(3)+DZ(4)/2.)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(3)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,4)-W(I,J,2))/(DZ(2)/2.+DZ(3)+DZ(4)/2.)
            T2(I,J)=(HXR(I,J)-ZW(3)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(3)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,3),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,3),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*((W(I,J,4)-W(I,J,3))*2./(DZ(3)+DZ(4))
     1           -(W(I,J,3)-W(I,J,2))*2./(DZ(2)+DZ(3)))/DZ(3)
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,3)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,3),NCPU)
      
      RETURN
      END



C-----------------------------------------------------------------------
      SUBROUTINE LAP_W_K(K,NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1     WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      CALL PDFY_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(K+1)*EYR(I,J))*(W(I,J,K+2)-W(I,J,K))
     1           /(DZ(K)/2.+DZ(K+1)+DZ(K+2)/2.)
            T4(I,J)=(HYR(I,J)-ZW(K-1)*EYR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /(DZ(K-2)/2.+DZ(K-1)+DZ(K)/2.)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))
     1           /(DZ(K-1)/2.+DZ(K)+DZ(K+1)/2.)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(K+1)*EXR(I,J))*(W(I,J,K+2)-W(I,J,K))
     1           /(DZ(K)/2.+DZ(K+1)+DZ(K+2)/2.)
            T4(I,J)=(HXR(I,J)-ZW(K-1)*EXR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /(DZ(K-2)/2.+DZ(K-1)+DZ(K)/2.)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))
     1           /(DZ(K-1)/2.+DZ(K)+DZ(K+1)/2.)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,K+1)-W(I,J,K-1))
     1           /(DZ(K-1)/2.+DZ(K)+DZ(K+1)/2.)
            T2(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,K),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,K),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*((W(I,J,K+1)-W(I,J,K))*2./(DZ(K)+DZ(K+1))
     1           -(W(I,J,K)-W(I,J,K-1))*2./(DZ(K-1)+DZ(K)))/DZ(K)
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,K)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,K),NCPU)
      
      RETURN
      END


C-------------------------------------------------------------------------
      SUBROUTINE LAP_W_NZ3(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1     WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      K=NZ-3

      CALL PDFY_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(K+1)*EYR(I,J))*(W(I,J,K+2)-W(I,J,K))
     1           /(DZ(K)/2.+DZ(K+1)*3./2.)
            T4(I,J)=(HYR(I,J)-ZW(K-1)*EYR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /(DZ(K-2)/2.+DZ(K-1)+DZ(K)/2.)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))
     1           /(DZ(K-1)/2.+DZ(K)+DZ(K+1)/2.)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(K+1)*EXR(I,J))*(W(I,J,K+2)-W(I,J,K))
     1           /(DZ(K)/2.+DZ(K+1)*3./2.)
            T4(I,J)=(HXR(I,J)-ZW(K-1)*EXR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /(DZ(K-2)/2.+DZ(K-1)+DZ(K)/2.)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))
     1           /(DZ(K-1)/2.+DZ(K)+DZ(K+1)/2.)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,K+1)-W(I,J,K-1))
     1           /(DZ(K-1)/2.+DZ(K)+DZ(K+1)/2.)
            T2(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,K),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,K),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*((W(I,J,K+1)-W(I,J,K))*2./(DZ(K)+DZ(K+1))
     1           -(W(I,J,K)-W(I,J,K-1))*2./(DZ(K-1)+DZ(K)))/DZ(K)
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,K)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,K),NCPU)
      
      RETURN
      END



C------------------------------------------------------------------------
      SUBROUTINE LAP_W_NZ2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1     WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      K=NZ-2

      CALL PDFY_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(K+1)*EYR(I,J))*(W(I,J,K+2)-W(I,J,K))
     1           /2./DZ(K)
            T4(I,J)=(HYR(I,J)-ZW(K-1)*EYR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /2./DZ(K)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(K+1)*EXR(I,J))*(W(I,J,K+2)-W(I,J,K))
     1           /2./DZ(K)
            T4(I,J)=(HXR(I,J)-ZW(K-1)*EXR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /2./DZ(K)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,K+1)-W(I,J,K-1))/2./DZ(K)
            T2(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,K),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,K),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(W(I,J,K+1)-2.*W(I,J,K)+W(I,J,K-1))
     1           /DZ(K)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,K)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,K),NCPU)
      
      RETURN
      END


C------------------------------------------------------------------------
      SUBROUTINE LAP_W_NZ2_DD(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1     WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      K=NZ-2

      CALL PDFY_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(K+1)*EYR(I,J))*(3.*W(I,J,K+1)-4.
     1           *W(I,J,K)+W(I,J,K-1))/2./DZ(K)
            T4(I,J)=(HYR(I,J)-ZW(K-1)*EYR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /2./DZ(K)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(K+1)*EXR(I,J))*(3.*W(I,J,K+1)-4.
     1           *W(I,J,K)+W(I,J,K-1))/2./DZ(K)
            T4(I,J)=(HXR(I,J)-ZW(K-1)*EXR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /2./DZ(K)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,K+1)-W(I,J,K-1))/2./DZ(K)
            T2(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,K),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,K),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(W(I,J,K+1)-2.*W(I,J,K)+W(I,J,K-1))
     1           /DZ(K)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,K)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,K),NCPU)
      
      RETURN
      END


C----------------------------------------------------------------------
      SUBROUTINE LAP_W_NZ1(NXMOD,NYMOD,NZ,NXMAX,NYMAX,PEX,PEY,DZ,ZW,
     1     WORK,TRIGSX,TRIGSY,IFAX,W,LAPW,HBAR,EXR,EYR,HXR,HYR,HER,NCPU)
      
      IMPLICIT NONE

      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NZ,NCPU
      
      REAL PEX,PEY,HBAR

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL LAPW(NXMAX,NYMAX/NCPU,*),W(NXMAX,NYMAX/NCPU,*)
      REAL WXX(NXMAX,NYMAX/NCPU),WYY(NXMAX,NYMAX/NCPU)
      REAL EXR(NXMAX,NYMAX/NCPU),EYR(NXMAX,NYMAX/NCPU)
      REAL HER(NXMAX,NYMAX/NCPU)
      REAL HXR(NXMAX,NYMAX/NCPU),HYR(NXMAX,NYMAX/NCPU)
      REAL T1(NXMAX,NYMAX/NCPU),T2(NXMAX,NYMAX/NCPU)
      REAL T3(NXMAX,NYMAX/NCPU),T4(NXMAX,NYMAX/NCPU)
      REAL T5(NXMAX,NYMAX/NCPU)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL DZ(*),ZW(*)
      INTEGER IFAX(*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      K=NZ-1

      CALL PDFY_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HYR(I,J)-ZW(K+1)*EYR(I,J))*(3.*W(I,J,K+1)-4.
     1           *W(I,J,K)+W(I,J,K-1))/2./DZ(K-1)
            T4(I,J)=(HYR(I,J)-ZW(K-1)*EYR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /2./DZ(K-1)
            T5(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T5,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T5(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T5(I,J)
         ENDDO
      ENDDO

CC

      CALL PDFX_PARA(W(1,1,K+1),T1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,K-1),T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            T3(I,J)=(HXR(I,J)-ZW(K+1)*EXR(I,J))*(3.*W(I,J,K+1)-4.
     1           *W(I,J,K)+W(I,J,K-1))/2./DZ(K-1)
            T4(I,J)=(HXR(I,J)-ZW(K-1)*EXR(I,J))*(W(I,J,K)-W(I,J,K-2))
     1           /2./DZ(K-1)
            T4(I,J)=(T1(I,J)-T2(I,J)+T3(I,J)-T4(I,J))/2./DZ(K-1)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T4,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T4(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T4(I,J)
         ENDDO
      ENDDO

CC

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=(W(I,J,K+1)-W(I,J,K-1))/2./DZ(K-1)
            T2(I,J)=(HXR(I,J)-ZW(K)*EXR(I,J))*T1(I,J)
            T3(I,J)=(HYR(I,J)-ZW(K)*EYR(I,J))*T1(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T2,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T3,NCPU)

      CALL PDFX_PARA_(T2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFY_PARA_(T3,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,NYMOD,
     1     NXMAX,NYMAX,NCPU)

CC

      CALL PDFXX_PARA(W(1,1,K),WXX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFYY_PARA(W(1,1,K),WYY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1     NYMOD,NXMAX,NYMAX,NCPU)

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*(W(I,J,K+1)-2.*W(I,J,K)+W(I,J,K-1))
     1           /DZ(K-1)**2
         ENDDO
      ENDDO
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T1,NCPU)
      
      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T1(I,J)=HER(I,J)*T1(I,J)
            LAPW(I,J,K)=WXX(I,J)+WYY(I,J)+T1(I,J)+T2(I,J)+T3(I,J)
     1           +T4(I,J)+T5(I,J)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,LAPW(1,1,K),NCPU)
      
      RETURN
      END

C=====SUBROUTINE GROUP LAP_W END HERE







C============================================================================
      SUBROUTINE SPECTKX(NXMOD,NYMOD,NXMAX,NYMAX,PEX,WORK,TRIGSX,TRIGSY,
     1     IFAX,F,SXF,NCPU)
C
C Compute 1-D spectrum in x-direction
C Average in y-direction

      IMPLICIT NONE

      INTEGER NXMOD,NYMOD,NXMAX,NYMAX,N1MAX,I,J,N,L,M,LP1
      REAL PEX,DWKX,FTN,CON

      INTEGER JJ1,JJ2,NYEND,NCREQ,NCPU

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STATUS(MPI_STATUS_SIZE)     
C
      REAL FT(NXMAX,NYMAX/NCPU),F(NXMAX,*)
      REAL SXF(NXMAX),SXF_ALL(NXMAX)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
C

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      N1MAX=NXMOD/2-1
      DWKX=PEX

      JJ1=NYMAX/NCPU-(NYMAX-NYMOD)+1
      JJ2=NYMAX/NCPU
      IF(MYID.EQ.NCPU-1) THEN
         NYEND=JJ1-1
      ELSE
         NYEND=JJ2
      ENDIF

      DO I=1,NXMAX
         DO J=1,NYMAX/NCPU
            FT(I,J)=F(I,J)
         ENDDO
      ENDDO

C-Compute spectrum
      CALL FFTX_PARA(FT,WORK,TRIGSX,IFAX,NXMOD,NXMAX,NYMAX,NCPU,-1)
C
      DO N=1,N1MAX
         SXF(N)=0.
      ENDDO
C
      IF(NYEND.EQ.0) GOTO 999

      DO L=1,NXMOD-1,2
         LP1=L+1
         DO M=1,NYEND
            N=(L+1)/2
            FTN=FT(L,M)**2+FT(LP1,M)**2
            CON=2.
            IF(L.EQ.1) CON=1.
            SXF(N)=SXF(N)+CON*FTN/DWKX
         ENDDO
      ENDDO

 999  CONTINUE
C

C-----------------------------
C     AVERAGE AMONG CPUS
C-----------------------------

      DO N=1,N1MAX
         SXF_ALL(N)=0.
         CALL MPI_ALLREDUCE(SXF(N),SXF_ALL(N),1,MPI_DOUBLE_PRECISION,
     1        MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)
      ENDDO

      DO N=1,N1MAX
         SXF(N)=SXF_ALL(N)
      ENDDO

C-----END HERE

C---------------------------
C     OUTPUT SPECTRUM
C---------------------------
      
CC      IF(MYID.EQ.0) THEN
CC         DO N=1,N1MAX
CC            WRITE(100,*) (N-1)*DWKX,SXF(N)
CC         ENDDO
CC      ENDIF

C-----END HERE

      RETURN
      END

C=====SUBROUTINE SPECTKX END HERE







C=====================================================================
      SUBROUTINE FUN_U_LES8_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,
     1     ZZ,TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,
     1     PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,
     1     S12,S13W,NUT,NUTW,TAUWX,WTFORCE,TIMETURB,ITURBINE)

C     BY DI YANG, NOV 2010

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL T11(NXMAX,NYMAX/NCPU,NZMAX),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11X(NXMAX,NYMAX/NCPU),T12Y(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),S13W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)

      INTEGER ITURBINE
      REAL TIMETURB
      REAL WTFORCE(NXMAX,NYMAX/NCPU,*)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,1),T13_1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)-(3.*NUT(I,J,2)-NUT(I,J,3))/2.
     1           *(T13_1(I,J)+(HXR(I,J)-ZZ(1)*EXR(I,J))
     1           *(W(I,J,2)-W(I,J,1))/DZ(2))
            T13_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*(T13_2(I,J)+(HXR(I,J)
     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_1,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_2,NCPU)

C-----END HERE

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)

      DO K=1,NZMAX
         DO I=1,NXMOD 
            DO J=1,NYMAX/NCPU
               UU(I,J,K)=U(I,J,K)*U(I,J,K)
               UV(I,J,K)=U(I,J,K)*V(I,J,K)
            ENDDO
         ENDDO
      ENDDO
      
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UU,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,UV,NCPU)
      
      DO K=2,NZ-1
         
         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               
               IF(K.EQ.2) THEN
                  UFZ(I,J)=(UU(I,J,3)+3.*UU(I,J,2)-4.*UU(I,J,1))
     1                 /(3.*DZ(2))
                  VFZ(I,J)=(UV(I,J,3)+3.*UV(I,J,2)-4.*UV(I,J,1))
     1                 /(3.*DZ(2))
                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
     1                 -W(I,J,1)*U(I,J,1))/(DZ(2)/2.+DZ(1))
                  FZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
     1                 /(3.*DZ(2))
               ELSE IF(K.EQ.(NZ-1)) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
     1                 /DZ(NZ-2)
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
     1                 /(DZ(K)/2.+DZ(K-1)/2.)
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               WFZ(I,J)=WFZ(I,J)*HER(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
     1              +ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO
         
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,NL,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,3)-T11(I,J,2))/DZ(2)
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
     1                 +HER(I,J)*(T13_2(I,J)-T13_1(I,J))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K)-T11(I,J,K-1))/(2.*DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K)-T12(I,J,K-1))/(2.*DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))/DZ(K-1)
               ELSE
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K+1)-T11(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K+1)-T12(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))
     1                 /(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-6) HU(I,J,K)=HNEW
               IF(ITURBINE.EQ.0.OR.TIME.LE.TIMETURB) THEN
                  FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               ELSE
                  FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
     1                 +WTFORCE(I,J,K)*(1.-EXP(-0.1*(TIME-TIMETURB)**2))
               ENDIF
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES8_TURBINE END HERE








C=====================================================================
      SUBROUTINE FUN_U_LES8_TURBINE_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     DZ,ZZ,TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,
     1     PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,
     1     S12,S13W,NUT,NUTW,TAUWX,WTFORCE,TIMETURB,ITURBINE)

C     BY DI YANG, JUNE 2012

C     FOR LES
C     IGNORE VISCOUS TERMS

      IMPLICIT NONE
      
      INTEGER I,J,K
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL TIME,DT,BFORCE,PEX,PEY,HBAR,HNEW

      INCLUDE "mpif.h"
      
      INTEGER MYID,NUMPROCS,IERR
      
      REAL FU(NXMAX,NYMAX/NCPU,*),HU(NXMAX,NYMAX/NCPU,*)
      REAL NL(NXMAX,NYMAX/NCPU)
      REAL U(NXMAX,NYMAX/NCPU,*),V(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*)
      REAL UU(NXMAX,NYMAX/NCPU,NZMAX),UV(NXMAX,NYMAX/NCPU,NZMAX)
      REAL UFX(NXMAX,NYMAX/NCPU),VFY(NXMAX,NYMAX/NCPU)
      REAL WFZ(NXMAX,NYMAX/NCPU)
      REAL UFZ(NXMAX,NYMAX/NCPU),VFZ(NXMAX,NYMAX/NCPU)
      REAL FZ(NXMAX,NYMAX/NCPU)
      REAL TMP(NXMAX,NYMAX/NCPU)
      REAL DZ(*),ZZ(*)
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL EHX(NXMAX,*),EHY(NXMAX,*)
      REAL HER(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL HT(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,*)
      REAL ATMP(NXMAX,NYMAX/NCPU)
      REAL NUT(NXMAX,NYMAX/NCPU,*)
      REAL S11(NXMAX,NYMAX/NCPU,*),S12(NXMAX,NYMAX/NCPU,*)
      REAL T11(NXMAX,NYMAX/NCPU,NZMAX),T12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL T11X(NXMAX,NYMAX/NCPU),T12Y(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,*)
      REAL T13_1(NXMAX,NYMAX/NCPU),T13_2(NXMAX,NYMAX/NCPU)
      REAL T13W(NXMAX,NYMAX/NCPU,NZMAX),S13W(NXMAX,NYMAX/NCPU,*)
      REAL NUTW(NXMAX,NYMAX/NCPU,*),TSGS(NXMAX,NYMAX/NCPU)

      INTEGER ITURBINE
      REAL TIMETURB
      REAL WTFORCE(NXMAX,NYMAX/NCPU,*)

      REAL WW,FT(NXMAX,NYMAX/NCPU)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------
C     APPLY WALL MODEL
C---------------------------

      CALL PDFX_PARA(W(1,1,1),T13_1,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1     NXMAX,NYMAX,NCPU)
c$$$      CALL PDFX_PARA(W(1,1,2),T13_2,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
c$$$     1     NXMAX,NYMAX,NCPU)
      
      DO J=1,NYMAX/NCPU
         DO I=1,NXMOD
            T13_1(I,J)=TAUWX(I,J)-NUT(I,J,1)
     1           *(T13_1(I,J)+(HXR(I,J)-ZZ(1)*EXR(I,J))
     1           *(W(I,J,2)-W(I,J,1))/DZ(2))
c$$$            T13_2(I,J)=-(NUT(I,J,2)+NUT(I,J,3))/2.*(T13_2(I,J)+(HXR(I,J)
c$$$     1           -(ZZ(2)+DZ(2)/2.)*EXR(I,J))
c$$$     1           *(W(I,J,3)-W(I,J,1))/(2.*DZ(2))
c$$$     1           +HER(I,J)*(U(I,J,3)-U(I,J,2))/DZ(2))
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
     1     IFAX,T13_1,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,TRIGSY,
c$$$     1     IFAX,T13_2,NCPU)

C-----END HERE

      DO K=2,NZ-1
         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               T11(I,J,K)=-2.*NUT(I,J,K)*S11(I,J,K)
               T12(I,J,K)=-2.*NUT(I,J,K)*S12(I,J,K)
               T13W(I,J,K)=-2.*NUTW(I,J,K)*S13W(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXMOD
         DO J=1,NYMAX/NCPU
            T11(I,J,NZ+1)=T11(I,J,NZ-1)
            T12(I,J,NZ+1)=T12(I,J,NZ-1)
            T13W(I,J,NZ)=-T13W(I,J,NZ-2)
         ENDDO
      ENDDO

      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T11,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T12,NCPU)
      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,T13W,NCPU)

c$$$      DO K=1,NZMAX
c$$$         DO I=1,NXMOD 
c$$$            DO J=1,NYMAX/NCPU
c$$$               UU(I,J,K)=U(I,J,K)*U(I,J,K)
c$$$               UV(I,J,K)=U(I,J,K)*V(I,J,K)
c$$$            ENDDO
c$$$         ENDDO
c$$$      ENDDO
c$$$      
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,UU,NCPU)
c$$$      CALL DEALIASXY_PARA(NXMOD,NYMOD,NZMAX,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1     TRIGSY,IFAX,UV,NCPU)
c$$$      
c$$$      DO K=2,NZ-1
c$$$         
c$$$         CALL PDFX_PARA(UU(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
c$$$     1        NXMAX,NYMAX,NCPU)
c$$$         
c$$$         CALL PDFY_PARA(UV(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
c$$$     1        NYMOD,NXMAX,NYMAX,NCPU)
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               
c$$$               IF(K.EQ.2) THEN
c$$$                  UFZ(I,J)=(UU(I,J,3)+3.*UU(I,J,2)-4.*UU(I,J,1))
c$$$     1                 /(3.*DZ(2))
c$$$                  VFZ(I,J)=(UV(I,J,3)+3.*UV(I,J,2)-4.*UV(I,J,1))
c$$$     1                 /(3.*DZ(2))
c$$$                  WFZ(I,J)=(W(I,J,2)*(U(I,J,3)+U(I,J,2))/2.
c$$$     1                 -W(I,J,1)*U(I,J,1))/(DZ(2)/2.+DZ(1))
c$$$                  FZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
c$$$     1                 /(3.*DZ(2))
c$$$               ELSE IF(K.EQ.(NZ-1)) THEN
c$$$                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-2))/(2.*DZ(NZ-2))
c$$$                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-2))/(2.*DZ(NZ-2))
c$$$                  WFZ(I,J)=(W(I,J,K)*U(I,J,NZ)-W(I,J,K-1)
c$$$     1                 *(U(I,J,K)+U(I,J,K-1))/2.)/DZ(NZ-2)
c$$$                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
c$$$               ELSE IF(K.EQ.NZ) THEN
c$$$                  UFZ(I,J)=(UU(I,J,NZ+1)-UU(I,J,NZ-1))/DZ(NZ-2)
c$$$                  VFZ(I,J)=(UV(I,J,NZ+1)-UV(I,J,NZ-1))/DZ(NZ-2)
c$$$                  WFZ(I,J)=((W(I,J,NZ)+W(I,J,NZ-1))/2.*U(I,J,NZ+1)
c$$$     1                 -(W(I,J,NZ-1)+W(I,J,NZ-2))/2.*U(I,J,NZ-1))
c$$$     1                 /DZ(NZ-2)
c$$$                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
c$$$               ELSE
c$$$                  UFZ(I,J)=(UU(I,J,K+1)-UU(I,J,K-1))/(DZ(K)+DZ(K-1))
c$$$                  VFZ(I,J)=(UV(I,J,K+1)-UV(I,J,K-1))/(DZ(K)+DZ(K-1))
c$$$                  WFZ(I,J)=(W(I,J,K)*(U(I,J,K+1)+U(I,J,K))/2.
c$$$     1                 -W(I,J,K-1)*(U(I,J,K)+U(I,J,K-1))/2.)
c$$$     1                 /(DZ(K)/2.+DZ(K-1)/2.)
c$$$                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
c$$$               ENDIF
c$$$               
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,UFZ,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,VFZ,NCPU)
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,WFZ,NCPU)
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               WFZ(I,J)=WFZ(I,J)*HER(I,J)
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,WFZ,NCPU)
c$$$         
c$$$         DO I=1,NXMOD
c$$$            DO J=1,NYMAX/NCPU
c$$$               NL(I,J)=(HXR(I,J)-ZZ(K)*EXR(I,J))*UFZ(I,J)
c$$$     1              +(HYR(I,J)-ZZ(K)*EYR(I,J))*VFZ(I,J)
c$$$     1              +ET(I,J,K)*FZ(I,J)
c$$$            ENDDO
c$$$         ENDDO
c$$$         
c$$$         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
c$$$     1        TRIGSY,IFAX,NL,NCPU)

      DO K=2,NZ-1
         
         CALL PDFX_PARA(U(1,1,K),UFX,FTMP,WORK,TRIGSX,IFAX,PEX,NXMOD,
     1        NXMAX,NYMAX,NCPU)
         
         CALL PDFY_PARA(U(1,1,K),VFY,FTMP,WORK,TRIGSY,IFAX,PEY,NXMOD,
     1        NYMOD,NXMAX,NYMAX,NCPU)

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
               IF(K.EQ.2) THEN
CC                  FZ(I,J)=(U(I,J,3)+3.*U(I,J,2)-4.*U(I,J,1))
CC     1                 /(3.*DZ(2))
                  FZ(I,J)=(U(I,J,3)-U(I,J,2))/DZ(2)
CC                  FZ(I,J)=(U(I,J,2)-U(I,J,1))/DZ(1)
               ELSE IF(K.EQ.(NZ-1)) THEN
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-2))/(2.*DZ(NZ-2))
               ELSE IF(K.EQ.NZ) THEN
                  FZ(I,J)=(U(I,J,NZ+1)-U(I,J,NZ-1))/DZ(NZ-2)
               ELSE
                  FZ(I,J)=(U(I,J,K+1)-U(I,J,K-1))/(DZ(K)+DZ(K-1))
               ENDIF
               UFX(I,J)=U(I,J,K)*(UFX(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1              *FZ(I,J))
               VFY(I,J)=V(I,J,K)*(VFY(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1              *FZ(I,J))
               IF(K.EQ.NZ) THEN
                  WW=W(I,J,NZ-1)
               ELSE
                  WW=(W(I,J,K)+W(I,J,K-1))/2.
               ENDIF
               WFZ(I,J)=WW*HER(I,J)*FZ(I,J)
               FT(I,J)=ET(I,J,K)*FZ(I,J)
            ENDDO
         ENDDO

         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,UFX,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,VFY,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,WFZ,NCPU)
         CALL DEALIASXY_PARA(NXMOD,NYMOD,1,NXMAX,NYMAX,WORK,TRIGSX,
     1        TRIGSY,IFAX,FT,NCPU)

         CALL PDFX_PARA(T11(1,1,K),T11X,ATMP,WORK,TRIGSX,IFAX,
     1        PEX,NXMOD,NXMAX,NYMAX,NCPU)
         CALL PDFY_PARA(T12(1,1,K),T12Y,ATMP,WORK,TRIGSY,IFAX,
     1        PEY,NXMOD,NYMOD,NXMAX,NYMAX,NCPU)

         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               IF(K.EQ.2) THEN
c$$$                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
c$$$     1                 *(T11(I,J,3)-T11(I,J,2))/DZ(2)
c$$$     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
c$$$     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
c$$$     1                 +HER(I,J)*(T13_2(I,J)-T13_1(I,J))/DZ(2)
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,3)-T11(I,J,2))/DZ(2)
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,3)-T12(I,J,2))/DZ(2)
     1                 +HER(I,J)*(T13W(I,J,2)-T13_1(I,J))/DZ(2)
               ELSE IF(K.EQ.NZ-1) THEN
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K)-T11(I,J,K-1))/(2.*DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K)-T12(I,J,K-1))/(2.*DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))/DZ(K-1)
               ELSE
                  TSGS(I,J)=T11X(I,J)+(HXR(I,J)-ZZ(K)*EXR(I,J))
     1                 *(T11(I,J,K+1)-T11(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +T12Y(I,J)+(HYR(I,J)-ZZ(K)*EYR(I,J))
     1                 *(T12(I,J,K+1)-T12(I,J,K-1))/(DZ(K)+DZ(K-1))
     1                 +HER(I,J)*(T13W(I,J,K)-T13W(I,J,K-1))
     1                 /(DZ(K-1)/2.+DZ(K)/2.)
               ENDIF
            ENDDO
         ENDDO

         DO I=1,NXMOD
            DO J=1,NYMAX/NCPU
c$$$               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-NL(I,J)-TSGS(I,J)
               HNEW=-UFX(I,J)-VFY(I,J)-WFZ(I,J)-FT(I,J)-TSGS(I,J)
               IF(ABS(TIME-DT).LE.1.E-6) HU(I,J,K)=HNEW
               IF(ITURBINE.EQ.0.OR.TIME.LE.TIMETURB) THEN
                  FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
               ELSE
                  FU(I,J,K)=(3.*HNEW-HU(I,J,K))/2.+BFORCE
     1                 +WTFORCE(I,J,K)*(1.-EXP(-0.1*(TIME-TIMETURB)**2))
               ENDIF
               HU(I,J,K)=HNEW
            ENDDO
         ENDDO

      ENDDO

      RETURN
      END
      
C=====SUBROUTINE FUN_U_LES8_TURBINE_V2 END HERE







C========================================================================
      SUBROUTINE VELDISC(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,UD,
     1     U,NDISC,IDISC,NXWT,NYWT,NDP,DT,USBOT,HBAR)

C     DISC-AVERAGED AND TIME-AVERAGED VELOCITY

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STATUS(MPI_STATUS_SIZE)

      INTEGER I,J,K,JJ
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      INTEGER NXWT,NYWT

      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL U0(NXMAX,NYMAX,NZMAX),U1(NXMAX,NYMAX,NZMAX)

      REAL UD(NXWT*NYWT),UD1(NXWT*NYWT)

      INTEGER NDP
      
      INTEGER NDISC(NXMAX,NYMAX,NZMAX)
C     NDISC: DISC NUMBER INDEX (WHICH DISC THE GRID POINT BELONGS TO)
      
      INTEGER IDISC(NXMAX,NYMAX,NZMAX)
C     IDISC=1: INSIDE A TURBINE DISC
C     IDISC=0: OUSIDE ANY TURBINE DISC

      REAL TWOPI,XL,YL,PEX,PEY,DX,DY

      REAL USBOT,HBAR

      REAL TC,DT,FEXP
      DATA TC/0.27/
C     TC: RELAXATION TIME WIND FOR TEMPORAL AVERAGING (Calaf et al. 2010)
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------
C     INITIALIZE VARIABLES
C-------------------------------

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      DX=XL/FLOAT(NXMOD)
      DY=YL/FLOAT(NYMOD)

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               U0(I,J,K)=0.
               U1(I,J,K)=0.
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXWT
         DO J=1,NYWT
            UD1((I-1)*NYWT+J)=0.
         ENDDO
      ENDDO

C-----END HERE

C----------------------------------
C     COLLECT U FROM ALL CPUS
C----------------------------------

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            JJ=J+MYID*NYMAX/NCPU
            DO I=1,NXMAX
               U1(I,JJ,K)=U(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      CALL MPI_ALLREDUCE(U1,U0,NXMAX*NYMAX*NZMAX,
     1     MPI_DOUBLE_PRECISION,MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)
      
C-----END HERE

C------------------------------------------------
C     CALCULATE UD1: DISC-AVERAGED VELOCITY
C------------------------------------------------

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               IF(IDISC(I,J,K).EQ.1) THEN
                  UD1(NDISC(I,J,K))=UD1(NDISC(I,J,K))
     1                 +U0(I,J,K)/FLOAT(NDP)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

C--------------------------------------------------------
C     CALCULATE UD: DISC- AND TIME-AVERAGED VELOCITY
C--------------------------------------------------------

      DO I=1,NXWT
         DO J=1,NYWT
CC            FEXP=DT/(TC*HBAR/USBOT)/(1.+DT/(TC*HBAR/USBOT))
            FEXP=1.
            UD((I-1)*NYWT+J)=UD((I-1)*NYWT+J)*(1-FEXP)
     1           +UD1((I-1)*NYWT+J)*FEXP
         ENDDO
      ENDDO

C-----END HERE

      RETURN
      END

C=====SUBROUTINE VELDISC END HERE







C========================================================================
      SUBROUTINE VELDISC_V2(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,UD,
     1     U,NDISC,IDISC,NXWT,NYWT,WNDP,WTGAMMA0,DT,USBOT,HBAR)

C     DISC-AVERAGED AND TIME-AVERAGED VELOCITY

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STATUS(MPI_STATUS_SIZE)

      INTEGER I,J,K,JJ
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      INTEGER NXWT,NYWT

      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL U0(NXMAX,NYMAX,NZMAX),U1(NXMAX,NYMAX,NZMAX)

      REAL UD(NXWT*NYWT),UD1(NXWT*NYWT)

      REAL WNDP
      REAL WTGAMMA0(NXMAX,NYMAX,*)
      
      INTEGER NDISC(NXMAX,NYMAX,NZMAX)
C     NDISC: DISC NUMBER INDEX (WHICH DISC THE GRID POINT BELONGS TO)
      
      INTEGER IDISC(NXMAX,NYMAX,NZMAX)
C     IDISC=1: INSIDE A TURBINE DISC
C     IDISC=0: OUSIDE ANY TURBINE DISC

      REAL TWOPI,XL,YL,PEX,PEY,DX,DY

      REAL USBOT,HBAR

      REAL TC,DT,FEXP
      DATA TC/0.27/
C     TC: RELAXATION TIME WIND FOR TEMPORAL AVERAGING (Calaf et al. 2010)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------
C     INITIALIZE VARIABLES
C-------------------------------

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      DX=XL/FLOAT(NXMOD)
      DY=YL/FLOAT(NYMOD)

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               U0(I,J,K)=0.
               U1(I,J,K)=0.
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXWT
         DO J=1,NYWT
            UD1((I-1)*NYWT+J)=0.
         ENDDO
      ENDDO

C-----END HERE

C----------------------------------
C     COLLECT U FROM ALL CPUS
C----------------------------------

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            JJ=J+MYID*NYMAX/NCPU
            DO I=1,NXMAX
               U1(I,JJ,K)=U(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      CALL MPI_ALLREDUCE(U1,U0,NXMAX*NYMAX*NZMAX,
     1     MPI_DOUBLE_PRECISION,MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)
      
C-----END HERE

C------------------------------------------------
C     CALCULATE UD1: DISC-AVERAGED VELOCITY
C------------------------------------------------

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               IF(IDISC(I,J,K).EQ.1) THEN
                  UD1(NDISC(I,J,K))=UD1(NDISC(I,J,K))
     1                 +U0(I,J,K)*WTGAMMA0(I,J,K)/WNDP
               ENDIF
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

C--------------------------------------------------------
C     CALCULATE UD: DISC- AND TIME-AVERAGED VELOCITY
C--------------------------------------------------------

      DO I=1,NXWT
         DO J=1,NYWT
CC            FEXP=DT/(TC*HBAR/USBOT)/(1.+DT/(TC*HBAR/USBOT))
            FEXP=1.
            UD((I-1)*NYWT+J)=UD((I-1)*NYWT+J)*(1-FEXP)
     1           +UD1((I-1)*NYWT+J)*FEXP
         ENDDO
      ENDDO

C-----END HERE

      RETURN
      END

C=====SUBROUTINE VELDISC_V2 END HERE







C========================================================================
      SUBROUTINE VELDISC_INITIAL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1     UD,U,NDISC,IDISC,NXWT,NYWT,NDP,DT)

C     DISC-AVERAGED AND TIME-AVERAGED VELOCITY

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR,STATUS(MPI_STATUS_SIZE)

      INTEGER I,J,K,JJ
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      INTEGER NXWT,NYWT

      REAL U(NXMAX,NYMAX/NCPU,*)
      REAL U0(NXMAX,NYMAX,NZMAX),U1(NXMAX,NYMAX,NZMAX)

      REAL UD(NXWT*NYWT),UD1(NXWT*NYWT)

      INTEGER NDP
      
      INTEGER NDISC(NXMAX,NYMAX,NZMAX)
C     NDISC: DISC NUMBER INDEX (WHICH DISC THE GRID POINT BELONGS TO)
      
      INTEGER IDISC(NXMAX,NYMAX,NZMAX)
C     IDISC=1: INSIDE A TURBINE DISC
C     IDISC=0: OUSIDE ANY TURBINE DISC

      REAL TWOPI,XL,YL,PEX,PEY,DX,DY

      REAL TC,DT,FEXP
      DATA TC/14.14/
C     TC: EXPONENTIAL TIME COEFFICIENT FOR RELAXATION PROCESS
      
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------
C     INITIALIZE VARIABLES
C-------------------------------

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      DX=XL/FLOAT(NXMOD)
      DY=YL/FLOAT(NYMOD)

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               U0(I,J,K)=0.
               U1(I,J,K)=0.
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXWT
         DO J=1,NYWT
            UD1((I-1)*NYWT+J)=0.
         ENDDO
      ENDDO

      goto 100

C-----END HERE

C----------------------------------
C     COLLECT U FROM ALL CPUS
C----------------------------------

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            JJ=J+MYID*NYMAX/NCPU
            DO I=1,NXMAX
               U1(I,JJ,K)=U(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      CALL MPI_ALLREDUCE(U1,U0,NXMAX*NYMAX*NZMAX,
     1     MPI_DOUBLE_PRECISION,MPI_SUM,MPI_COMM_WORLD,STATUS,IERR)
      
C-----END HERE

C------------------------------------------------
C     CALCULATE UD1: DISC-AVERAGED VELOCITY
C------------------------------------------------

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               IF(IDISC(I,J,K).EQ.1) THEN
                  UD1(NDISC(I,J,K))=UD1(NDISC(I,J,K))
     1                 +U0(I,J,K)/FLOAT(NDP)
               ENDIF
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

C--------------------------------------------------------
C     CALCULATE UD: DISC- AND TIME-AVERAGED VELOCITY
C--------------------------------------------------------

 100  continue

      DO I=1,NXWT
         DO J=1,NYWT
            UD((I-1)*NYWT+J)=UD1((I-1)*NYWT+J)
         ENDDO
      ENDDO

C-----END HERE

      RETURN
      END

C=====SUBROUTINE VELDISC_INITIAL END HERE







C=======================================================================
      SUBROUTINE WIND_TURBINE_FORCE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,
     1     NZ,NCPU,PEX,PEY,WTFORCE,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC)

C     DISC MODEL FOR WIND TURBINE FORCE

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER I,J,K,JJ
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU

      REAL PEX,PEY
      REAL DX,TWOPI

      REAL WTFORCE(NXMAX,NYMAX/NCPU,*)
C     WTFORCE: BODY FORCE REPRESENTING WIND TURBINE

      REAL WTGAMMA0(NXMAX,NYMAX,*)
C     WTGAMMA: FRACTION OF AREA OVERLAP BETWEEN TURBINE DISC AND MESH CELL

      REAL CT
      DATA CT/1.33/
C     CT: THRUST COEFFICIENT (CT' IN CALAF_MENEVEAU_MEYERS_2010)

      INTEGER NXWT,NYWT
      REAL UD(NXWT*NYWT)
C     UD: DISK-AVERAGED TIME-AVERAGED LOCAL VELOCITY

      INTEGER IDISC(NXMAX,NYMAX,*),NDISC(NXMAX,NYMAX,*)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

      TWOPI=2*ACOS(-1.)

      DX=TWOPI/PEX/FLOAT(NXMOD)

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               WTFORCE(I,J,K)=0.
            ENDDO
         ENDDO
      ENDDO

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            JJ=J+MYID*NYMAX/NCPU
            DO I=1,NXMOD
               WTFORCE(I,J,K)=-0.5*CT*UD(NDISC(I,JJ,K))**2
     1              *WTGAMMA0(I,JJ,K)/DX
            ENDDO
         ENDDO
      ENDDO

      RETURN
      END

C=====SUBROUTINE WIND_TURBINE_FORCE END HERE








C=========================================================================
      SUBROUTINE DISCLOCA(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,IDISC,
     1     WTGAMMA0,PEX,PEY,HBAR,ZZ,NXWT,NYWT,NDP,RDISC,HDISC,NCPU,ICUT,
     1     JCUT,KCUT)

C     CALCULATE LOCATION OF WIND TURBINE DISC
C     IDENTIFY GRID POINT INSIDE DISC
C     CALCULATE AREA FRACTION INSIDE DISC FOR EACH GRID CELL

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER I,J,K,II,JJ,IC,JC,KC
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER KL,KH,JR,KP,JP

      INTEGER NXWT,NYWT,IWT
C     NXWT: NUMBER OF ROWS OF WIND TURBINE
C     NYWT: NUMBER OF COLUMNS OF WIND TURBINE
C     NXWT*NYWT: TOTAL NUMBER OF WIND TURBINE

      REAL RDISC,HDISC
C     RDISC: RADIUS OF WIND TURBINE DISC
C     HDISC: CENTRAL HEIGHT OF WIND TURBINE DISC

      REAL PEX,PEY,XL,YL,DX,DY,TWOPI
      REAL XC,YC,ZC,YP,ZP,RP

      REAL ZZ(*)
      REAL HBAR

      INTEGER NXR,NYR

      INTEGER NDISC(NXMAX,NYMAX,NZMAX)
C     NDISC: DISC NUMBER INDEX (WHICH DISC THE GRID POINT BELONGS TO)
      
      INTEGER IDISC(NXMAX,NYMAX,NZMAX)
C     IDISC=1: INSIDE A TURBINE DISC
C     IDISC=0: OUSIDE ANY TURBINE DISC

      REAL WTGAMMA0(NXMAX,NYMAX,NZMAX)
C     WTGAMMA0: FRACTION OF AREA OVERLAP BETWEEN MESH CELL AND TURBINE DISC
C     WTGAMMA0 IS WITHOUT DOMAIN DECOMPOSITION

      INTEGER NDP
C     NDP: NUMBER OF GRID POINT FOR EACH DISC

      INTEGER ICUT(NXWT),JCUT(NYWT),KCUT
C     OUTPUT INDEX FOR Y-Z,X-Z,X-Y PLANES
C     ICUT: Y-Z PLANE AT ONE DIAMETER DOWNSTREAM OF THE TURBINE
C     JCUT: X-Z PLANE CROSSING THE CENTER OF THE TURBINE
C     KCUT: X-Y PLANE CROSSING THE CENTER OF THE TURBINE HUB (DISC CENTER)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------------
C     CHECK SPANWISE DOMAIN SIZE
C-------------------------------------

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      DX=XL/FLOAT(NXMOD)
      DY=YL/FLOAT(NYMOD)
      
      NXR=INT(RDISC/DX)+1
      NYR=INT(RDISC/DY)+1

      IF(2.*RDISC*NYWT.GT.YL) THEN
         PRINT*, 'INSUFFICIENT DOMAIN SIZE FOR WIND TURBINE!'
         PRINT*, 'RADIUS OF WIND TURBINE:', RDISC
         PRINT*, 'NUMBER OF COLUMNS:', NYWT
         PRINT*, 'MINIMUM SPANWISE SPACE REQUIRED:',2.*RDISC*NYWT
         PRINT*, 'AVAILABLE SPANWISE SPACE:', YL
         STOP
      ENDIF

C-----END HERE

C-------------------------------
C     INITIALIZE PARAMETER
C-------------------------------

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               IDISC(I,J,K)=0
               NDISC(I,J,K)=0
               WTGAMMA0(I,J,K)=0.
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXWT
         ICUT(I)=0
      ENDDO
      DO J=1,NYWT
         JCUT(J)=0
      ENDDO
      KCUT=0

C-----END HERE

C--------------------------------------------
C     CALCULATE POSITION OF WIND TURBINE
C--------------------------------------------

      DO K=1,NZ
         IF(ZZ(K)*HBAR.GT.HDISC) THEN
            KC=K
            GOTO 10
         ENDIF
      ENDDO
 10   CONTINUE
      ZC=HDISC
      KCUT=KC

      DO K=1,NZ
         IF(ZZ(K)*HBAR.GT.(HDISC-RDISC)) THEN
            KL=K-1
            GOTO 20
         ENDIF
      ENDDO
 20   CONTINUE
      
      DO K=1,NZ
         IF(ZZ(K)*HBAR.GT.(HDISC+RDISC)) THEN
            KH=K
            GOTO 30
         ENDIF
      ENDDO
 30   CONTINUE

      IWT=0

      DO 200 II=1,NXWT

         IC=(2*II-1)*NXMOD/NXWT/2+1
         IF(IC.LT.1.OR.IC.GT.NXMOD) THEN
            PRINT*, 'WRONG LOCATION FOR TURBINE ROW!'
            PRINT*, 'IC=',IC
            PRINT*, 'NXMOD=',NXMOD
            STOP
         ENDIF

         IF(MOD(2.*RDISC,DX).GT.0.5) THEN
            ICUT(II)=IC+INT(2.*RDISC/DX)+1
         ELSE
            ICUT(II)=IC+INT(2.*RDISC/DX)
         ENDIF
         
         DO 100 JJ=1,NYWT

            IWT=IWT+1

            JC=(2*JJ-1)*NYMOD/NYWT/2+1
            IF(JC.LT.1.OR.JC.GT.NYMOD) THEN
               PRINT*, 'WRONG LOCATION FOR TURBINE COLUMN!'
               PRINT*, 'JC=',JC
               PRINT*, 'NYMOD=',NYMOD
               STOP
            ENDIF
            YC=(JC-1)*DY

            JCUT(JJ)=JC

            NDP=0
           
            DO KP=KL,KH
               DO JR=-NYR,NYR
                  JP=JC+JR
                  IF(JP.LT.1) JP=JP+NYMOD
                  IF(JP.GT.NYMOD) JP=JP-NYMOD
                  YP=(JP-1)*DY
                  ZP=ZZ(KP)*HBAR
                  RP=SQRT((YP-YC)**2+(ZP-ZC)**2)
                  NDISC(IC,JP,KP)=IWT
                  IF(RP.LT.RDISC) THEN
                     IDISC(IC,JP,KP)=1
                     NDP=NDP+1
                  ENDIF
                  CALL FRACTION(DY,ZZ,IC,JP,KP,YC,ZC,WTGAMMA0,NXMAX,
     1                 NYMAX,HBAR,RDISC)
               ENDDO
            ENDDO

 100     CONTINUE
         
 200  CONTINUE

C-----END HERE

C------------------------------
C     CHECK ICUT,JCUT,KCUT
C------------------------------

      DO I=1,NXWT
         IF(ICUT(I).EQ.0) THEN
            PRINT*, 'INVALID INDEX FOR OUTPUTING I-CUT!'
            PRINT*, 'ICUT=',ICUT(I),' I=',I
            STOP
         ENDIF
      ENDDO

      DO J=1,NYWT
         IF(JCUT(J).EQ.0) THEN
            PRINT*, 'INVALID INDEX FOR OUTPUTING J-CUT!'
            PRINT*, 'JCUT=',JCUT(J),' J=',J
            STOP
         ENDIF
      ENDDO
      
      IF(KCUT.EQ.0) THEN
         PRINT*, 'INVALID INDEX FOR OUTPUTING K-CUT!'
         PRINT*, 'KCUT=',KCUT
         STOP
      ENDIF

C-----END HERE

      RETURN
      END

C=====SUBROUTINE DISCLOCA END HERE








C=========================================================================
      SUBROUTINE DISCLOCA_V2(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
     1     IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,NDP,RDISC,
     1     HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)

C     CALCULATE LOCATION OF WIND TURBINE DISC
C     IDENTIFY GRID POINT INSIDE DISC
C     CALCULATE AREA FRACTION INSIDE DISC FOR EACH GRID CELL

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER I,J,K,II,JJ,IC,JC,KC
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER KL,KH,JR,KP,JP

      INTEGER NXWT,NYWT,IWT
C     NXWT: NUMBER OF ROWS OF WIND TURBINE
C     NYWT: NUMBER OF COLUMNS OF WIND TURBINE
C     NXWT*NYWT: TOTAL NUMBER OF WIND TURBINE

      REAL RDISC,HDISC
C     RDISC: RADIUS OF WIND TURBINE DISC
C     HDISC: CENTRAL HEIGHT OF WIND TURBINE DISC

      REAL PEX,PEY,XL,YL,DX,DY,TWOPI
      REAL XC,YC,ZC,YP,ZP,RP

      REAL ZZ(*)
      REAL HBAR
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL ETAS(NXMAX,NYMAX),HHS(NXMAX,NYMAX)
      REAL ZTB(NXMAX,NYMAX)

      INTEGER NXR,NYR,IWAVY

      INTEGER NDISC(NXMAX,NYMAX,NZMAX)
C     NDISC: DISC NUMBER INDEX (WHICH DISC THE GRID POINT BELONGS TO)
      
      INTEGER IDISC(NXMAX,NYMAX,NZMAX)
C     IDISC=1: INSIDE A TURBINE DISC
C     IDISC=0: OUSIDE ANY TURBINE DISC

      REAL WTGAMMA0(NXMAX,NYMAX,NZMAX)
C     WTGAMMA0: FRACTION OF AREA OVERLAP BETWEEN MESH CELL AND TURBINE DISC
C     WTGAMMA0 IS WITHOUT DOMAIN DECOMPOSITION

      INTEGER NDP
C     NDP: NUMBER OF GRID POINT FOR EACH DISC

      INTEGER ICUT(NXWT),JCUT(NYWT),KCUT
C     OUTPUT INDEX FOR Y-Z,X-Z,X-Y PLANES
C     ICUT: Y-Z PLANE AT ONE DIAMETER DOWNSTREAM OF THE TURBINE
C     JCUT: X-Z PLANE CROSSING THE CENTER OF THE TURBINE
C     KCUT: X-Y PLANE CROSSING THE CENTER OF THE TURBINE HUB (DISC CENTER)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------------
C     CHECK SPANWISE DOMAIN SIZE
C-------------------------------------

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      DX=XL/FLOAT(NXMOD)
      DY=YL/FLOAT(NYMOD)
      
      NXR=INT(RDISC/DX)+1
      NYR=INT(RDISC/DY)+1

      if(myid.eq.0) then
         print*, 'discloca_v2: stop 1'
      endif

      IF(2.*RDISC*NYWT.GT.YL) THEN
         PRINT*, 'INSUFFICIENT DOMAIN SIZE FOR WIND TURBINE!'
         PRINT*, 'RADIUS OF WIND TURBINE:', RDISC
         PRINT*, 'NUMBER OF COLUMNS:', NYWT
         PRINT*, 'MINIMUM SPANWISE SPACE REQUIRED:',2.*RDISC*NYWT
         PRINT*, 'AVAILABLE SPANWISE SPACE:', YL
         STOP
      ENDIF

C-----END HERE

C---------------------------------------------
C     SEND SURFACE INFORMATION TO ONE CPU
C---------------------------------------------

      if(myid.eq.0) then
         print*, 'discloca_v2: stop 2'
      endif

      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,ETA,ETAS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,HH,HHS,NCPU)

      if(myid.eq.0) then
         print*, 'discloca_v2: stop 3'
      endif

C-----END HERE

C-------------------------------
C     INITIALIZE PARAMETER
C-------------------------------

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               IDISC(I,J,K)=0
               NDISC(I,J,K)=0
               WTGAMMA0(I,J,K)=0.
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXWT
         ICUT(I)=0
      ENDDO
      DO J=1,NYWT
         JCUT(J)=0
      ENDDO
      KCUT=0

      IF(IWAVY.EQ.8) THEN
         DO J=1,NYMAX
            DO I=1,NXMOD
               ZTB(I,J)=-HHS(I,J)
            ENDDO
         ENDDO
      ELSE
         DO J=1,NYMAX
            DO I=1,NXMOD
               ZTB(I,J)=0.
            ENDDO
         ENDDO
      ENDIF

      if(myid.eq.0) then
         print*, 'discloca_v2: stop 4'
         print*, nxmax,nymax,nzmax,nxmod,nymod,nz
         print*, pex,pey,hbar,nxwt,nywt,ndp,rdisc,hdisc,ncpu,iwavy
      endif

C-----END HERE

C--------------------------------------------
C     CALCULATE POSITION OF WIND TURBINE
C--------------------------------------------

      IWT=0

      DO 200 II=1,NXWT

         IC=(2*II-1)*NXMOD/NXWT/2+1
         IF(IC.LT.1.OR.IC.GT.NXMOD) THEN
            PRINT*, 'WRONG LOCATION FOR TURBINE ROW!'
            PRINT*, 'IC=',IC
            PRINT*, 'NXMOD=',NXMOD
            STOP
         ENDIF

         IF(MOD(2.*RDISC,DX).GT.0.5) THEN
            ICUT(II)=IC+INT(2.*RDISC/DX)+1
         ELSE
            ICUT(II)=IC+INT(2.*RDISC/DX)
         ENDIF
         
         DO 100 JJ=1,NYWT

            IWT=IWT+1

            JC=(2*JJ-1)*NYMOD/NYWT/2+1
            IF(JC.LT.1.OR.JC.GT.NYMOD) THEN
               PRINT*, 'WRONG LOCATION FOR TURBINE COLUMN!'
               PRINT*, 'JC=',JC
               PRINT*, 'NYMOD=',NYMOD
               STOP
            ENDIF
            YC=(JC-1)*DY

            JCUT(JJ)=JC

            NDP=0

            DO K=1,NZ
               IF((ZZ(K)*(HBAR+ETAS(IC,JC))-HHS(IC,JC)).GT.
     1              (ZTB(IC,JC)+HDISC)) THEN
                  KC=K
                  GOTO 10
               ENDIF
            ENDDO
 10         CONTINUE
            ZC=HDISC
            KCUT=KCUT+KC
            
            DO K=1,NZ
               IF((ZZ(K)*(HBAR+ETAS(IC,JC))-HHS(IC,JC)).GT.
     1              (ZTB(IC,JC)+HDISC-RDISC)) THEN
                  KL=K-1
                  GOTO 20
               ENDIF
            ENDDO
 20         CONTINUE
            
            DO K=1,NZ
               IF((ZZ(K)*(HBAR+ETAS(IC,JC))-HHS(IC,JC)).GT.
     1              (ZTB(IC,JC)+HDISC+RDISC)) THEN
                  KH=K
                  GOTO 30
               ENDIF
            ENDDO
 30         CONTINUE
           
            DO KP=KL,KH
               DO JR=-NYR,NYR
                  JP=JC+JR
                  IF(JP.LT.1) JP=JP+NYMOD
                  IF(JP.GT.NYMOD) JP=JP-NYMOD
                  YP=(JP-1)*DY
                  ZP=ZZ(KP)*(HBAR+ETAS(IC,JP))-HHS(IC,JP)
                  RP=SQRT((YP-YC)**2+(ZP-ZC)**2)
                  NDISC(IC,JP,KP)=IWT
                  IF(RP.LT.RDISC) THEN
                     IDISC(IC,JP,KP)=1
                     NDP=NDP+1
                  ENDIF
                  CALL FRACTION(DY,ZZ,IC,JP,KP,YC,ZC,WTGAMMA0,NXMAX,
     1                 NYMAX,HBAR,RDISC)
               ENDDO
            ENDDO

 100     CONTINUE
         
 200  CONTINUE

      KCUT=INT(KCUT/FLOAT(NXWT*NYWT))

      if(myid.eq.0) then
         print*, 'discloca_v2: stop 5'
      endif

C-----END HERE

C------------------------------
C     CHECK ICUT,JCUT,KCUT
C------------------------------

      DO I=1,NXWT
         IF(ICUT(I).EQ.0) THEN
            PRINT*, 'INVALID INDEX FOR OUTPUTING I-CUT!'
            PRINT*, 'ICUT=',ICUT(I),' I=',I
            STOP
         ENDIF
      ENDDO

      DO J=1,NYWT
         IF(JCUT(J).EQ.0) THEN
            PRINT*, 'INVALID INDEX FOR OUTPUTING J-CUT!'
            PRINT*, 'JCUT=',JCUT(J),' J=',J
            STOP
         ENDIF
      ENDDO
      
      IF(KCUT.EQ.0.OR.KCUT.GT.NZ) THEN
         PRINT*, 'INVALID INDEX FOR OUTPUTING K-CUT!'
         PRINT*, 'KCUT=',KCUT
         STOP
      ENDIF

      if(myid.eq.0) then
         print*, 'discloca_v2: stop 6'
      endif

C-----END HERE

      RETURN
      END

C=====SUBROUTINE DISCLOCA_V2 END HERE






C=========================================================================
      SUBROUTINE DISCLOCA_V3(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
     1     IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,WNDP,RDISC,
     1     HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)

C     CALCULATE LOCATION OF WIND TURBINE DISC
C     IDENTIFY GRID POINT INSIDE DISC
C     CALCULATE AREA FRACTION INSIDE DISC FOR EACH GRID CELL

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER I,J,K,II,JJ,IC,JC,KC
      INTEGER NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU
      INTEGER KL,KH,JR,KP,JP

      INTEGER NXWT,NYWT,IWT
C     NXWT: NUMBER OF ROWS OF WIND TURBINE
C     NYWT: NUMBER OF COLUMNS OF WIND TURBINE
C     NXWT*NYWT: TOTAL NUMBER OF WIND TURBINE

      REAL RDISC,HDISC
C     RDISC: RADIUS OF WIND TURBINE DISC
C     HDISC: CENTRAL HEIGHT OF WIND TURBINE DISC

      REAL PEX,PEY,XL,YL,DX,DY,TWOPI
      REAL XC,YC,ZC,YP,ZP,RP

      REAL ZZ(*)
      REAL HBAR
      REAL ETA(NXMAX,*),HH(NXMAX,*)
      REAL ETAS(NXMAX,NYMAX),HHS(NXMAX,NYMAX)
      REAL ZTB(NXMAX,NYMAX)

      INTEGER NXR,NYR,IWAVY

      INTEGER NDISC(NXMAX,NYMAX,NZMAX)
C     NDISC: DISC NUMBER INDEX (WHICH DISC THE GRID POINT BELONGS TO)
      
      INTEGER IDISC(NXMAX,NYMAX,NZMAX)
C     IDISC=1: INSIDE A TURBINE DISC
C     IDISC=0: OUSIDE ANY TURBINE DISC

      REAL WTGAMMA0(NXMAX,NYMAX,NZMAX)
C     WTGAMMA0: FRACTION OF AREA OVERLAP BETWEEN MESH CELL AND TURBINE DISC
C     WTGAMMA0 IS WITHOUT DOMAIN DECOMPOSITION

      INTEGER NDP
C     NDP: NUMBER OF GRID POINT FOR EACH DISC
      REAL WNDP
C     WNDP: NDP WEIGHTED BY WTGAMMA0

      INTEGER ICUT(NXWT),JCUT(NYWT),KCUT
C     OUTPUT INDEX FOR Y-Z,X-Z,X-Y PLANES
C     ICUT: Y-Z PLANE AT ONE DIAMETER DOWNSTREAM OF THE TURBINE
C     JCUT: X-Z PLANE CROSSING THE CENTER OF THE TURBINE
C     KCUT: X-Y PLANE CROSSING THE CENTER OF THE TURBINE HUB (DISC CENTER)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-------------------------------------
C     CHECK SPANWISE DOMAIN SIZE
C-------------------------------------

      TWOPI=2.*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      DX=XL/FLOAT(NXMOD)
      DY=YL/FLOAT(NYMOD)
      
      NXR=INT(RDISC/DX)+1
      NYR=INT(RDISC/DY)+1

      IF(2.*RDISC*NYWT.GT.YL) THEN
         PRINT*, 'INSUFFICIENT DOMAIN SIZE FOR WIND TURBINE!'
         PRINT*, 'RADIUS OF WIND TURBINE:', RDISC
         PRINT*, 'NUMBER OF COLUMNS:', NYWT
         PRINT*, 'MINIMUM SPANWISE SPACE REQUIRED:',2.*RDISC*NYWT
         PRINT*, 'AVAILABLE SPANWISE SPACE:', YL
         STOP
      ENDIF

C-----END HERE

C---------------------------------------------
C     SEND SURFACE INFORMATION TO ONE CPU
C---------------------------------------------

      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,ETA,ETAS,NCPU)
      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,HH,HHS,NCPU)

C-----END HERE

C-------------------------------
C     INITIALIZE PARAMETER
C-------------------------------

      DO K=1,NZ
         DO J=1,NYMAX
            DO I=1,NXMAX
               IDISC(I,J,K)=0
               NDISC(I,J,K)=0
               WTGAMMA0(I,J,K)=0.
            ENDDO
         ENDDO
      ENDDO

      DO I=1,NXWT
         ICUT(I)=0
      ENDDO
      DO J=1,NYWT
         JCUT(J)=0
      ENDDO
      KCUT=0

      IF(IWAVY.EQ.8) THEN
         DO J=1,NYMAX
            DO I=1,NXMOD
               ZTB(I,J)=-HHS(I,J)
            ENDDO
         ENDDO
      ELSE
         DO J=1,NYMAX
            DO I=1,NXMOD
               ZTB(I,J)=0.
            ENDDO
         ENDDO
      ENDIF

C-----END HERE

C--------------------------------------------
C     CALCULATE POSITION OF WIND TURBINE
C--------------------------------------------

      IWT=0

      DO 200 II=1,NXWT

         IC=(2*II-1)*NXMOD/NXWT/2+1
         IF(IC.LT.1.OR.IC.GT.NXMOD) THEN
            PRINT*, 'WRONG LOCATION FOR TURBINE ROW!'
            PRINT*, 'IC=',IC
            PRINT*, 'NXMOD=',NXMOD
            STOP
         ENDIF

         IF(MOD(2.*RDISC,DX).GT.0.5) THEN
            ICUT(II)=IC!+INT(2.*RDISC/DX)+1
         ELSE
            ICUT(II)=IC!+INT(2.*RDISC/DX)
         ENDIF
         
         DO 100 JJ=1,NYWT

            IWT=IWT+1

            JC=(2*JJ-1)*NYMOD/NYWT/2+1
            IF(JC.LT.1.OR.JC.GT.NYMOD) THEN
               PRINT*, 'WRONG LOCATION FOR TURBINE COLUMN!'
               PRINT*, 'JC=',JC
               PRINT*, 'NYMOD=',NYMOD
               STOP
            ENDIF
            YC=(JC-1)*DY

            JCUT(JJ)=JC

            WNDP=0.

            DO K=1,NZ
               IF((ZZ(K)*(HBAR+ETAS(IC,JC))-HHS(IC,JC)).GT.
     1              (ZTB(IC,JC)+HDISC)) THEN
                  KC=K
                  GOTO 10
               ENDIF
            ENDDO
 10         CONTINUE
            ZC=HDISC
            KCUT=KCUT+KC
            
            DO K=1,NZ
               IF((ZZ(K)*(HBAR+ETAS(IC,JC))-HHS(IC,JC)).GT.
     1              (ZTB(IC,JC)+HDISC-RDISC)) THEN
                  KL=K-1
                  GOTO 20
               ENDIF
            ENDDO
 20         CONTINUE
            
            DO K=1,NZ
               IF((ZZ(K)*(HBAR+ETAS(IC,JC))-HHS(IC,JC)).GT.
     1              (ZTB(IC,JC)+HDISC+RDISC)) THEN
                  KH=K
                  GOTO 30
               ENDIF
            ENDDO
 30         CONTINUE
           
            DO KP=KL,KH
               DO JR=-NYR,NYR
                  JP=JC+JR
                  IF(JP.LT.1) JP=JP+NYMOD
                  IF(JP.GT.NYMOD) JP=JP-NYMOD
                  YP=(JP-1)*DY
                  ZP=ZZ(KP)*(HBAR+ETAS(IC,JP))-HHS(IC,JP)
                  RP=SQRT((YP-YC)**2+(ZP-ZC)**2)
                  NDISC(IC,JP,KP)=IWT
CC                  IF(RP.LE.RDISC+SQRT(DX**2+DY**2)) THEN
CC                     IDISC(IC,JP,KP)=1
CC                     NDP=NDP+1
CC                  ENDIF
                  CALL FRACTION_V2(DY,ZZ,IC,JP,KP,YC,ZC,WTGAMMA0,NXMAX,
     1                 NYMAX,HBAR,RDISC,IDISC,WNDP)
               ENDDO
            ENDDO

 100     CONTINUE
         
 200  CONTINUE

      KCUT=INT(KCUT/FLOAT(NXWT*NYWT))

C-----END HERE

C------------------------------
C     CHECK ICUT,JCUT,KCUT
C------------------------------

CC      DO I=1,NXWT
CC         IF(ICUT(I).EQ.0) THEN
CC            PRINT*, 'INVALID INDEX FOR OUTPUTING I-CUT!'
CC            PRINT*, 'ICUT=',ICUT(I),' I=',I
CC            STOP
CC         ENDIF
CC      ENDDO

CC      DO J=1,NYWT
CC         IF(JCUT(J).EQ.0) THEN
CC            PRINT*, 'INVALID INDEX FOR OUTPUTING J-CUT!'
CC            PRINT*, 'JCUT=',JCUT(J),' J=',J
CC            STOP
CC         ENDIF
CC      ENDDO
      
CC      IF(KCUT.EQ.0.OR.KCUT.GT.NZ) THEN
CC         PRINT*, 'INVALID INDEX FOR OUTPUTING K-CUT!'
CC         PRINT*, 'KCUT=',KCUT
CC         STOP
CC      ENDIF

C-----END HERE

      RETURN
      END

C=====SUBROUTINE DISCLOCA_V3 END HERE







C========================================================================
      SUBROUTINE FRACTION(DY,ZZ,IC,JP,KP,YC,ZC,WTGAMMA0,NXMAX,NYMAX,
     1     HBAR,RDISC)
      
      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER J,K,IC,JP,KP,NXMAX,NYMAX
      REAL DY,YC,ZC,HBAR,RDISC
      REAL RCELL,RCC,AA,ACELL
      REAL YLT,ZLT,YRT,ZRT,YLB,ZLB,YRB,ZRB,RLT,RLB,RRT,RRB
      REAL YYL,ZZL,LY,LZ,LY2,LZ2
      REAL ZZ(*)

      REAL WTGAMMA0(NXMAX,NYMAX,*)
C     WTGAMMA0: FRACTION OF AREA OVERLAP BETWEEN MESH CELL AND TURBINE DISC
C     WTGAMMA0 IS WITHOUT DOMAIN DECOMPOSITION

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-----------------------------------
C     CALCULATE CELL BOUNDARY
C-----------------------------------
      
      YLT=(JP-1)*DY-DY/2.
      ZLT=(ZZ(KP)+ZZ(KP+1))/2.*HBAR
      RLT=SQRT((YLT-YC)**2+(ZLT-ZC)**2)
      
      YLB=(JP-1)*DY-DY/2.
      ZLB=(ZZ(KP)+ZZ(KP-1))/2.*HBAR
      RLB=SQRT((YLB-YC)**2+(ZLB-ZC)**2)

      YRT=(JP-1)*DY+DY/2.
      ZRT=(ZZ(KP)+ZZ(KP+1))/2.*HBAR
      RRT=SQRT((YRT-YC)**2+(ZRT-ZC)**2)

      YRB=(JP-1)*DY+DY/2.
      ZRB=(ZZ(KP)+ZZ(KP-1))/2.*HBAR
      RRB=SQRT((YRB-YC)**2+(ZRB-ZC)**2)

C-----END HERE

C--------------------------------------------------------------
C     CHECK WHICH GRID CELL IS COMPLETE IN OR OUT OF DISC
C     GRID CELL IS CENTERED AT GRID POINT
C--------------------------------------------------------------

      IF(RLT.LT.RDISC.AND.RLB.LT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN
         WTGAMMA0(IC,JP,KP)=1.
      ENDIF

      RCELL=SQRT((YLT-YRB)**2+(ZLT-ZRB)**2)/2.
      RCC=SQRT(((JP-1)*DY-YC)**2+(ZZ(KP)*HBAR-ZC)**2)
      IF(RCC.GT.(RCELL+RDISC)) THEN
         WTGAMMA0(IC,JP,KP)=0.
      ENDIF

C-----END HERE

C-------------------------------------------------------------
C     CALCULATE FRACTION WHEN 3 CORNERS ARE INSIDE DISC
C-------------------------------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 1
C     LEFT TOP CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IF(RLT.GT.RDISC.AND.RLB.LT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN
         
         YYL=YC-YLT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZLT-(ZC+ZZL)
         
         ZZL=ZLT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YC-YLT)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 1.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 1.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

C~~~~~CASE 1 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 2
C     RIGHT TOP CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRT.GT.RDISC.AND.RLT.LT.RDISC.AND.RLB.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YRT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZRT-(ZC+ZZL)

         ZZL=ZRT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YRT-YC)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 2.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 2.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

C~~~~~CASE 2 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 3
C     LEFT BOTTOM CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLB.GT.RDISC.AND.RLT.LT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YC-YLB
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=(ZC-ZLB)-ZZL

         ZZL=ZC-ZLB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YC-YLB)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 3.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 3.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

C~~~~~CASE 3 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 4
C     RIGHT BOTTOM CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRB.GT.RDISC.AND.RLT.LT.RDISC.AND.RLB.LT.RDISC
     1     .AND.RRT.LT.RDISC) THEN

         YYL=YRB-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=(ZC-ZRB)-ZZL

         ZZL=ZC-ZRB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YRB-YC)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 4.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 4.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

C~~~~~CASE 4 END HERE

C-----END HERE

C-----------------------------------------------------------
C     CALCULATE FRACTION WHEN 2 CORNERS ARE INSIDE DISC
C-----------------------------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 5
C     TWO TOP CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RRT.GT.RDISC.AND.RLB.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YC-YLT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZLB-ZC)

         YYL=YRT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ2=ZZL-(ZRB-ZC)
         
         IF(LZ.LT.0.OR.LZ2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 5.'
            PRINT*, 'LZ=',LZ
            PRINT*, 'LZ2=',LZ2
            STOP
         ENDIF

         AA=0.5*(LZ+LZ2)*(YRB-YLB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 5.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

C~~~~~CASE 5 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 6
C     TWO BOTTOM CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLB.GT.RDISC.AND.RRB.GT.RDISC.AND.RLT.LT.RDISC
     1     .AND.RRT.LT.RDISC) THEN

         YYL=YC-YLB
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZC-ZLT)

         YYL=YRB-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ2=ZZL-(ZC-ZRT)
         
         IF(LZ.LT.0.OR.LZ2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 6.'
            PRINT*, 'LZ=',LZ
            PRINT*, 'LZ2=',LZ2
            STOP
         ENDIF

         AA=0.5*(LZ+LZ2)*(YRB-YLB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 6.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

C~~~~~CASE 6 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 7
C     TWO LEFT CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         ZZL=ZLT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YC-YRT)

         ZZL=ZC-ZLB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY2=YYL-(YC-YRB)
         
         IF(LY.LT.0.OR.LY2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 7.'
            PRINT*, 'LY=',LY
            PRINT*, 'LY2=',LY2
            STOP
         ENDIF

         AA=0.5*(LY+LY2)*(ZRT-ZRB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 7.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

C~~~~~CASE 7 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 8
C     TWO RIGHT CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRT.GT.RDISC.AND.RRB.GT.RDISC.AND.RLT.LT.RDISC
     1     .AND.RLB.LT.RDISC) THEN

         ZZL=ZRT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YLT-YC)

         ZZL=ZC-ZRB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY2=YYL-(YLB-YC)
         
         IF(LY.LT.0.OR.LY2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 8.'
            PRINT*, 'LY=',LY
            PRINT*, 'LY2=',LY2
            STOP
         ENDIF

         AA=0.5*(LY+LY2)*(ZLT-ZLB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 8.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

C~~~~~CASE 8 END HERE

C-----END HERE

C-----------------------------------------------------------
C     CALCULATE FRACTION WHEN 1 CORNERS ARE INSIDE DISC
C-----------------------------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 9
C     ONLY RIGHT BOTTOM CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRT.GT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YC-YRT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZRB-ZC)
         
         ZZL=ZRB-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YC-YRB)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 9.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 9.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

C~~~~~CASE 9 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 10
C     ONLY LEFT BOTTOM CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RRT.GT.RDISC.AND.RRB.GT.RDISC
     1     .AND.RLB.LT.RDISC) THEN

         YYL=YLT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZLB-ZC)
         
         ZZL=ZLB-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YLB-YC)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 10.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 10.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

C~~~~~CASE 10 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 11
C     ONLY RIGHT TOP CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRB.GT.RDISC
     1     .AND.RRT.LT.RDISC) THEN

         YYL=YC-YRT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZC-ZRT)
         
         ZZL=ZC-ZRT
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YC-YRT)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 11.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 11.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

C~~~~~CASE 11 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 12
C     ONLY LEFT BOTTOM CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRB.GT.RDISC
     1     .AND.RLT.LT.RDISC) THEN

         YYL=YLT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZC-ZLT)
         
         ZZL=ZC-ZLT
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YLT-YC)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 12.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 12.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

      ENDIF

C~~~~~CASE 12 END HERE

C-----END HERE

      RETURN
      END

C=====SUBROUTINE FRACTION END HERE







C========================================================================
      SUBROUTINE FRACTION_V2(DY,ZZ,IC,JP,KP,YC,ZC,WTGAMMA0,NXMAX,NYMAX,
     1     HBAR,RDISC,IDISC,WNDP)
      
      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER J,K,IC,JP,KP,NXMAX,NYMAX
      REAL DY,YC,ZC,HBAR,RDISC
      REAL RCELL,RCC,AA,ACELL
      REAL YLT,ZLT,YRT,ZRT,YLB,ZLB,YRB,ZRB,RLT,RLB,RRT,RRB
      REAL YYL,ZZL,LY,LZ,LY2,LZ2
      REAL ZZ(*)

      REAL WTGAMMA0(NXMAX,NYMAX,*)
C     WTGAMMA0: FRACTION OF AREA OVERLAP BETWEEN MESH CELL AND TURBINE DISC
C     WTGAMMA0 IS WITHOUT DOMAIN DECOMPOSITION

      INTEGER IDISC(NXMAX,NYMAX,*)
      REAL WNDP

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C-----------------------------------
C     CALCULATE CELL BOUNDARY
C-----------------------------------
      
      YLT=(JP-1)*DY-DY/2.
      ZLT=(ZZ(KP)+ZZ(KP+1))/2.*HBAR
      RLT=SQRT((YLT-YC)**2+(ZLT-ZC)**2)
      
      YLB=(JP-1)*DY-DY/2.
      ZLB=(ZZ(KP)+ZZ(KP-1))/2.*HBAR
      RLB=SQRT((YLB-YC)**2+(ZLB-ZC)**2)

      YRT=(JP-1)*DY+DY/2.
      ZRT=(ZZ(KP)+ZZ(KP+1))/2.*HBAR
      RRT=SQRT((YRT-YC)**2+(ZRT-ZC)**2)

      YRB=(JP-1)*DY+DY/2.
      ZRB=(ZZ(KP)+ZZ(KP-1))/2.*HBAR
      RRB=SQRT((YRB-YC)**2+(ZRB-ZC)**2)

C-----END HERE

C--------------------------------------------------------------
C     CHECK WHICH GRID CELL IS COMPLETE IN OR OUT OF DISC
C     GRID CELL IS CENTERED AT GRID POINT
C--------------------------------------------------------------

      IF(RLT.LT.RDISC.AND.RLB.LT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN
         WTGAMMA0(IC,JP,KP)=1.
         IDISC(IC,JP,KP)=1
      ENDIF

      RCELL=SQRT((YLT-YRB)**2+(ZLT-ZRB)**2)/2.
      RCC=SQRT(((JP-1)*DY-YC)**2+(ZZ(KP)*HBAR-ZC)**2)
      IF(RCC.GT.(RCELL+RDISC)) THEN
         WTGAMMA0(IC,JP,KP)=0.
      ENDIF

C-----END HERE

C-------------------------------------------------------------
C     CALCULATE FRACTION WHEN 3 CORNERS ARE INSIDE DISC
C-------------------------------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 1
C     LEFT TOP CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      IF(RLT.GT.RDISC.AND.RLB.LT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN
         
         YYL=YC-YLT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZLT-(ZC+ZZL)
         
         ZZL=ZLT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YC-YLT)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 1.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 1.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 1 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 2
C     RIGHT TOP CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRT.GT.RDISC.AND.RLT.LT.RDISC.AND.RLB.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YRT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZRT-(ZC+ZZL)

         ZZL=ZRT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YRT-YC)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 2.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 2.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 2 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 3
C     LEFT BOTTOM CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLB.GT.RDISC.AND.RLT.LT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YC-YLB
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=(ZC-ZLB)-ZZL

         ZZL=ZC-ZLB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YC-YLB)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 3.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 3.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 3 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 4
C     RIGHT BOTTOM CORNER OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRB.GT.RDISC.AND.RLT.LT.RDISC.AND.RLB.LT.RDISC
     1     .AND.RRT.LT.RDISC) THEN

         YYL=YRB-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=(ZC-ZRB)-ZZL

         ZZL=ZC-ZRB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=(YRB-YC)-YYL
         
         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 4.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 4.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=(ACELL-AA)/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 4 END HERE

C-----END HERE

C-----------------------------------------------------------
C     CALCULATE FRACTION WHEN 2 CORNERS ARE INSIDE DISC
C-----------------------------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 5
C     TWO TOP CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RRT.GT.RDISC.AND.RLB.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YC-YLT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZLB-ZC)

         YYL=YRT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ2=ZZL-(ZRB-ZC)
         
         IF(LZ.LT.0.OR.LZ2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 5.'
            PRINT*, 'LZ=',LZ
            PRINT*, 'LZ2=',LZ2
            STOP
         ENDIF

         AA=0.5*(LZ+LZ2)*(YRB-YLB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 5.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 5 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 6
C     TWO BOTTOM CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLB.GT.RDISC.AND.RRB.GT.RDISC.AND.RLT.LT.RDISC
     1     .AND.RRT.LT.RDISC) THEN

         YYL=YC-YLB
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZC-ZLT)

         YYL=YRB-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ2=ZZL-(ZC-ZRT)
         
         IF(LZ.LT.0.OR.LZ2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 6.'
            PRINT*, 'LZ=',LZ
            PRINT*, 'LZ2=',LZ2
            STOP
         ENDIF

         AA=0.5*(LZ+LZ2)*(YRB-YLB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 6.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 6 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 7
C     TWO LEFT CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRT.LT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         ZZL=ZLT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YC-YRT)

         ZZL=ZC-ZLB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY2=YYL-(YC-YRB)
         
         IF(LY.LT.0.OR.LY2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 7.'
            PRINT*, 'LY=',LY
            PRINT*, 'LY2=',LY2
            STOP
         ENDIF

         AA=0.5*(LY+LY2)*(ZRT-ZRB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 7.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 7 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 8
C     TWO RIGHT CORNERS ARE OUT OF DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRT.GT.RDISC.AND.RRB.GT.RDISC.AND.RLT.LT.RDISC
     1     .AND.RLB.LT.RDISC) THEN

         ZZL=ZRT-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YLT-YC)

         ZZL=ZC-ZRB
         YYL=SQRT(RDISC**2-ZZL**2)
         LY2=YYL-(YLB-YC)
         
         IF(LY.LT.0.OR.LY2.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 8.'
            PRINT*, 'LY=',LY
            PRINT*, 'LY2=',LY2
            STOP
         ENDIF

         AA=0.5*(LY+LY2)*(ZLT-ZLB)
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 8.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 8 END HERE

C-----END HERE

C-----------------------------------------------------------
C     CALCULATE FRACTION WHEN 1 CORNERS ARE INSIDE DISC
C-----------------------------------------------------------

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 9
C     ONLY RIGHT BOTTOM CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRT.GT.RDISC
     1     .AND.RRB.LT.RDISC) THEN

         YYL=YC-YRT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZRB-ZC)
         
         ZZL=ZRB-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YC-YRB)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 9.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 9.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 9 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 10
C     ONLY LEFT BOTTOM CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RRT.GT.RDISC.AND.RRB.GT.RDISC
     1     .AND.RLB.LT.RDISC) THEN

         YYL=YLT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZLB-ZC)
         
         ZZL=ZLB-ZC
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YLB-YC)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 10.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 10.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 10 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 11
C     ONLY RIGHT TOP CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RLT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRB.GT.RDISC
     1     .AND.RRT.LT.RDISC) THEN

         YYL=YC-YRT
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZC-ZRT)
         
         ZZL=ZC-ZRT
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YC-YRT)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 11.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 11.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

C~~~~~CASE 11 END HERE

C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C     CASE 12
C     ONLY LEFT BOTTOM CORNER IS INSIDE DISC
C~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ELSE IF(RRT.GT.RDISC.AND.RLB.GT.RDISC.AND.RRB.GT.RDISC
     1     .AND.RLT.LT.RDISC) THEN

         YYL=YLT-YC
         ZZL=SQRT(RDISC**2-YYL**2)
         LZ=ZZL-(ZC-ZLT)
         
         ZZL=ZC-ZLT
         YYL=SQRT(RDISC**2-ZZL**2)
         LY=YYL-(YLT-YC)

         IF(LY.LT.0.OR.LZ.LT.0) THEN
            PRINT*, 'ERROR IN FRACTION!'
            PRINT*, 'CASE 12.'
            PRINT*, 'LY=',LY
            PRINT*, 'LZ=',LZ
            STOP
         ENDIF

         AA=0.5*LY*LZ
         ACELL=(ZLT-ZLB)*(YRT-YLT)
         IF(AA.LE.0.OR.ACELL.LE.0) THEN
            PRINT*, 'ERROR IN FRACTION AREA!'
            PRINT*, 'CASE 12.'
            PRINT*, 'AA=',AA
            PRINT*, 'ACELL=',ACELL
            STOP
         ENDIF
         WTGAMMA0(IC,JP,KP)=AA/ACELL

         IDISC(IC,JP,KP)=1

      ENDIF

C~~~~~CASE 12 END HERE

      WNDP=WNDP+WTGAMMA0(IC,JP,KP)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE FRACTION_V2 END HERE







C=======================================================================
      SUBROUTINE WIND_LES_HOS_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     NXMODS,NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,
     1     TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,EX,
     1     EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,REH2,
     1     HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,TIME,
     1     ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,
     1     KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0,WVN,
     1     ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,FVPS,WBS,PAS0,NPW,IPA,NTH,
     1     TIMEP,TCP,FR2,RDGL,NUT,DX,DY,MFILT,CSP,CSPW,WTGAMMA0,UD,NXWT,
     1     NYWT,IDISC,NDISC,WNDP,TIMETURB,RDISC,HDISC,ICUT,JCUT,KCUT,
     1     ITURBINE)

C     WIND_LES SIMULATION
C     USE WALL FUNCTION

C     WAVY SURFACE MOTION IS GIVEN BY HOS SIMULATION
C     HOS SURFACE PRESSURE IS GIVEN BY WAVYWALL SIMULATION

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE
      REAL DX,DY,DELTAX,DELTAY
      INTEGER MFILT

      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      REAL UT(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WT(NXMAX,NYMAX/NCPU)

C----------------------------
C     VARIABLES FOR LES
C----------------------------

CC      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

C-----END HERE

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER IRK,NPW,IPA,NTH,ITH
      REAL TH,TIMEP,TCP,TIME0,FEXP,FR2,RDGL
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL ETAB(NXMAXS,*)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,*)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)
      
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)

C-----END HERE

C-------------------------------------
C     VARIABLES FOR WIND TURBINE
C-------------------------------------

      INTEGER NXWT,NYWT,NDP,ICUT,JCUT,KCUT
      REAL RDISC,HDISC
      INTEGER IDISC(NXMAX,NYMAX,*),NDISC(NXMAX,NYMAX,*)
      
      REAL WTGAMMA0(NXMAX,NYMAX,*),UD(NXWT*NYWT)
      REAL WTFORCE(NXMAX,NYMAX/NCPU,NZMAX)

      INTEGER ITURBINE
      REAL TIMETURB
      REAL WNDP

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C------------------------------------------
C     CALCULATE NONLINEAR COEFFICIENT
C------------------------------------------

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

C-----END HERE

C--------------------------------------
C     CALCULATE WIND TURBINE FORCE
C--------------------------------------
      
      IF(ITURBINE.EQ.1) THEN
         
         CALL DISCLOCA_V3(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
     1        IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,WNDP,
     1        RDISC,HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)
         
         CALL VELDISC_V2(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,UD,
     1        U,NDISC,IDISC,NXWT,NYWT,WNDP,WTGAMMA0,DT,USBOT,HBAR)
         
         CALL WIND_TURBINE_FORCE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,
     1        NZ,NCPU,PEX,PEY,WTFORCE,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC)

      ENDIF

C-----END HERE

C---------------------------------
C     FILTERING THE VELOCITY
C---------------------------------

      DELTAX=1.5*DX
      DELTAY=1.5*DY

      DO K=1,NZ+1
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,U(1,1,K),UF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,V(1,1,K),VF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,W(1,1,K),WF(1,1,K),
     1        MFILT)
      ENDDO

C-----END HERE

C---------------------------------------------
C     CALCULATE WALL-LAYER MODEL FOR LES
C---------------------------------------------

CC      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
CC     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)
      CALL WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
     1     DELTAY,HH,ETA,NCPU)

C-----END HERE

C-----------------------------------------------
C     CALCULATE MODEL COEFFICIENTS FOR LES
C-----------------------------------------------

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

      CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     1     HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,
     1     UF,VF,WF,MFILT)

      CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
     1     ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,IVANDRIEST,CS0,
     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,
     1     VF,WF,MFILT,CSPW)

C-----END HERE

C---------------------------------
C     PREDICTION OF VELOCITY
C---------------------------------

      CALL FUN_U_LES8_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,
     1     ZZ,TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,
     1     PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,
     1     S12,S13W,NUT,NUTW,TAUWX,WTFORCE,TIMETURB,ITURBINE)

      CALL FUN_V_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

      CALL FUN_W_LES8(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

C--------------------------------------------------------------
C     CALCULATE AIR PRESSURE ON SURFACE AT TIME STEP N+1/2
C--------------------------------------------------------------

      IF(IPA.EQ.0) THEN

         DO I=1,NXMODS
            DO J=1,NYMAXS/NCPU
               PAS(I,J)=0.
            ENDDO
         ENDDO

      ELSE IF(IPA.EQ.1) THEN
         
         CALL AIR_P_LES(NXMAX,NYMAX,NXMOD,NYMOD,NXMAXS,NYMAXS,NXMODS,
     1        NYMODS,PEX,PEY,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,
     1        IFAX,PAS,PP,NCPU)
      
         CALL AIR_P0(NXMAXS,NYMAXS,NXMODS,NYMODS,PAS,PAS0,NCPU)

         IF(TIME.LT.TIMEP) THEN
            TIME0=0.
         ELSE
            TIME0=TIME-TIMEP
         ENDIF
         FEXP=EXP(-TCP*TIME0**2)
         DO J=1,NYMAXS/NCPU
            DO I=1,NXMODS
               PAS(I,J)=RDGL*PAS(I,J)*(1.-FEXP)
            ENDDO
         ENDDO

      ELSE
         
         PRINT*, "INVALID IPA: IPA=",IPA
       
      ENDIF
      
C-----END HERE

C------------------------------------------------
C     HOS SIMULATION FOR SURFACE WAVE MOTION
C------------------------------------------------

      DO ITH=1,NTH
         TH=TIME-(NTH-ITH)*DT/NTH
         CALL HOS_WAVE_3D(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,WORKS,IFAX,
     1        TRIGSXS,TRIGSYS,PEX,PEY,TH,DT/NTH,WVN,ETAB,EBX,EBY,VPS,
     1        VPSX,VPSY,FETAB,FVPS,UBS,VBS,WBS,PAS,FR2,NCPU)
      ENDDO

C-----END HERE

C--------------------------------------
C     CALCULATE SURFACE ROUGHNESS
C--------------------------------------

CC      CALL ROUGHNESS

C-----END HERE

C-------------------------------------------------------------
C     APPLY SURFACE WAVE BOUNDARY CONDITION TO TURBULENCE
C-------------------------------------------------------------

      CALL BOTTOM_HOS_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,
     1     WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,UBS,VBS,WBS,
     1     ETAB,HX,HY,HXX,HYY,HXY,NCPU)

C-----END HERE

C---------------------------------------
C     APPLY TOP BOUNDARY CONDITION
C---------------------------------------

      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,UZFS,
     1     VZFS,W,HBAR,NUTA,USTOP,NCPU)

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,
     1     EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
      
C-----END HERE

C----------------------------------
C     CALCULATE PRESSURE FIELD
C----------------------------------

      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

C-----END HERE

C---------------------------------------
C     CORRECTION OF VELOCITY FIELD
C---------------------------------------

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C-----END HERE

C------------------------------------------------------
C     APPLY BOUNDARY CONDITION TO VELOCITY FIELD
C------------------------------------------------------

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C-----END HERE

C--------------------------------------------
C     CHECK DIVERGENCE OF THE VELOCITY
C--------------------------------------------

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WIND_LES_HOS_TURBINE END HERE










C=======================================================================
      SUBROUTINE WIND_LES_HOS_LN_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,
     1     NZMAX,NXMODS,NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,
     1     TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,EX,
     1     EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,REH2,
     1     HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,TIME,
     1     ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,
     1     KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0,WVN,
     1     ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,FVPS,WBS,PAS0,NPW,IPA,NTH,
     1     TIMEP,TCP,FR2,RDGL,NUT,DX,DY,MFILT,CSP,CSPW,WTGAMMA0,UD,NXWT,
     1     NYWT,IDISC,NDISC,WNDP,TIMETURB,RDISC,HDISC,ICUT,JCUT,KCUT,
     1     ILASD,CS_LASD,JMM0,JLM0,JNN0,JQN0,TAU13_NU,TAU13_SGS,Z0,
     1     ITLASD,TLASD,TLASD0,ITURBINE)

C     WIND_LES SIMULATION
C     USE WALL FUNCTION

C     WAVY SURFACE MOTION IS GIVEN BY HOS SIMULATION
C     HOS SURFACE PRESSURE IS GIVEN BY WAVYWALL SIMULATION

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE
      REAL DX,DY,DELTAX,DELTAY
      INTEGER MFILT

      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      REAL UT(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WT(NXMAX,NYMAX/NCPU)

C----------------------------
C     VARIABLES FOR LES
C----------------------------

CC      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

C-----END HERE

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER IRK,NPW,IPA,NTH,ITH
      REAL TH,TIMEP,TCP,TIME0,FEXP,FR2,RDGL
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL ETAB(NXMAXS,*)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,*)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)
      
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)

C-----END HERE

C-------------------------------------
C     VARIABLES FOR WIND TURBINE
C-------------------------------------

      INTEGER ITURBINE

      INTEGER NXWT,NYWT,NDP,ICUT,JCUT,KCUT
      REAL RDISC,HDISC
      INTEGER IDISC(NXMAX,NYMAX,*),NDISC(NXMAX,NYMAX,*)
      
      REAL WTGAMMA0(NXMAX,NYMAX,*),UD(NXWT*NYWT)
      REAL WTFORCE(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TIMETURB
      REAL WNDP

C-----END HERE

C-------------------------------------------
C     VARIABLES FOR LASD DYNAMIC MODEL
C-------------------------------------------

      INTEGER ILASD,ITLASD
      REAL TLASD,TLASD0
      
      REAL JMM0(NXMAX,NYMAX,*),JLM0(NXMAX,NYMAX,*)
      REAL JNN0(NXMAX,NYMAX,*),JQN0(NXMAX,NYMAX,*)
      REAL CS_LASD(NXMAX,NYMAX/NCPU,*)
      REAL NUT0(NXMAX,NYMAX/NCPU,NZMAX),NUTW0(NXMAX,NYMAX/NCPU,NZMAX)
      REAL TAU13_NU(NXMAX,NYMAX/NCPU,*),TAU13_SGS(NXMAX,NYMAX/NCPU,*)

      real fpk(nxmax)

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C------------------------------------------
C     CALCULATE NONLINEAR COEFFICIENT
C------------------------------------------

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

C-----END HERE

C--------------------------------------
C     CALCULATE WIND TURBINE FORCE
C--------------------------------------

      IF(ITURBINE.EQ.1) THEN
      
         CALL DISCLOCA_V3(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
     1        IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,WNDP,
     1        RDISC,HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)
         
         CALL VELDISC_V2(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,UD,
     1        U,NDISC,IDISC,NXWT,NYWT,WNDP,WTGAMMA0,DT,USBOT,HBAR)
         
         CALL WIND_TURBINE_FORCE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,
     1        NZ,NCPU,PEX,PEY,WTFORCE,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC)

      ENDIF

C-----END HERE

C---------------------------------
C     FILTERING THE VELOCITY
C---------------------------------

      DELTAX=1.5*DX
      DELTAY=1.5*DY

      DO K=1,NZ+1
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,U(1,1,K),UF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,V(1,1,K),VF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,W(1,1,K),WF(1,1,K),
     1        MFILT)
      ENDDO

C-----END HERE

C---------------------------------------------
C     CALCULATE WALL-LAYER MODEL FOR LES
C---------------------------------------------

CC      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
CC     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)
c$$$      CALL WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
c$$$     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
c$$$     1     DELTAY,HH,ETA,NCPU)
      CALL WALL_MODEL_V3(NXMOD,NYMOD,NXMAX,NYMAX,Z0,ZZ,HBAR,PEX,
     1     PEY,TAUWX,TAUWY,UF,VF,WF,WORK,TRIGSX,TRIGSY,IFAX,HH,HX,HY,
     1     ETA,NCPU)

C-----END HERE

C-----------------------------------------------
C     CALCULATE MODEL COEFFICIENTS FOR LES
C-----------------------------------------------

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

c$$$      CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
c$$$     1     HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
c$$$     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
c$$$     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,
c$$$     1     UF,VF,WF,MFILT)
c$$$
c$$$      CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
c$$$     1     ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
c$$$     1     IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,IVANDRIEST,CS0,
c$$$     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,
c$$$     1     VF,WF,MFILT,CSPW)

      IF(ILASD.EQ.1) THEN

         CALL GETNUT_LASD(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     1        ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1        TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,S13W,S23W,CS_LASD,NUT,
     1        NUTW,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT,JMM0,JLM0,JNN0,
     1        JQN0,DX,DY,HH,DT,TIME,ITLASD,TLASD0,CSP,CS0,Z0)

         IF((TIME-TLASD).LT.(1.E-6)) THEN
            DO K=1,NZMAX
               DO J=1,NYMAX/NCPU
                  DO I=1,NXMAX
                     NUT0(I,J,K)=0.0
                     NUTW0(I,J,K)=0.0
                  ENDDO
               ENDDO
            ENDDO
            CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1           DZ,ZZ,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,
     1           TRIGSX,TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,
     1           NUT0,NUTA,IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,
     1           ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT)
            CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,
     1           NCPU,DZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,
     1           TRIGSX,TRIGSY,IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW0,
     1           NUTWA,IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,
     1           ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT,CSPW)
            FEXP=EXP(-TCOEF*(TIME-TLASD)**2)
            DO K=1,NZMAX
               DO J=1,NYMAX/NCPU
                  DO I=1,NXMAX
                     NUT(I,J,K)=NUT0(I,J,K)*(1.-FEXP)+NUT(I,J,K)*FEXP
                     NUTW(I,J,K)=NUTW0(I,J,K)*(1.-FEXP)+NUT(I,J,K)*FEXP
                  ENDDO
               ENDDO
            ENDDO
         ENDIF

      ELSE IF(ILASD.EQ.0) THEN

         CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
     1        ZZ,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1        TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,
     1        IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,
     1        DELTAX,DELTAY,UF,VF,WF,MFILT)
         
         CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1        DZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1        TRIGSY,IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,
     1        IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,
     1        DELTAX,DELTAY,UF,VF,WF,MFILT,CSPW)

      ELSE IF(ILASD.EQ.2) THEN
         
         CALL GETNUT_PASD(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1        DZ,ZZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,
     1        TRIGSX,TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,S13W,S23W,NUT,
     1        NUTW,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT,CSP,Z0,cspw)

      ELSE

         IF(MYID.EQ.0) THEN
            PRINT*, 'INVALID VALUE FOR ILASD:',ILASD
         ENDIF
         STOP

      ENDIF

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               TAU13_NU(I,J,K)=-2./RE*S13(I,J,K)
               TAU13_SGS(I,J,K)=-2.*NUT(I,J,K)*S13(I,J,K)
            ENDDO
         ENDDO
      ENDDO

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               NUT(I,J,K)=NUT(I,J,K)+1./RE
               NUTW(I,J,K)=NUTW(I,J,K)+1./RE
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

C---------------------------------
C     PREDICTION OF VELOCITY
C---------------------------------

      CALL FUN_U_LES8_TURBINE_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,
     1     ZZ,TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,
     1     PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,
     1     S12,S13W,NUT,NUTW,TAUWX,WTFORCE,TIMETURB,ITURBINE)

      CALL FUN_V_LES8_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

      CALL FUN_W_LES8_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

C--------------------------------------------------------------
C     CALCULATE AIR PRESSURE ON SURFACE AT TIME STEP N+1/2
C--------------------------------------------------------------

      IF(IPA.EQ.0) THEN

         DO I=1,NXMODS
            DO J=1,NYMAXS/NCPU
               PAS(I,J)=0.
            ENDDO
         ENDDO

      ELSE IF(IPA.EQ.1) THEN
         
         CALL AIR_P_LES(NXMAX,NYMAX,NXMOD,NYMOD,NXMAXS,NYMAXS,NXMODS,
     1        NYMODS,PEX,PEY,WORK,TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,
     1        IFAX,PAS,PP,NCPU)
      
         CALL AIR_P0(NXMAXS,NYMAXS,NXMODS,NYMODS,PAS,PAS0,NCPU)

         IF(TIME.LT.TIMEP) THEN
            TIME0=0.
         ELSE
            TIME0=TIME-TIMEP
         ENDIF
         FEXP=EXP(-TCP*TIME0**2)
         DO J=1,NYMAXS/NCPU
            DO I=1,NXMODS
               PAS(I,J)=RDGL*PAS(I,J)*(1.-FEXP)
            ENDDO
         ENDDO

      ELSE
         
         PRINT*, "INVALID IPA: IPA=",IPA
       
      ENDIF
      
C-----END HERE

C------------------------------------------------
C     HOS SIMULATION FOR SURFACE WAVE MOTION
C------------------------------------------------

      DO ITH=1,NTH
         TH=TIME-(NTH-ITH)*DT/NTH
CC         CALL HOS_WAVE_3D_LN(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,WORKS,IFAX,
CC     1        TRIGSXS,TRIGSYS,PEX,PEY,TH,DT/NTH,WVN,ETAB,EBX,EBY,VPS,
CC     1        VPSX,VPSY,FETAB,FVPS,UBS,VBS,WBS,PAS,FR2,NCPU)
         CALL HOS_WAVE_3D(NXMODS,NYMODS,NXMAXS,NYMAXS,NPW,WORKS,IFAX,
     1        TRIGSXS,TRIGSYS,PEX,PEY,TH,DT/NTH,WVN,ETAB,EBX,EBY,VPS,
     1        VPSX,VPSY,FETAB,FVPS,UBS,VBS,WBS,PAS,FR2,NCPU)
      ENDDO

C-----END HERE

C--------------------------------------
C     CALCULATE SURFACE ROUGHNESS
C--------------------------------------

CC      CALL ROUGHNESS

C-----END HERE

C-------------------------------------------------------------
C     APPLY SURFACE WAVE BOUNDARY CONDITION TO TURBULENCE
C-------------------------------------------------------------

      CALL BOTTOM_HOS_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,
     1     WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,UBS,VBS,WBS,
     1     ETAB,HX,HY,HXX,HYY,HXY,NCPU)

c$$$      CALL BOTTOM2(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,TIME,HH,HT,HA,HK,
c$$$     1     HOMEG,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,WORK,IFAX,U,V,W,
c$$$     1     UB,VB,WB,HX,HY,HXX,HYY,HXY,USBOT,VPHASE,HS,US,WS,NCPU)

C-----END HERE

C---------------------------------------
C     APPLY TOP BOUNDARY CONDITION
C---------------------------------------

      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,UZFS,
     1     VZFS,W,HBAR,NUTA,USTOP,NCPU)

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,
     1     EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)
      
C-----END HERE

C----------------------------------
C     CALCULATE PRESSURE FIELD
C----------------------------------

      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

      CALL FORM_DRAG_K(NXMAX,NYMAX,NXMOD,NYMOD,PEX,PEY,WORK,IFAX,
     1     TRIGSX,TRIGSY,HH,PP(1,1,1),FPK,USBOT,NCPU,time)

C-----END HERE

C---------------------------------------
C     CORRECTION OF VELOCITY FIELD
C---------------------------------------

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C-----END HERE

C------------------------------------------------------
C     APPLY BOUNDARY CONDITION TO VELOCITY FIELD
C------------------------------------------------------

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C-----END HERE

C--------------------------------------------
C     CHECK DIVERGENCE OF THE VELOCITY
C--------------------------------------------

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WIND_LES_HOS_LN_TURBINE END HERE










C=======================================================================
      SUBROUTINE WIND_LES_LAND_TURBINE(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,
     1     NXMODS,NYMODS,NXMAXS,NYMAXS,PEX,PEY,DZ,ZZ,ZW,WORK,IFAX,
     1     TRIGSX,TRIGSY,WORKS,TRIGSXS,TRIGSYS,ETA,ETA0,HH,HT,HBAR,EX,
     1     EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,EHX2,EHY,EHY2,REH,REH2,
     1     HER,HER2,EXR,EYR,HXR,HYR,U,V,W,UZFS,VZFS,HU,HV,HW,PP,DT,TIME,
     1     ERLIM,ITMAX,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY,IWAVY,BFORCE,
     1     RESTOP,RESBOT,USTOP,USBOT,VPHASE,NCPU,ERVFILT,NFILT,IFILT,
     1     KFILT,HS,US,WS,ICSC,IVANDRIEST,CS0,APLUS,IWAVEBOT,ZCS0,WVN,
     1     ETAB,EBX,EBY,VPS,VPSX,VPSY,FETAB,FVPS,WBS,PAS0,NPW,IPA,NTH,
     1     TIMEP,TCP,FR2,RDGL,NUT,DX,DY,MFILT,CSP,CSPW,WTGAMMA0,UD,NXWT,
     1     NYWT,IDISC,NDISC,WNDP,TIMETURB,RDISC,HDISC,ICUT,JCUT,KCUT,
     1     ILASD,CS_LASD,JMM0,JLM0,JNN0,JQN0,TAU13_NU,TAU13_SGS,Z0,
     1     ITLASD,TLASD,TLASD0)

C     WIND_LES SIMULATION
C     USE WALL FUNCTION

C     WAVY SURFACE MOTION IS GIVEN BY HOS SIMULATION
C     HOS SURFACE PRESSURE IS GIVEN BY WAVYWALL SIMULATION

      IMPLICIT NONE
      
      INCLUDE "mpif.h"

      INTEGER I,J,K
      INTEGER MYID,NUMPROCS,IERR

      INTEGER NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,ITMAX,IWAVY,NCPU
      REAL PEX,PEY,HBAR,DT,TIME,ERLIM,RE,HA,HK,HOMEG,TCOEF,TIMEWAVY
      REAL BFORCE,RESTOP,RESBOT,USTOP,USBOT,VPHASE
      REAL DX,DY,DELTAX,DELTAY
      INTEGER MFILT

      REAL ERVFILT
      INTEGER NFILT,IFILT,KFILT

      REAL U(NXMAX,NYMAX/NCPU,*),UB(NXMAX,NYMAX/NCPU)
      REAL FU(NXMAX,NYMAX/NCPU,NZMAX),HU(NXMAX,NYMAX/NCPU,*)
      REAL V(NXMAX,NYMAX/NCPU,*),VB(NXMAX,NYMAX/NCPU)
      REAL FV(NXMAX,NYMAX/NCPU,NZMAX),HV(NXMAX,NYMAX/NCPU,*)
      REAL W(NXMAX,NYMAX/NCPU,*),WB(NXMAX,NYMAX/NCPU)
      REAL FW(NXMAX,NYMAX/NCPU,NZMAX),HW(NXMAX,NYMAX/NCPU,*)
      REAL PP(NXMAX,NYMAX/NCPU,*)

      REAL UZFS(NXMAX,NYMAX/NCPU),UZFSH(NXMAX,NYMAX/NCPU)
      REAL VZFS(NXMAX,NYMAX/NCPU),VZFSH(NXMAX,NYMAX/NCPU)

      REAL DZ(*),ZZ(*),ZW(*)

      REAL ETA(NXMAX,*),ETA0(NXMAX,*)
      REAL HH(NXMAX,*),HT(NXMAX,*)
      REAL EX(NXMAX,*),EXX(NXMAX,*),EY(NXMAX,*),EYY(NXMAX,*)
      REAL HX(NXMAX,*),HXX(NXMAX,*),HY(NXMAX,*),HYY(NXMAX,*)
      REAL EXY(NXMAX,*),HXY(NXMAX,*)
      REAL EHX(NXMAX,*),EHX2(NXMAX,*),EHY(NXMAX,*),EHY2(NXMAX,*)
      REAL REH(NXMAX,*),REH2(NXMAX,*),HER(NXMAX,*),HER2(NXMAX,*)
      REAL EXR(NXMAX,*),EYR(NXMAX,*),HXR(NXMAX,*),HYR(NXMAX,*)
      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      REAL FTMP(NXMAX,NYMAX/NCPU)
      INTEGER IFAX(*)

      REAL ET(NXMAX,NYMAX/NCPU,NZMAX),ETW(NXMAX,NYMAX/NCPU,NZMAX)
      
      REAL HS(*),US(*),WS(*)

      REAL UT(NXMAX,NYMAX/NCPU),VT(NXMAX,NYMAX/NCPU)
      REAL WT(NXMAX,NYMAX/NCPU)

C----------------------------
C     VARIABLES FOR LES
C----------------------------

CC      REAL DELTA
      INTEGER ICSC
      REAL S11(NXMAX,NYMAX/NCPU,NZMAX),S12(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13(NXMAX,NYMAX/NCPU,NZMAX),S22(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23(NXMAX,NYMAX/NCPU,NZMAX),S33(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S11W(NXMAX,NYMAX/NCPU,NZMAX),S12W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S13W(NXMAX,NYMAX/NCPU,NZMAX),S22W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL S23W(NXMAX,NYMAX/NCPU,NZMAX),S33W(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUT(NXMAX,NYMAX/NCPU,NZMAX),NUTW(NXMAX,NYMAX/NCPU,NZMAX)
      REAL NUTA(NZMAX),NUTWA(NZMAX)
      REAL CS(NXMAX,NZMAX),CSP(NZMAX),CSD(NXMAX,NYMAX/NCPU,NZMAX)
      REAL CSPW(NZMAX)

      INTEGER IVANDRIEST,IWAVEBOT
      REAL CS0,APLUS,ZCS0

      REAL Z0(NXMAX,NYMAX/NCPU)
      REAL TAUWX(NXMAX,NYMAX/NCPU),TAUWY(NXMAX,NYMAX/NCPU)

      REAL UF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL VF(NXMAX,NYMAX/NCPU,NZMAX)
      REAL WF(NXMAX,NYMAX/NCPU,NZMAX)

C-----END HERE

C----------------------------
C     VARIABLES FOR HOS
C----------------------------

      INTEGER IRK,NPW,IPA,NTH,ITH
      REAL TH,TIMEP,TCP,TIME0,FEXP,FR2,RDGL
      INTEGER NXMAXS,NYMAXS,NXMODS,NYMODS

      REAL ETAB(NXMAXS,*)
      REAL EBX(NXMAXS,NYMAXS/NCPU),EBY(NXMAXS,NYMAXS/NCPU)
      REAL VPS(NXMAXS,*)
      REAL VPSX(NXMAXS,NYMAXS/NCPU),VPSY(NXMAXS,NYMAXS/NCPU)
      REAL FETAB(NXMAXS,NYMAXS/NCPU,4),FVPS(NXMAXS,NYMAXS/NCPU,4)
      REAL PAS(NXMAXS,NYMAXS/NCPU),PAS0(NXMAXS,NYMAXS/NCPU)
      REAL WVN(NXMAXS,NYMAXS/NCPU,NPW)
      REAL UBS(NXMAXS,NYMAXS/NCPU),VBS(NXMAXS,NYMAXS/NCPU)
      REAL WBS(NXMAXS,NYMAXS/NCPU)
      
      REAL WORKS(*),TRIGSXS(*),TRIGSYS(*)

C-----END HERE

C-------------------------------------
C     VARIABLES FOR WIND TURBINE
C-------------------------------------

      INTEGER NXWT,NYWT,NDP,ICUT,JCUT,KCUT
      REAL RDISC,HDISC
      INTEGER IDISC(NXMAX,NYMAX,*),NDISC(NXMAX,NYMAX,*)
      
      REAL WTGAMMA0(NXMAX,NYMAX,*),UD(NXWT*NYWT)
      REAL WTFORCE(NXMAX,NYMAX/NCPU,NZMAX)

      REAL TIMETURB
      REAL WNDP

C-----END HERE

C-------------------------------------------
C     VARIABLES FOR LASD DYNAMIC MODEL
C-------------------------------------------

      INTEGER ILASD,ITLASD
      REAL TLASD,TLASD0
      
      REAL JMM0(NXMAX,NYMAX,*),JLM0(NXMAX,NYMAX,*)
      REAL JNN0(NXMAX,NYMAX,*),JQN0(NXMAX,NYMAX,*)
      REAL CS_LASD(NXMAX,NYMAX/NCPU,*)
      REAL NUT0(NXMAX,NYMAX/NCPU,NZMAX),NUTW0(NXMAX,NYMAX/NCPU,NZMAX)
      REAL TAU13_NU(NXMAX,NYMAX/NCPU,*),TAU13_SGS(NXMAX,NYMAX/NCPU,*)

      real fpk(nxmax)

C-----END HERE

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C------------------------------------------
C     CALCULATE NONLINEAR COEFFICIENT
C------------------------------------------

      CALL COEF_ET(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ZZ,ZW,HT,EHX,EHY,
     1     HER,U,V,W,ET,ETW,WORK,TRIGSX,TRIGSY,IFAX,NCPU)

C-----END HERE

C--------------------------------------
C     CALCULATE WIND TURBINE FORCE
C--------------------------------------
      
      CALL DISCLOCA_V3(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NDISC,
     1     IDISC,WTGAMMA0,PEX,PEY,HBAR,ETA,HH,ZZ,NXWT,NYWT,WNDP,
     1     RDISC,HDISC,NCPU,ICUT,JCUT,KCUT,IWAVY)

      CALL VELDISC_V2(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,UD,
     1     U,NDISC,IDISC,NXWT,NYWT,WNDP,WTGAMMA0,DT,USBOT,HBAR)
      
      CALL WIND_TURBINE_FORCE(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,
     1     NZ,NCPU,PEX,PEY,WTFORCE,WTGAMMA0,UD,NXWT,NYWT,IDISC,NDISC)

C-----END HERE

C---------------------------------
C     FILTERING THE VELOCITY
C---------------------------------

      DELTAX=1.5*DX
      DELTAY=1.5*DY

      DO K=1,NZ+1
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,U(1,1,K),UF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,V(1,1,K),VF(1,1,K),
     1        MFILT)
         CALL LESFILTERING(NXMAX,NYMAX,NXMOD,NYMOD,NCPU,WORK,IFAX,
     1        TRIGSX,TRIGSY,PEX,PEY,DELTAX,DELTAY,W(1,1,K),WF(1,1,K),
     1        MFILT)
      ENDDO

C-----END HERE

C---------------------------------------------
C     CALCULATE WALL-LAYER MODEL FOR LES
C---------------------------------------------

CC      CALL WALL_MODEL(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,PEX,PEY,
CC     1     TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,DELTAY,NCPU)
c$$$      CALL WALL_MODEL_V2(NXMOD,NYMOD,NXMAX,NYMAX,U,V,Z0,ZZ,HBAR,
c$$$     1     PEX,PEY,TAUWX,TAUWY,UF,VF,WORK,TRIGSX,TRIGSY,IFAX,DELTAX,
c$$$     1     DELTAY,HH,ETA,NCPU)
      CALL WALL_MODEL_V3(NXMOD,NYMOD,NXMAX,NYMAX,Z0,ZZ,HBAR,PEX,
     1     PEY,TAUWX,TAUWY,UF,VF,WF,WORK,TRIGSX,TRIGSY,IFAX,HH,HX,HY,
     1     ETA,NCPU)

C-----END HERE

C-----------------------------------------------
C     CALCULATE MODEL COEFFICIENTS FOR LES
C-----------------------------------------------

      DO K=1,NZMAX
         DO J=1,NYMAX/NCPU
            DO I=1,NXMAX
               NUT(I,J,K)=0.0
               NUTW(I,J,K)=0.0
               S11(I,J,K)=0.0
               S12(I,J,K)=0.0
               S13(I,J,K)=0.0
               S22(I,J,K)=0.0
               S23(I,J,K)=0.0
               S33(I,J,K)=0.0
               S11W(I,J,K)=0.0
               S12W(I,J,K)=0.0
               S13W(I,J,K)=0.0
               S22W(I,J,K)=0.0
               S23W(I,J,K)=0.0
               S33W(I,J,K)=0.0
            ENDDO
         ENDDO
      ENDDO

c$$$      CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
c$$$     1     HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
c$$$     1     IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,IVANDRIEST,
c$$$     1     CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,
c$$$     1     UF,VF,WF,MFILT)
c$$$
c$$$      CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
c$$$     1     ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,TRIGSY,
c$$$     1     IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,IVANDRIEST,CS0,
c$$$     1     APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,
c$$$     1     VF,WF,MFILT,CSPW)

      IF(ILASD.EQ.1) THEN

         CALL GETNUT_LASD(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,ZZ,
     1        ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1        TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,S13W,S23W,CS_LASD,NUT,
     1        NUTW,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT,JMM0,JLM0,JNN0,
     1        JQN0,DX,DY,HH,DT,TIME,ITLASD,TLASD0,CSP,CS0,Z0)

         IF((TIME-TLASD).LT.(1.E-6)) THEN
            DO K=1,NZMAX
               DO J=1,NYMAX/NCPU
                  DO I=1,NXMAX
                     NUT0(I,J,K)=0.0
                     NUTW0(I,J,K)=0.0
                  ENDDO
               ENDDO
            ENDDO
            CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1           DZ,ZZ,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,
     1           TRIGSX,TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,
     1           NUT0,NUTA,IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,
     1           ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT)
            CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,
     1           NCPU,DZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,
     1           TRIGSX,TRIGSY,IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW0,
     1           NUTWA,IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,
     1           ZCS0,Z0,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT,CSPW)
            FEXP=EXP(-TCOEF*(TIME-TLASD)**2)
            DO K=1,NZMAX
               DO J=1,NYMAX/NCPU
                  DO I=1,NXMAX
                     NUT(I,J,K)=NUT0(I,J,K)*(1.-FEXP)+NUT(I,J,K)*FEXP
                     NUTW(I,J,K)=NUTW0(I,J,K)*(1.-FEXP)+NUT(I,J,K)*FEXP
                  ENDDO
               ENDDO
            ENDDO
         ENDIF

      ELSE IF(ILASD.EQ.0) THEN

         CALL GETNUT_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,DZ,
     1        ZZ,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1        TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,CS,CSP,CSD,NUT,NUTA,
     1        IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,
     1        DELTAX,DELTAY,UF,VF,WF,MFILT)
         
         CALL GETNUTW_WALLMODEL(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1        DZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,TRIGSX,
     1        TRIGSY,IFAX,S11W,S12W,S13W,S22W,S23W,S33W,NUTW,NUTWA,
     1        IVANDRIEST,CS0,APLUS,RESTOP,RESBOT,IWAVEBOT,ZCS0,Z0,HBAR,
     1        DELTAX,DELTAY,UF,VF,WF,MFILT,CSPW)

      ELSE IF(ILASD.EQ.2) THEN
         
         CALL GETNUT_PASD(NXMAX,NYMAX,NZMAX,NXMOD,NYMOD,NZ,NCPU,
     1        DZ,ZZ,ZW,HER,HXR,EXR,HYR,EYR,U,V,W,ICSC,PEX,PEY,WORK,
     1        TRIGSX,TRIGSY,IFAX,S11,S12,S13,S22,S23,S33,S13W,S23W,NUT,
     1        NUTW,HBAR,DELTAX,DELTAY,UF,VF,WF,MFILT,CSP,Z0,cspw)

      ELSE

         IF(MYID.EQ.0) THEN
            PRINT*, 'INVALID VALUE FOR ILASD:',ILASD
         ENDIF
         STOP

      ENDIF

      DO K=1,NZ
         DO J=1,NYMAX/NCPU
            DO I=1,NXMOD
               TAU13_NU(I,J,K)=-2./RE*S13(I,J,K)
               TAU13_SGS(I,J,K)=-2.*NUT(I,J,K)*S13(I,J,K)
            ENDDO
         ENDDO
      ENDDO

C-----END HERE

C---------------------------------
C     PREDICTION OF VELOCITY
C---------------------------------

      CALL FUN_U_LES8_TURBINE_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,
     1     ZZ,TIME,DT,WORK,IFAX,TRIGSX,TRIGSY,FU,HU,U,V,W,BFORCE,PEX,
     1     PEY,ETA,HH,HBAR,EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S11,
     1     S12,S13W,NUT,NUTW,TAUWX,WTFORCE,TIMETURB)

      CALL FUN_V_LES8_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZZ,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FV,HV,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ET,NCPU,S12,S22,S23W,NUT,
     1     NUTW,TAUWY)

      CALL FUN_W_LES8_V2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,DZ,ZW,TIME,
     1     DT,WORK,IFAX,TRIGSX,TRIGSY,FW,HW,U,V,W,PEX,PEY,ETA,HH,HBAR,
     1     EHX,EHY,HER,EXR,EYR,HXR,HYR,HT,ETW,NCPU,S13,S23,S33,S13W,
     1     S23W,NUT,NUTW)

      CALL VELOCITY_PREDICTION(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,U,V,W,FU,
     1     FV,FW,NCPU)

      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

C-------------------------------------------------------------
C     APPLY SURFACE WAVE BOUNDARY CONDITION TO TURBULENCE
C-------------------------------------------------------------

      CALL BOTTOM_LAND_LES(NXMOD,NYMOD,NXMAX,NYMAX,NXMODS,NYMODS,NXMAXS,
     1     NYMAXS,PEX,PEY,TIME,HH,HT,TCOEF,TIMEWAVY,IWAVY,TRIGSX,TRIGSY,
     1     WORK,TRIGSXS,TRIGSYS,WORKS,IFAX,U,V,W,UB,VB,WB,ETAB,HX,HY,
     1     HXX,HYY,HXY,NCPU)

C-----END HERE

C---------------------------------------
C     APPLY TOP BOUNDARY CONDITION
C---------------------------------------

      CALL TOP_FS_LES_HOS(NXMOD,NYMOD,NZ,NXMAX,NYMAX,ETA,ETA0,HH,UZFS,
     1     VZFS,W,HBAR,NUTA,USTOP,NCPU)

      CALL NL_COEF(NXMOD,NYMOD,NXMAX,NYMAX,PEX,PEY,WORK,TRIGSX,TRIGSY,
     1     IFAX,ETA,HH,HBAR,EX,EXX,EY,EYY,EXY,HX,HXX,HY,HYY,HXY,EHX,
     1     EHX2,EHY,EHY2,REH,REH2,HER,HER2,EXR,EYR,HXR,HYR,NCPU)

C-----END HERE

C----------------------------------
C     CALCULATE PRESSURE FIELD
C----------------------------------

      do i=1,nxmod
         do j=1,nymax/ncpu
            ut(i,j)=u(i,j,nz)
            vt(i,j)=v(i,j,nz)
            wt(i,j)=0.
         enddo
      enddo

      CALL PRESS_G(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,PEX,PEY,DZ,ZZ,
     1     PP,DT,HBAR,U,V,W,UB,VB,WB,UT,VT,WT,ETA,EX,EY,HX,HY,EXR,EYR,
     1     HXR,HYR,HER,WORK,IFAX,TRIGSX,TRIGSY,ERLIM,ITMAX,TIMEWAVY,
     1     TIME,NCPU)

      CALL FORM_DRAG_K(NXMAX,NYMAX,NXMOD,NYMOD,PEX,PEY,WORK,IFAX,
     1     TRIGSX,TRIGSY,HH,PP(1,1,1),FPK,USBOT,NCPU,time)

C-----END HERE

C---------------------------------------
C     CORRECTION OF VELOCITY FIELD
C---------------------------------------

      CALL CORRECTION_US(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DT,DZ,ZZ,
     1     PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,U,V,W,PP,HBAR,EXR,EYR,HXR,
     1     HYR,HER,NCPU)

C-----END HERE

C------------------------------------------------------
C     APPLY BOUNDARY CONDITION TO VELOCITY FIELD
C------------------------------------------------------

      CALL BC_LES(NXMOD,NYMOD,NZ,NXMAX,NYMAX,NZMAX,U,V,W,UZFS,VZFS,UB,
     1     VB,WB,DZ,ZZ,PEX,PEY,WORK,TRIGSX,TRIGSY,IFAX,EXR,EYR,HXR,HYR,
     1     HER,NCPU)

C-----END HERE

C--------------------------------------------
C     CHECK DIVERGENCE OF THE VELOCITY
C--------------------------------------------

      CALL VOLUME_LNR2(NXMOD,NYMOD,NZ,NXMAX,NYMAX,DZ,ZZ,PEX,PEY,
     1     WORK,TRIGSX,TRIGSY,IFAX,U,V,W,EXR,EYR,HXR,HYR,HER,NCPU,
     1     TIME,KFILT,ERVFILT)
      
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,U,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,V,NCPU)
      CALL DEALIASXY_PARA2(NXMOD,NYMOD,NZ+1,NXMAX,NYMAX,WORK,TRIGSX,
     1     TRIGSY,IFAX,W,NCPU)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE WIND_LES_LAND_TURBINE END HERE








C============================================================================
      SUBROUTINE WP_EXTRACT(NXWT,NYWT,UD,PEX,PEY,TIME,RDISC,HDISC,USBOT,
     1     HH,NXMAX,NYMAX,NXMOD,NYMOD,NCPU)

C     CALCULATE POWER EXTRACTION BY WIND TURBINE

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR

      INTEGER I,J,NJ,IC,JC,JJ
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU

      REAL TIME,RDISC,HDISC,USBOT,ETAM

      REAL CT
      DATA CT/1.33/
C     CT: THRUST COEFFICIENT (CT' IN CALAF_MENEVEAU_MEYERS_2010)

      REAL TWOPI,PEX,PEY,XL,YL,SX,SY,DY
C     SX: X-DISTANCE BETWEEN TURBINE ROWS
C     SY: Y-DISTANCE BETWEEN TURBINE COLUMNS

      INTEGER NXWT,NYWT
      REAL UD(NXWT*NYWT)
C     UD: DISK-AVERAGED TIME-AVERAGED LOCAL VELOCITY

      REAL WPEXT(NXWT,NYWT)
C     WPEXT: POWER EXTRACTION BY WIND TURBINE

      REAL HH(NXMAX,*),HH0(NXMAX,NYMAX)

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

C---------------------------------
C     INITIALIZE PARAMETERS
C---------------------------------

      TWOPI=2*ACOS(-1.)
      XL=TWOPI/PEX
      YL=TWOPI/PEY
      SX=XL/FLOAT(NXWT)
      SY=YL/FLOAT(NYWT)
      
      DY=YL/FLOAT(NYMOD)
      NJ=INT(RDISC/DY)+1

C-----END HERE

C-----------------------------------
C     TRANSFER DATA INTO MYID=0
C-----------------------------------

      CALL ALLTOONE(NXMOD,NYMOD,NXMAX,NYMAX,HH,HH0,NCPU)

C-----END HERE
      
C--------------------------------------
C     CALCULATE PWOER EXTRACTION
C--------------------------------------

      IF(MYID.EQ.0) THEN
         
         DO I=1,NXWT
            DO J=1,NYWT
               WPEXT(I,J)=TWOPI/16.*CT*UD((I-1)*NYWT+J)**3./SX/SY
               IC=(2*I-1)*NXMOD/NXWT/2+1
               JC=(2*J-1)*NYMOD/NYWT/2+1
               ETAM=0.
               DO JJ=JC-NJ,JC+NJ
                  ETAM=ETAM-HH0(IC,JJ)/FLOAT(2*NJ+1)
               ENDDO
               WRITE(8000000+I*1000+J,101) TIME*USBOT/HDISC,
     1              WPEXT(I,J)/USBOT**3,ETAM
            ENDDO
         ENDDO
         
      ENDIF

 101  FORMAT(F10.3,E12.4,E12.4)

C-----END HERE
      
      RETURN
      END

C=====SUBROUTINE WP_EXTRACTION END HERE








C========================================================================
      SUBROUTINE SAVEUD(ISAVE,NXWT,NYWT,UD)
      
      IMPLICIT NONE

      INCLUDE "mpif.h"
      
      INTEGER I,J,ISAVE,NXWT,NYWT
      INTEGER MYID,NUMPROCS,IERR

      REAL UD(NXWT*NYWT)

      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)


      IF(MYID.EQ.0) THEN

         DO I=1,NXWT
            DO J=1,NYWT
               WRITE(ISAVE+1,*) UD((I-1)*NYWT+J)
            ENDDO
         ENDDO

      ENDIF

      RETURN
      END

C=====SUBROUTINE SAVEUD END HERE






C========================================================================
      SUBROUTINE OUTPUT_UD(ISAVE,TIME,NXWT,NYWT,UD)
      
      IMPLICIT NONE

      INCLUDE "mpif.h"
      
      INTEGER I,J,ISAVE,NXWT,NYWT
      INTEGER MYID,NUMPROCS,IERR

      REAL TIME

      REAL UD(NXWT*NYWT)

      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)


      IF(MYID.EQ.0) THEN

         WRITE(ISAVE*100,*) TIME
         DO I=1,NXWT
            DO J=1,NYWT
               WRITE(ISAVE*100,*) UD((I-1)*NYWT+J)
            ENDDO
         ENDDO

      ENDIF

      RETURN
      END

C=====SUBROUTINE OUTPUT_UD END HERE






C========================================================================
      SUBROUTINE REREADUD(ISAVE,NXWT,NYWT,UD)
      
      IMPLICIT NONE

      INCLUDE "mpif.h"
      
      INTEGER I,J,ISAVE,NXWT,NYWT
      INTEGER MYID,NUMPROCS,IERR

      REAL UD(NXWT*NYWT)

      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)
      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)

      DO I=1,NXWT
         DO J=1,NYWT
            READ(ISAVE,*) UD((I-1)*NYWT+J)
         ENDDO
      ENDDO
      
      RETURN
      END

C=====SUBROUTINE REREADUD END HERE







C=========================================================================
      SUBROUTINE FORM_DRAG_K(NXMAX,NYMAX,NXMOD,NYMOD,PEX,PEY,WORK,IFAX,
     1     TRIGSX,TRIGSY,HH,PP,FPK,USBOT,NCPU,time)

      IMPLICIT NONE

      INCLUDE "mpif.h"

      INTEGER MYID,NUMPROCS,IERR
      
      INTEGER I,J
      INTEGER NXMAX,NYMAX,NXMOD,NYMOD,NCPU
      INTEGER NCREQ,JJ1,JJ2,NYEND
      REAL PEX,PEY,PI,USBOT

      REAL WORK(*),TRIGSX(*),TRIGSY(*)
      INTEGER IFAX(*)
      REAL FP0(NXMAX),BETA0(NXMAX)
      REAL HH(NXMAX,*),PP(NXMAX,*)
      REAL ETA(NXMAX),P1(NXMAX),A(NXMAX),B(NXMAX)
      REAL THETAE(NXMAX),THETAP(NXMAX),DTHETA(NXMAX)
      REAL ALPHA(NXMAX)
      
      REAL FPK0(NXMAX),FPK(NXMAX)

      real betak0(nxmax),betak(nxmax)
      real aa0(nxmax),aa(nxmax)

      real time

      CALL MPI_COMM_RANK(MPI_COMM_WORLD,MYID,IERR)
      CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NUMPROCS,IERR)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     NCREQ IS THE # OF CPUS THAT CONTAIN USEFUL ELEMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      NCREQ=NCPU-(NYMAX-NYMOD)*NCPU/NYMAX

      JJ1=NYMAX/NCPU-MOD(NYMAX-NYMOD,NYMAX/NCPU)
      JJ2=NYMAX/NCPU

      IF(MYID.EQ.NCREQ-1) THEN
         NYEND=JJ1
      ELSE IF(MYID.LT.NCREQ-1) THEN
         NYEND=JJ2
      ELSE
         NYEND=0
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      PI=ACOS(-1.)

      DO I=1,NXMAX
         FPK(I)=0.
         FPK0(I)=0.
         betak0(i)=0.
         aa(i)=0.
         aa0(i)=0.
      ENDDO

      DO J=1,NYEND

         DO I=1,NXMOD
            ETA(I)=-HH(I,J)
            P1(I)=PP(I,J)
         ENDDO

         CALL FFTX(ETA,WORK,TRIGSX,IFAX,NXMOD,1,NXMAX,-1)
         DO I=2,NXMOD/2+1
            A(I)=2.0*SQRT(ETA(2*I-1)**2+ETA(2*I)**2)
            IF(ETA(2*I-1).GT.0) THEN
               THETAE(I)=ATAN(ETA(2*I)/ETA(2*I-1))
            ELSEIF(ETA(2*I-1).LT.0) THEN
               IF(ETA(2*I).GT.0) THEN
                  THETAE(I)=ATAN(ETA(2*I)/ETA(2*I-1))+PI
               ELSE
                  THETAE(I)=ATAN(ETA(2*I)/ETA(2*I-1))-PI
               ENDIF
            ELSEIF(ETA(2*I).GT.0) THEN
               THETAE(I)=PI/2.0
            ELSEIF(ETA(2*I).LT.0) THEN
               THETAE(I)=-PI/2.0
            ELSE
               THETAE(I)=0.0
            ENDIF
            THETAE(I)=-THETAE(I)
         ENDDO
         
         CALL FFTX(P1,WORK,TRIGSX,IFAX,NXMOD,1,NXMAX,-1)
         DO I=2,NXMOD/2+1
            B(I)=2.0*SQRT(P1(2*I-1)**2+P1(2*I)**2)
            IF(P1(2*I-1).GT.0) THEN
               THETAP(I)=ATAN(P1(2*I)/P1(2*I-1))
            ELSEIF(P1(2*I-1).LT.0) THEN
               IF(P1(2*I).GT.0) THEN
                  THETAP(I)=ATAN(P1(2*I)/P1(2*I-1))+PI
               ELSE
                  THETAP(I)=ATAN(P1(2*I)/P1(2*I-1))-PI
               ENDIF
            ELSEIF(P1(2*I).GT.0) THEN
               THETAP(I)=PI/2.0
            ELSEIF(P1(2*I).LT.0) THEN
               THETAP(I)=-PI/2.0
            ELSE
               THETAP(I)=0.0
            ENDIF
            THETAP(I)=-THETAP(I)
         ENDDO

         DO I=2,NXMOD/2+1
            IF(ABS(A(I)).GT.1.E-18) THEN
               ALPHA(I)=B(I)/A(I)/FLOAT(I-1)
            ELSE
               ALPHA(I)=0.
            ENDIF
            DTHETA(I)=THETAP(I)-THETAE(I)
            IF(DTHETA(I).GT.2.*PI) THEN
               DTHETA(I)=DTHETA(I)-2.*PI
            ELSEIF(DTHETA(I).LT.0.) THEN
               DTHETA(I)=DTHETA(I)+2.*PI
            ENDIF
         ENDDO
         
         DO I=2,NXMOD/2+1
            BETA0(I)=-ALPHA(I)/USBOT**2*SIN(DTHETA(I))
            FP0(I)=BETA0(I)*0.5*(A(I)*(I-1)*PEX)**2*USBOT**2
         ENDDO
         
C-------------------------------------
C     REMOVE ZERO MODE
C     PERFORM SPANWISE AVERAGING
C-------------------------------------

         DO I=1,NXMOD/2
            FPK0(I)=FPK0(I)+FP0(I+1)/FLOAT(NYEND)
c            betak0(i)=betak0(i)+beta0(i+1)/float(nyend)
            aa0(i)=aa0(i)+a(i+1)/float(nyend)
         ENDDO

C-----END HERE

      ENDDO

C--------------------------------------
C     AVERAGE AMONG DIFFERENT CPUS
C--------------------------------------
      
      IF(NYEND.EQ.0) THEN
         DO I=1,NXMOD/2
            FPK0(I)=0.
c            betak0(i)=0.
            aa0(i)=0.
         ENDDO
      ENDIF
      
      CALL MPI_ALLREDUCE(FPK0,FPK,NXMAX,MPI_DOUBLE_PRECISION,
     1     MPI_SUM,MPI_COMM_WORLD,IERR)
c      CALL MPI_ALLREDUCE(betak0,betaK,NXMAX,MPI_DOUBLE_PRECISION,
c     1     MPI_SUM,MPI_COMM_WORLD,IERR)
      CALL MPI_ALLREDUCE(aa0,aa,NXMAX,MPI_DOUBLE_PRECISION,
     1     MPI_SUM,MPI_COMM_WORLD,IERR)

      if(myid.eq.0) then
         write(55,*) 'zone t="form_drag"'
      endif
      DO I=1,NXMOD/2/3*2-1
         aa(i)=aa(i)/float(ncreq)
         FPK(I)=FPK(I)/FLOAT(NCREQ)
         betak(i)=fpk(i)/(0.5*(aa(i)*i*pex)**2*usbot**2)
         if(myid.eq.0) then
            write(55,505) i,betak(i),fpk(i),aa(i)
c            if(i.eq.4) then
c               write(55,506) time,betak(i),fpk(i),a(i+1)
c            endif
         endif
      ENDDO
 505  format(i4,3e12.4)
 506  format(f9.5,3e12.4)

C-----END HERE

      RETURN
      END

C=====SUBROUTINE FORM_DRAG_K END HERE
